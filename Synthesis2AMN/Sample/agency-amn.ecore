<?xml version="1.0" encoding="ISO-8859-1"?>
<xmi:XMI xmi:version="2.0"
    xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:amn="http://synthesis.ipi.ac.ru/amn/" xmlns:amn-exp="http://synthesis.ipi.ac.ru/amn/expression"
    xmlns:amn-pred="http://synthesis.ipi.ac.ru/amn/predicate" xmlns:amn-subst="http://synthesis.ipi.ac.ru/amn/substitution">
  <amn:AbstractMachine name="FundingAgencySchema_Context">
    <sets name="AVAL"/>
    <sets name="OID"/>
    <properties xsi:type="amn-pred:AtomicPredicate" sign=":">
      <expression xsi:type="amn-exp:NamedConstant" name="Obj"/>
      <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
        <expression xsi:type="amn-exp:NamedConstant" name="AVAL"/>
      </expression>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign=":">
      <expression xsi:type="amn-exp:NamedConstant" name="self"/>
      <expression xsi:type="amn-exp:BinaryOperator" sign=">->>">
        <expression xsi:type="amn-exp:NamedConstant" name="Obj"/>
        <expression xsi:type="amn-exp:NamedConstant" name="OID"/>
      </expression>
    </properties>
    <abstractConstants>Obj</abstractConstants>
    <abstractConstants>self</abstractConstants>
  </amn:AbstractMachine>
  <amn:AbstractMachine name="FundingAgency_Context">
    <sets name="AVAL"/>
    <sets name="OID"/>
    <properties xsi:type="amn-pred:AtomicPredicate" sign=":">
      <expression xsi:type="amn-exp:NamedConstant" name="Obj"/>
      <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
        <expression xsi:type="amn-exp:NamedConstant" name="AVAL"/>
      </expression>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign=":">
      <expression xsi:type="amn-exp:NamedConstant" name="self"/>
      <expression xsi:type="amn-exp:BinaryOperator" sign=">->>">
        <expression xsi:type="amn-exp:NamedConstant" name="Obj"/>
        <expression xsi:type="amn-exp:NamedConstant" name="OID"/>
      </expression>
    </properties>
    <abstractConstants>Obj</abstractConstants>
    <abstractConstants>self</abstractConstants>
  </amn:AbstractMachine>
  <amn:AbstractMachine name="FundingAgency_structure_Context">
    <sets name="AVAL"/>
    <sets name="OID"/>
    <sets name="Researcher_research_area_Enum">
      <element>computer_science</element>
      <element>mathematics</element>
      <element>biology</element>
      <element>chemistry</element>
    </sets>
    <sets name="Specialist_research_field_Enum">
      <element>computer_science</element>
      <element>mathematics</element>
      <element>biology</element>
      <element>chemistry</element>
    </sets>
    <sets name="Specialist_degree_Enum">
      <element>PhD</element>
      <element>DrSc</element>
      <element>MSc</element>
    </sets>
    <properties xsi:type="amn-pred:AtomicPredicate" sign=":">
      <expression xsi:type="amn-exp:NamedConstant" name="Obj"/>
      <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
        <expression xsi:type="amn-exp:NamedConstant" name="AVAL"/>
      </expression>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign=":">
      <expression xsi:type="amn-exp:NamedConstant" name="self"/>
      <expression xsi:type="amn-exp:BinaryOperator" sign=">->>">
        <expression xsi:type="amn-exp:NamedConstant" name="Obj"/>
        <expression xsi:type="amn-exp:NamedConstant" name="OID"/>
      </expression>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign=":">
      <expression xsi:type="amn-exp:NamedConstant" name="extp_Teacher"/>
      <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
        <expression xsi:type="amn-exp:NamedConstant" name="Obj"/>
      </expression>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign=":">
      <expression xsi:type="amn-exp:NamedConstant" name="ext_Teacher"/>
      <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
        <expression xsi:type="amn-exp:NamedConstant" name="Obj"/>
      </expression>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="&lt;:">
      <expression xsi:type="amn-exp:NamedConstant" name="extp_Teacher"/>
      <expression xsi:type="amn-exp:NamedConstant" name="ext_Teacher"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign=":">
      <expression xsi:type="amn-exp:NamedConstant" name="extp_Student"/>
      <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
        <expression xsi:type="amn-exp:NamedConstant" name="Obj"/>
      </expression>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign=":">
      <expression xsi:type="amn-exp:NamedConstant" name="ext_Student"/>
      <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
        <expression xsi:type="amn-exp:NamedConstant" name="Obj"/>
      </expression>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="&lt;:">
      <expression xsi:type="amn-exp:NamedConstant" name="extp_Student"/>
      <expression xsi:type="amn-exp:NamedConstant" name="ext_Student"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign=":">
      <expression xsi:type="amn-exp:NamedConstant" name="extp_Proposal"/>
      <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
        <expression xsi:type="amn-exp:NamedConstant" name="Obj"/>
      </expression>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign=":">
      <expression xsi:type="amn-exp:NamedConstant" name="ext_Proposal"/>
      <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
        <expression xsi:type="amn-exp:NamedConstant" name="Obj"/>
      </expression>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="&lt;:">
      <expression xsi:type="amn-exp:NamedConstant" name="extp_Proposal"/>
      <expression xsi:type="amn-exp:NamedConstant" name="ext_Proposal"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign=":">
      <expression xsi:type="amn-exp:NamedConstant" name="extp_Review"/>
      <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
        <expression xsi:type="amn-exp:NamedConstant" name="Obj"/>
      </expression>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign=":">
      <expression xsi:type="amn-exp:NamedConstant" name="ext_Review"/>
      <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
        <expression xsi:type="amn-exp:NamedConstant" name="Obj"/>
      </expression>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="&lt;:">
      <expression xsi:type="amn-exp:NamedConstant" name="extp_Review"/>
      <expression xsi:type="amn-exp:NamedConstant" name="ext_Review"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign=":">
      <expression xsi:type="amn-exp:NamedConstant" name="extp_Person"/>
      <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
        <expression xsi:type="amn-exp:NamedConstant" name="Obj"/>
      </expression>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign=":">
      <expression xsi:type="amn-exp:NamedConstant" name="ext_Person"/>
      <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
        <expression xsi:type="amn-exp:NamedConstant" name="Obj"/>
      </expression>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="&lt;:">
      <expression xsi:type="amn-exp:NamedConstant" name="extp_Person"/>
      <expression xsi:type="amn-exp:NamedConstant" name="ext_Person"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign=":">
      <expression xsi:type="amn-exp:NamedConstant" name="extp_Researcher"/>
      <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
        <expression xsi:type="amn-exp:NamedConstant" name="Obj"/>
      </expression>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign=":">
      <expression xsi:type="amn-exp:NamedConstant" name="ext_Researcher"/>
      <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
        <expression xsi:type="amn-exp:NamedConstant" name="Obj"/>
      </expression>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="&lt;:">
      <expression xsi:type="amn-exp:NamedConstant" name="extp_Researcher"/>
      <expression xsi:type="amn-exp:NamedConstant" name="ext_Researcher"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign=":">
      <expression xsi:type="amn-exp:NamedConstant" name="extp_Expert"/>
      <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
        <expression xsi:type="amn-exp:NamedConstant" name="Obj"/>
      </expression>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign=":">
      <expression xsi:type="amn-exp:NamedConstant" name="ext_Expert"/>
      <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
        <expression xsi:type="amn-exp:NamedConstant" name="Obj"/>
      </expression>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="&lt;:">
      <expression xsi:type="amn-exp:NamedConstant" name="extp_Expert"/>
      <expression xsi:type="amn-exp:NamedConstant" name="ext_Expert"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign=":">
      <expression xsi:type="amn-exp:NamedConstant" name="extp_Secretary"/>
      <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
        <expression xsi:type="amn-exp:NamedConstant" name="Obj"/>
      </expression>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign=":">
      <expression xsi:type="amn-exp:NamedConstant" name="ext_Secretary"/>
      <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
        <expression xsi:type="amn-exp:NamedConstant" name="Obj"/>
      </expression>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="&lt;:">
      <expression xsi:type="amn-exp:NamedConstant" name="extp_Secretary"/>
      <expression xsi:type="amn-exp:NamedConstant" name="ext_Secretary"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign=":">
      <expression xsi:type="amn-exp:NamedConstant" name="extp_Submission"/>
      <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
        <expression xsi:type="amn-exp:NamedConstant" name="Obj"/>
      </expression>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign=":">
      <expression xsi:type="amn-exp:NamedConstant" name="ext_Submission"/>
      <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
        <expression xsi:type="amn-exp:NamedConstant" name="Obj"/>
      </expression>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="&lt;:">
      <expression xsi:type="amn-exp:NamedConstant" name="extp_Submission"/>
      <expression xsi:type="amn-exp:NamedConstant" name="ext_Submission"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign=":">
      <expression xsi:type="amn-exp:NamedConstant" name="extp_Evaluation"/>
      <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
        <expression xsi:type="amn-exp:NamedConstant" name="Obj"/>
      </expression>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign=":">
      <expression xsi:type="amn-exp:NamedConstant" name="ext_Evaluation"/>
      <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
        <expression xsi:type="amn-exp:NamedConstant" name="Obj"/>
      </expression>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="&lt;:">
      <expression xsi:type="amn-exp:NamedConstant" name="extp_Evaluation"/>
      <expression xsi:type="amn-exp:NamedConstant" name="ext_Evaluation"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign=":">
      <expression xsi:type="amn-exp:NamedConstant" name="extp_Employee"/>
      <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
        <expression xsi:type="amn-exp:NamedConstant" name="Obj"/>
      </expression>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign=":">
      <expression xsi:type="amn-exp:NamedConstant" name="ext_Employee"/>
      <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
        <expression xsi:type="amn-exp:NamedConstant" name="Obj"/>
      </expression>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="&lt;:">
      <expression xsi:type="amn-exp:NamedConstant" name="extp_Employee"/>
      <expression xsi:type="amn-exp:NamedConstant" name="ext_Employee"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign=":">
      <expression xsi:type="amn-exp:NamedConstant" name="extp_Specialist"/>
      <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
        <expression xsi:type="amn-exp:NamedConstant" name="Obj"/>
      </expression>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign=":">
      <expression xsi:type="amn-exp:NamedConstant" name="ext_Specialist"/>
      <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
        <expression xsi:type="amn-exp:NamedConstant" name="Obj"/>
      </expression>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="&lt;:">
      <expression xsi:type="amn-exp:NamedConstant" name="extp_Specialist"/>
      <expression xsi:type="amn-exp:NamedConstant" name="ext_Specialist"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign=":">
      <expression xsi:type="amn-exp:NamedConstant" name="extp_Dispatcher"/>
      <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
        <expression xsi:type="amn-exp:NamedConstant" name="Obj"/>
      </expression>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign=":">
      <expression xsi:type="amn-exp:NamedConstant" name="ext_Dispatcher"/>
      <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
        <expression xsi:type="amn-exp:NamedConstant" name="Obj"/>
      </expression>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="&lt;:">
      <expression xsi:type="amn-exp:NamedConstant" name="extp_Dispatcher"/>
      <expression xsi:type="amn-exp:NamedConstant" name="ext_Dispatcher"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="=">
      <expression xsi:type="amn-exp:BinaryOperator" sign="/\">
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Teacher"/>
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Student"/>
      </expression>
      <expression xsi:type="amn-exp:SetValue"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="=">
      <expression xsi:type="amn-exp:BinaryOperator" sign="/\">
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Teacher"/>
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Proposal"/>
      </expression>
      <expression xsi:type="amn-exp:SetValue"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="=">
      <expression xsi:type="amn-exp:BinaryOperator" sign="/\">
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Teacher"/>
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Review"/>
      </expression>
      <expression xsi:type="amn-exp:SetValue"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="=">
      <expression xsi:type="amn-exp:BinaryOperator" sign="/\">
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Teacher"/>
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Person"/>
      </expression>
      <expression xsi:type="amn-exp:SetValue"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="=">
      <expression xsi:type="amn-exp:BinaryOperator" sign="/\">
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Teacher"/>
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Researcher"/>
      </expression>
      <expression xsi:type="amn-exp:SetValue"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="=">
      <expression xsi:type="amn-exp:BinaryOperator" sign="/\">
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Teacher"/>
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Expert"/>
      </expression>
      <expression xsi:type="amn-exp:SetValue"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="=">
      <expression xsi:type="amn-exp:BinaryOperator" sign="/\">
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Teacher"/>
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Secretary"/>
      </expression>
      <expression xsi:type="amn-exp:SetValue"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="=">
      <expression xsi:type="amn-exp:BinaryOperator" sign="/\">
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Teacher"/>
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Submission"/>
      </expression>
      <expression xsi:type="amn-exp:SetValue"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="=">
      <expression xsi:type="amn-exp:BinaryOperator" sign="/\">
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Teacher"/>
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Evaluation"/>
      </expression>
      <expression xsi:type="amn-exp:SetValue"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="=">
      <expression xsi:type="amn-exp:BinaryOperator" sign="/\">
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Teacher"/>
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Employee"/>
      </expression>
      <expression xsi:type="amn-exp:SetValue"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="=">
      <expression xsi:type="amn-exp:BinaryOperator" sign="/\">
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Teacher"/>
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Specialist"/>
      </expression>
      <expression xsi:type="amn-exp:SetValue"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="=">
      <expression xsi:type="amn-exp:BinaryOperator" sign="/\">
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Teacher"/>
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Dispatcher"/>
      </expression>
      <expression xsi:type="amn-exp:SetValue"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="=">
      <expression xsi:type="amn-exp:BinaryOperator" sign="/\">
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Student"/>
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Proposal"/>
      </expression>
      <expression xsi:type="amn-exp:SetValue"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="=">
      <expression xsi:type="amn-exp:BinaryOperator" sign="/\">
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Student"/>
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Review"/>
      </expression>
      <expression xsi:type="amn-exp:SetValue"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="=">
      <expression xsi:type="amn-exp:BinaryOperator" sign="/\">
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Student"/>
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Person"/>
      </expression>
      <expression xsi:type="amn-exp:SetValue"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="=">
      <expression xsi:type="amn-exp:BinaryOperator" sign="/\">
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Student"/>
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Researcher"/>
      </expression>
      <expression xsi:type="amn-exp:SetValue"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="=">
      <expression xsi:type="amn-exp:BinaryOperator" sign="/\">
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Student"/>
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Expert"/>
      </expression>
      <expression xsi:type="amn-exp:SetValue"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="=">
      <expression xsi:type="amn-exp:BinaryOperator" sign="/\">
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Student"/>
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Secretary"/>
      </expression>
      <expression xsi:type="amn-exp:SetValue"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="=">
      <expression xsi:type="amn-exp:BinaryOperator" sign="/\">
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Student"/>
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Submission"/>
      </expression>
      <expression xsi:type="amn-exp:SetValue"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="=">
      <expression xsi:type="amn-exp:BinaryOperator" sign="/\">
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Student"/>
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Evaluation"/>
      </expression>
      <expression xsi:type="amn-exp:SetValue"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="=">
      <expression xsi:type="amn-exp:BinaryOperator" sign="/\">
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Student"/>
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Employee"/>
      </expression>
      <expression xsi:type="amn-exp:SetValue"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="=">
      <expression xsi:type="amn-exp:BinaryOperator" sign="/\">
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Student"/>
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Specialist"/>
      </expression>
      <expression xsi:type="amn-exp:SetValue"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="=">
      <expression xsi:type="amn-exp:BinaryOperator" sign="/\">
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Student"/>
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Dispatcher"/>
      </expression>
      <expression xsi:type="amn-exp:SetValue"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="=">
      <expression xsi:type="amn-exp:BinaryOperator" sign="/\">
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Proposal"/>
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Review"/>
      </expression>
      <expression xsi:type="amn-exp:SetValue"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="=">
      <expression xsi:type="amn-exp:BinaryOperator" sign="/\">
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Proposal"/>
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Person"/>
      </expression>
      <expression xsi:type="amn-exp:SetValue"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="=">
      <expression xsi:type="amn-exp:BinaryOperator" sign="/\">
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Proposal"/>
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Researcher"/>
      </expression>
      <expression xsi:type="amn-exp:SetValue"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="=">
      <expression xsi:type="amn-exp:BinaryOperator" sign="/\">
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Proposal"/>
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Expert"/>
      </expression>
      <expression xsi:type="amn-exp:SetValue"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="=">
      <expression xsi:type="amn-exp:BinaryOperator" sign="/\">
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Proposal"/>
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Secretary"/>
      </expression>
      <expression xsi:type="amn-exp:SetValue"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="=">
      <expression xsi:type="amn-exp:BinaryOperator" sign="/\">
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Proposal"/>
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Submission"/>
      </expression>
      <expression xsi:type="amn-exp:SetValue"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="=">
      <expression xsi:type="amn-exp:BinaryOperator" sign="/\">
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Proposal"/>
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Evaluation"/>
      </expression>
      <expression xsi:type="amn-exp:SetValue"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="=">
      <expression xsi:type="amn-exp:BinaryOperator" sign="/\">
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Proposal"/>
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Employee"/>
      </expression>
      <expression xsi:type="amn-exp:SetValue"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="=">
      <expression xsi:type="amn-exp:BinaryOperator" sign="/\">
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Proposal"/>
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Specialist"/>
      </expression>
      <expression xsi:type="amn-exp:SetValue"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="=">
      <expression xsi:type="amn-exp:BinaryOperator" sign="/\">
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Proposal"/>
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Dispatcher"/>
      </expression>
      <expression xsi:type="amn-exp:SetValue"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="=">
      <expression xsi:type="amn-exp:BinaryOperator" sign="/\">
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Review"/>
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Person"/>
      </expression>
      <expression xsi:type="amn-exp:SetValue"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="=">
      <expression xsi:type="amn-exp:BinaryOperator" sign="/\">
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Review"/>
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Researcher"/>
      </expression>
      <expression xsi:type="amn-exp:SetValue"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="=">
      <expression xsi:type="amn-exp:BinaryOperator" sign="/\">
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Review"/>
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Expert"/>
      </expression>
      <expression xsi:type="amn-exp:SetValue"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="=">
      <expression xsi:type="amn-exp:BinaryOperator" sign="/\">
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Review"/>
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Secretary"/>
      </expression>
      <expression xsi:type="amn-exp:SetValue"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="=">
      <expression xsi:type="amn-exp:BinaryOperator" sign="/\">
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Review"/>
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Submission"/>
      </expression>
      <expression xsi:type="amn-exp:SetValue"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="=">
      <expression xsi:type="amn-exp:BinaryOperator" sign="/\">
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Review"/>
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Evaluation"/>
      </expression>
      <expression xsi:type="amn-exp:SetValue"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="=">
      <expression xsi:type="amn-exp:BinaryOperator" sign="/\">
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Review"/>
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Employee"/>
      </expression>
      <expression xsi:type="amn-exp:SetValue"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="=">
      <expression xsi:type="amn-exp:BinaryOperator" sign="/\">
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Review"/>
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Specialist"/>
      </expression>
      <expression xsi:type="amn-exp:SetValue"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="=">
      <expression xsi:type="amn-exp:BinaryOperator" sign="/\">
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Review"/>
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Dispatcher"/>
      </expression>
      <expression xsi:type="amn-exp:SetValue"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="=">
      <expression xsi:type="amn-exp:BinaryOperator" sign="/\">
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Person"/>
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Researcher"/>
      </expression>
      <expression xsi:type="amn-exp:SetValue"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="=">
      <expression xsi:type="amn-exp:BinaryOperator" sign="/\">
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Person"/>
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Expert"/>
      </expression>
      <expression xsi:type="amn-exp:SetValue"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="=">
      <expression xsi:type="amn-exp:BinaryOperator" sign="/\">
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Person"/>
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Secretary"/>
      </expression>
      <expression xsi:type="amn-exp:SetValue"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="=">
      <expression xsi:type="amn-exp:BinaryOperator" sign="/\">
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Person"/>
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Submission"/>
      </expression>
      <expression xsi:type="amn-exp:SetValue"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="=">
      <expression xsi:type="amn-exp:BinaryOperator" sign="/\">
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Person"/>
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Evaluation"/>
      </expression>
      <expression xsi:type="amn-exp:SetValue"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="=">
      <expression xsi:type="amn-exp:BinaryOperator" sign="/\">
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Person"/>
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Employee"/>
      </expression>
      <expression xsi:type="amn-exp:SetValue"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="=">
      <expression xsi:type="amn-exp:BinaryOperator" sign="/\">
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Person"/>
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Specialist"/>
      </expression>
      <expression xsi:type="amn-exp:SetValue"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="=">
      <expression xsi:type="amn-exp:BinaryOperator" sign="/\">
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Person"/>
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Dispatcher"/>
      </expression>
      <expression xsi:type="amn-exp:SetValue"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="=">
      <expression xsi:type="amn-exp:BinaryOperator" sign="/\">
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Researcher"/>
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Expert"/>
      </expression>
      <expression xsi:type="amn-exp:SetValue"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="=">
      <expression xsi:type="amn-exp:BinaryOperator" sign="/\">
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Researcher"/>
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Secretary"/>
      </expression>
      <expression xsi:type="amn-exp:SetValue"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="=">
      <expression xsi:type="amn-exp:BinaryOperator" sign="/\">
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Researcher"/>
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Submission"/>
      </expression>
      <expression xsi:type="amn-exp:SetValue"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="=">
      <expression xsi:type="amn-exp:BinaryOperator" sign="/\">
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Researcher"/>
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Evaluation"/>
      </expression>
      <expression xsi:type="amn-exp:SetValue"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="=">
      <expression xsi:type="amn-exp:BinaryOperator" sign="/\">
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Researcher"/>
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Employee"/>
      </expression>
      <expression xsi:type="amn-exp:SetValue"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="=">
      <expression xsi:type="amn-exp:BinaryOperator" sign="/\">
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Researcher"/>
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Specialist"/>
      </expression>
      <expression xsi:type="amn-exp:SetValue"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="=">
      <expression xsi:type="amn-exp:BinaryOperator" sign="/\">
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Researcher"/>
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Dispatcher"/>
      </expression>
      <expression xsi:type="amn-exp:SetValue"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="=">
      <expression xsi:type="amn-exp:BinaryOperator" sign="/\">
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Expert"/>
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Secretary"/>
      </expression>
      <expression xsi:type="amn-exp:SetValue"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="=">
      <expression xsi:type="amn-exp:BinaryOperator" sign="/\">
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Expert"/>
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Submission"/>
      </expression>
      <expression xsi:type="amn-exp:SetValue"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="=">
      <expression xsi:type="amn-exp:BinaryOperator" sign="/\">
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Expert"/>
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Evaluation"/>
      </expression>
      <expression xsi:type="amn-exp:SetValue"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="=">
      <expression xsi:type="amn-exp:BinaryOperator" sign="/\">
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Expert"/>
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Employee"/>
      </expression>
      <expression xsi:type="amn-exp:SetValue"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="=">
      <expression xsi:type="amn-exp:BinaryOperator" sign="/\">
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Expert"/>
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Specialist"/>
      </expression>
      <expression xsi:type="amn-exp:SetValue"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="=">
      <expression xsi:type="amn-exp:BinaryOperator" sign="/\">
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Expert"/>
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Dispatcher"/>
      </expression>
      <expression xsi:type="amn-exp:SetValue"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="=">
      <expression xsi:type="amn-exp:BinaryOperator" sign="/\">
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Secretary"/>
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Submission"/>
      </expression>
      <expression xsi:type="amn-exp:SetValue"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="=">
      <expression xsi:type="amn-exp:BinaryOperator" sign="/\">
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Secretary"/>
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Evaluation"/>
      </expression>
      <expression xsi:type="amn-exp:SetValue"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="=">
      <expression xsi:type="amn-exp:BinaryOperator" sign="/\">
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Secretary"/>
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Employee"/>
      </expression>
      <expression xsi:type="amn-exp:SetValue"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="=">
      <expression xsi:type="amn-exp:BinaryOperator" sign="/\">
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Secretary"/>
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Specialist"/>
      </expression>
      <expression xsi:type="amn-exp:SetValue"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="=">
      <expression xsi:type="amn-exp:BinaryOperator" sign="/\">
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Secretary"/>
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Dispatcher"/>
      </expression>
      <expression xsi:type="amn-exp:SetValue"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="=">
      <expression xsi:type="amn-exp:BinaryOperator" sign="/\">
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Submission"/>
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Evaluation"/>
      </expression>
      <expression xsi:type="amn-exp:SetValue"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="=">
      <expression xsi:type="amn-exp:BinaryOperator" sign="/\">
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Submission"/>
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Employee"/>
      </expression>
      <expression xsi:type="amn-exp:SetValue"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="=">
      <expression xsi:type="amn-exp:BinaryOperator" sign="/\">
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Submission"/>
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Specialist"/>
      </expression>
      <expression xsi:type="amn-exp:SetValue"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="=">
      <expression xsi:type="amn-exp:BinaryOperator" sign="/\">
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Submission"/>
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Dispatcher"/>
      </expression>
      <expression xsi:type="amn-exp:SetValue"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="=">
      <expression xsi:type="amn-exp:BinaryOperator" sign="/\">
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Evaluation"/>
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Employee"/>
      </expression>
      <expression xsi:type="amn-exp:SetValue"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="=">
      <expression xsi:type="amn-exp:BinaryOperator" sign="/\">
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Evaluation"/>
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Specialist"/>
      </expression>
      <expression xsi:type="amn-exp:SetValue"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="=">
      <expression xsi:type="amn-exp:BinaryOperator" sign="/\">
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Evaluation"/>
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Dispatcher"/>
      </expression>
      <expression xsi:type="amn-exp:SetValue"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="=">
      <expression xsi:type="amn-exp:BinaryOperator" sign="/\">
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Employee"/>
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Specialist"/>
      </expression>
      <expression xsi:type="amn-exp:SetValue"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="=">
      <expression xsi:type="amn-exp:BinaryOperator" sign="/\">
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Employee"/>
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Dispatcher"/>
      </expression>
      <expression xsi:type="amn-exp:SetValue"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="=">
      <expression xsi:type="amn-exp:BinaryOperator" sign="/\">
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Specialist"/>
        <expression xsi:type="amn-exp:NamedConstant" name="extp_Dispatcher"/>
      </expression>
      <expression xsi:type="amn-exp:SetValue"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="&lt;&lt;:">
      <expression xsi:type="amn-exp:NamedConstant" name="ext_Teacher"/>
      <expression xsi:type="amn-exp:NamedConstant" name="ext_Specialist"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="&lt;&lt;:">
      <expression xsi:type="amn-exp:NamedConstant" name="ext_Researcher"/>
      <expression xsi:type="amn-exp:NamedConstant" name="ext_Person"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="&lt;&lt;:">
      <expression xsi:type="amn-exp:NamedConstant" name="ext_Expert"/>
      <expression xsi:type="amn-exp:NamedConstant" name="ext_Researcher"/>
    </properties>
    <properties xsi:type="amn-pred:AtomicPredicate" sign="&lt;&lt;:">
      <expression xsi:type="amn-exp:NamedConstant" name="ext_Specialist"/>
      <expression xsi:type="amn-exp:NamedConstant" name="ext_Employee"/>
    </properties>
    <abstractConstants>Obj</abstractConstants>
    <abstractConstants>self</abstractConstants>
    <abstractConstants>extp_Teacher</abstractConstants>
    <abstractConstants>ext_Teacher</abstractConstants>
    <abstractConstants>extp_Student</abstractConstants>
    <abstractConstants>ext_Student</abstractConstants>
    <abstractConstants>extp_Proposal</abstractConstants>
    <abstractConstants>ext_Proposal</abstractConstants>
    <abstractConstants>extp_Review</abstractConstants>
    <abstractConstants>ext_Review</abstractConstants>
    <abstractConstants>extp_Person</abstractConstants>
    <abstractConstants>ext_Person</abstractConstants>
    <abstractConstants>extp_Researcher</abstractConstants>
    <abstractConstants>ext_Researcher</abstractConstants>
    <abstractConstants>extp_Expert</abstractConstants>
    <abstractConstants>ext_Expert</abstractConstants>
    <abstractConstants>extp_Secretary</abstractConstants>
    <abstractConstants>ext_Secretary</abstractConstants>
    <abstractConstants>extp_Submission</abstractConstants>
    <abstractConstants>ext_Submission</abstractConstants>
    <abstractConstants>extp_Evaluation</abstractConstants>
    <abstractConstants>ext_Evaluation</abstractConstants>
    <abstractConstants>extp_Employee</abstractConstants>
    <abstractConstants>ext_Employee</abstractConstants>
    <abstractConstants>extp_Specialist</abstractConstants>
    <abstractConstants>ext_Specialist</abstractConstants>
    <abstractConstants>extp_Dispatcher</abstractConstants>
    <abstractConstants>ext_Dispatcher</abstractConstants>
  </amn:AbstractMachine>
  <amn:AbstractMachine name="Symmetric" sees="/2" includes="/27">
    <invariant xsi:type="amn-pred:UniversalPredicate">
      <predicate xsi:type="amn-pred:Implication">
        <predicate xsi:type="amn-pred:Conjunction">
          <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
            <expression xsi:type="amn-exp:Variable" name="s1"/>
            <expression xsi:type="amn-exp:NamedConstant" name="ext_Person"/>
          </predicate>
          <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
            <expression xsi:type="amn-exp:Variable" name="s2"/>
            <expression xsi:type="amn-exp:NamedConstant" name="ext_Person"/>
          </predicate>
        </predicate>
        <predicate xsi:type="amn-pred:Implication">
          <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
            <expression xsi:type="amn-exp:BinaryOperator" sign="|->">
              <expression xsi:type="amn-exp:Variable" name="s1"/>
              <expression xsi:type="amn-exp:Variable" name="s2"/>
            </expression>
            <expression xsi:type="amn-exp:Variable" name="av"/>
          </predicate>
          <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
            <expression xsi:type="amn-exp:BinaryOperator" sign="|->">
              <expression xsi:type="amn-exp:Variable" name="s2"/>
              <expression xsi:type="amn-exp:Variable" name="s1"/>
            </expression>
            <expression xsi:type="amn-exp:Variable" name="av"/>
          </predicate>
        </predicate>
      </predicate>
      <variable>s1</variable>
      <variable>s2</variable>
    </invariant>
    <initialization xsi:type="amn-subst:BecomesEqual">
      <leftExpression xsi:type="amn-exp:Variable" name="symmetric"/>
      <rightExpression xsi:type="amn-exp:SetValue"/>
    </initialization>
    <abstractVariables>symmetric</abstractVariables>
  </amn:AbstractMachine>
  <amn:AbstractMachine name="MSymmetric"/>
  <amn:Refinement name="SymmetricRef" sees="/2" refines="/4" includes="/27">
    <invariant xsi:type="amn-pred:UniversalPredicate">
      <predicate xsi:type="amn-pred:Implication">
        <predicate xsi:type="amn-pred:Conjunction">
          <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
            <expression xsi:type="amn-exp:Variable" name="s1"/>
            <expression xsi:type="amn-exp:NamedConstant" name="ext_Person"/>
          </predicate>
          <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
            <expression xsi:type="amn-exp:Variable" name="s2"/>
            <expression xsi:type="amn-exp:NamedConstant" name="ext_Person"/>
          </predicate>
        </predicate>
        <predicate xsi:type="amn-pred:Implication">
          <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
            <expression xsi:type="amn-exp:BinaryOperator" sign="|->">
              <expression xsi:type="amn-exp:Variable" name="s1"/>
              <expression xsi:type="amn-exp:Variable" name="s2"/>
            </expression>
            <expression xsi:type="amn-exp:Variable" name="av"/>
          </predicate>
          <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
            <expression xsi:type="amn-exp:BinaryOperator" sign="|->">
              <expression xsi:type="amn-exp:Variable" name="s2"/>
              <expression xsi:type="amn-exp:Variable" name="s1"/>
            </expression>
            <expression xsi:type="amn-exp:Variable" name="av"/>
          </predicate>
        </predicate>
      </predicate>
      <variable>s1</variable>
      <variable>s2</variable>
    </invariant>
    <initialization xsi:type="amn-subst:BecomesEqual">
      <leftExpression xsi:type="amn-exp:Variable" name="symmetric"/>
      <rightExpression xsi:type="amn-exp:SetValue"/>
    </initialization>
    <abstractVariables>symmetric</abstractVariables>
  </amn:Refinement>
  <amn-pred:AtomicPredicate sign=":">
    <expression xsi:type="amn-exp:NamedConstant" name="extp_Symmetric"/>
    <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
      <expression xsi:type="amn-exp:NamedConstant" name="Obj"/>
    </expression>
  </amn-pred:AtomicPredicate>
  <amn-pred:AtomicPredicate sign=":">
    <expression xsi:type="amn-exp:NamedConstant" name="ext_Symmetric"/>
    <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
      <expression xsi:type="amn-exp:NamedConstant" name="Obj"/>
    </expression>
  </amn-pred:AtomicPredicate>
  <amn-pred:AtomicPredicate sign="&lt;:">
    <expression xsi:type="amn-exp:NamedConstant" name="extp_Symmetric"/>
    <expression xsi:type="amn-exp:NamedConstant" name="ext_Symmetric"/>
  </amn-pred:AtomicPredicate>
  <amn:AbstractMachine name="Teaches" includes="/15">
    <invariant xsi:type="amn-pred:UniversalPredicate">
      <predicate xsi:type="amn-pred:Implication">
        <predicate xsi:type="amn-pred:Conjunction">
          <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
            <expression xsi:type="amn-exp:Variable" name="tt"/>
            <expression xsi:type="amn-exp:NamedConstant" name="ext_Teacher"/>
          </predicate>
        </predicate>
        <predicate xsi:type="amn-pred:Implication">
          <predicate xsi:type="amn-pred:AtomicPredicate" sign="/=">
            <expression xsi:type="amn-exp:FunctionalExpression" sign="degree">
              <expression xsi:type="amn-exp:Variable" name="tt"/>
            </expression>
            <expression xsi:type="amn-exp:Variable" name="PhD"/>
          </predicate>
          <predicate xsi:type="amn-pred:AtomicPredicate" sign="&lt;=">
            <expression xsi:type="amn-exp:FunctionalExpression" sign="card">
              <expression xsi:type="amn-exp:SetComprehension">
                <variable>ss</variable>
                <predicate xsi:type="amn-pred:Conjunction">
                  <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
                    <expression xsi:type="amn-exp:Variable" name="ss"/>
                    <expression xsi:type="amn-exp:NamedConstant" name="ext_Student"/>
                  </predicate>
                  <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
                    <expression xsi:type="amn-exp:BinaryOperator" sign="|->">
                      <expression xsi:type="amn-exp:Variable" name="tt"/>
                      <expression xsi:type="amn-exp:Variable" name="ss"/>
                    </expression>
                    <expression xsi:type="amn-exp:Variable" name="av"/>
                  </predicate>
                </predicate>
              </expression>
            </expression>
            <expression xsi:type="amn-exp:IntegerValue" value="5"/>
          </predicate>
        </predicate>
      </predicate>
      <variable>tt</variable>
    </invariant>
  </amn:AbstractMachine>
  <amn:AbstractMachine name="MTeaches"/>
  <amn:Refinement name="TeachesRef" refines="/10" includes="/15">
    <invariant xsi:type="amn-pred:UniversalPredicate">
      <predicate xsi:type="amn-pred:Implication">
        <predicate xsi:type="amn-pred:Conjunction">
          <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
            <expression xsi:type="amn-exp:Variable" name="tt"/>
            <expression xsi:type="amn-exp:NamedConstant" name="ext_Teacher"/>
          </predicate>
        </predicate>
        <predicate xsi:type="amn-pred:Implication">
          <predicate xsi:type="amn-pred:AtomicPredicate" sign="/=">
            <expression xsi:type="amn-exp:FunctionalExpression" sign="degree">
              <expression xsi:type="amn-exp:Variable" name="tt"/>
            </expression>
            <expression xsi:type="amn-exp:Variable" name="PhD"/>
          </predicate>
          <predicate xsi:type="amn-pred:AtomicPredicate" sign="&lt;=">
            <expression xsi:type="amn-exp:FunctionalExpression" sign="card">
              <expression xsi:type="amn-exp:SetComprehension">
                <variable>ss</variable>
                <predicate xsi:type="amn-pred:Conjunction">
                  <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
                    <expression xsi:type="amn-exp:Variable" name="ss"/>
                    <expression xsi:type="amn-exp:NamedConstant" name="ext_Student"/>
                  </predicate>
                  <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
                    <expression xsi:type="amn-exp:BinaryOperator" sign="|->">
                      <expression xsi:type="amn-exp:Variable" name="tt"/>
                      <expression xsi:type="amn-exp:Variable" name="ss"/>
                    </expression>
                    <expression xsi:type="amn-exp:Variable" name="av"/>
                  </predicate>
                </predicate>
              </expression>
            </expression>
            <expression xsi:type="amn-exp:IntegerValue" value="5"/>
          </predicate>
        </predicate>
      </predicate>
      <variable>tt</variable>
    </invariant>
  </amn:Refinement>
  <amn-pred:AtomicPredicate sign=":">
    <expression xsi:type="amn-exp:NamedConstant" name="extp_Teaches"/>
    <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
      <expression xsi:type="amn-exp:NamedConstant" name="Obj"/>
    </expression>
  </amn-pred:AtomicPredicate>
  <amn-pred:AtomicPredicate sign=":">
    <expression xsi:type="amn-exp:NamedConstant" name="ext_Teaches"/>
    <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
      <expression xsi:type="amn-exp:NamedConstant" name="Obj"/>
    </expression>
  </amn-pred:AtomicPredicate>
  <amn-pred:AtomicPredicate sign="&lt;:">
    <expression xsi:type="amn-exp:NamedConstant" name="extp_Teaches"/>
    <expression xsi:type="amn-exp:NamedConstant" name="ext_Teaches"/>
  </amn-pred:AtomicPredicate>
  <amn:AbstractMachine name="Teacher" sees="/2" extendsClause="/48" includes="/18 /27 /3 /21 /42">
    <invariant xsi:type="amn-pred:AtomicPredicate" sign=":">
      <expression xsi:type="amn-exp:Variable" name="teacher"/>
      <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
        <expression xsi:type="amn-exp:NamedConstant" name="ext_Teacher"/>
      </expression>
    </invariant>
    <invariant xsi:type="amn-pred:Conjunction">
      <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:Variable" name="teachesAM"/>
        <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
          <expression xsi:type="amn-exp:BinaryOperator" sign="&lt;->">
            <expression xsi:type="amn-exp:BinaryOperator" sign="\/">
              <expression xsi:type="amn-exp:NamedConstant" name="teacher"/>
              <expression xsi:type="amn-exp:NamedConstant" name="proposal"/>
            </expression>
            <expression xsi:type="amn-exp:BinaryOperator" sign="\/">
              <expression xsi:type="amn-exp:NamedConstant" name="student"/>
              <expression xsi:type="amn-exp:NamedConstant" name="evaluation"/>
            </expression>
          </expression>
        </expression>
      </predicate>
      <predicate xsi:type="amn-pred:AtomicPredicate" sign="=">
        <expression xsi:type="amn-exp:Variable" name="teachesAM"/>
        <expression xsi:type="amn-exp:SetComprehension">
          <variable>av</variable>
          <predicate xsi:type="amn-pred:Conjunction">
            <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
              <expression xsi:type="amn-exp:Variable" name="av"/>
              <expression xsi:type="amn-exp:BinaryOperator" sign="&lt;->">
                <expression xsi:type="amn-exp:BinaryOperator" sign="\/">
                  <expression xsi:type="amn-exp:NamedConstant" name="teacher"/>
                  <expression xsi:type="amn-exp:NamedConstant" name="proposal"/>
                </expression>
                <expression xsi:type="amn-exp:BinaryOperator" sign="\/">
                  <expression xsi:type="amn-exp:NamedConstant" name="student"/>
                  <expression xsi:type="amn-exp:NamedConstant" name="evaluation"/>
                </expression>
              </expression>
            </predicate>
            <predicate xsi:type="amn-pred:UniversalPredicate">
              <predicate xsi:type="amn-pred:Implication">
                <predicate xsi:type="amn-pred:Conjunction">
                  <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
                    <expression xsi:type="amn-exp:Variable" name="tt"/>
                    <expression xsi:type="amn-exp:NamedConstant" name="ext_Teacher"/>
                  </predicate>
                </predicate>
                <predicate xsi:type="amn-pred:Implication">
                  <predicate xsi:type="amn-pred:AtomicPredicate" sign="/=">
                    <expression xsi:type="amn-exp:FunctionalExpression" sign="degree">
                      <expression xsi:type="amn-exp:Variable" name="tt"/>
                    </expression>
                    <expression xsi:type="amn-exp:Variable" name="PhD"/>
                  </predicate>
                  <predicate xsi:type="amn-pred:AtomicPredicate" sign="&lt;=">
                    <expression xsi:type="amn-exp:FunctionalExpression" sign="card">
                      <expression xsi:type="amn-exp:SetComprehension">
                        <variable>ss</variable>
                        <predicate xsi:type="amn-pred:Conjunction">
                          <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
                            <expression xsi:type="amn-exp:Variable" name="ss"/>
                            <expression xsi:type="amn-exp:NamedConstant" name="ext_Student"/>
                          </predicate>
                          <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
                            <expression xsi:type="amn-exp:BinaryOperator" sign="|->">
                              <expression xsi:type="amn-exp:Variable" name="tt"/>
                              <expression xsi:type="amn-exp:Variable" name="ss"/>
                            </expression>
                            <expression xsi:type="amn-exp:Variable" name="av"/>
                          </predicate>
                        </predicate>
                      </expression>
                    </expression>
                    <expression xsi:type="amn-exp:IntegerValue" value="5"/>
                  </predicate>
                </predicate>
              </predicate>
              <variable>tt</variable>
            </predicate>
            <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
              <expression xsi:type="amn-exp:Variable" name="av"/>
              <expression xsi:type="amn-exp:NamedConstant" name="symmetric"/>
            </predicate>
            <predicate xsi:type="amn-pred:UniversalPredicate">
              <predicate xsi:type="amn-pred:Implication">
                <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
                  <expression xsi:type="amn-exp:Variable" name="rr"/>
                  <expression xsi:type="amn-exp:BinaryOperator" sign="\/">
                    <expression xsi:type="amn-exp:NamedConstant" name="student"/>
                    <expression xsi:type="amn-exp:NamedConstant" name="evaluation"/>
                  </expression>
                </predicate>
                <predicate xsi:type="amn-pred:Conjunction">
                  <predicate xsi:type="amn-pred:AtomicPredicate" sign=">=">
                    <expression xsi:type="amn-exp:FunctionalExpression" sign="card">
                      <expression xsi:type="amn-exp:SetComprehension">
                        <variable>dd</variable>
                        <predicate xsi:type="amn-pred:Conjunction">
                          <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
                            <expression xsi:type="amn-exp:Variable" name="dd"/>
                            <expression xsi:type="amn-exp:BinaryOperator" sign="\/">
                              <expression xsi:type="amn-exp:NamedConstant" name="teacher"/>
                              <expression xsi:type="amn-exp:NamedConstant" name="proposal"/>
                            </expression>
                          </predicate>
                          <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
                            <expression xsi:type="amn-exp:BinaryOperator" sign="|->">
                              <expression xsi:type="amn-exp:Variable" name="dd"/>
                              <expression xsi:type="amn-exp:Variable" name="rr"/>
                            </expression>
                            <expression xsi:type="amn-exp:Variable" name="av"/>
                          </predicate>
                        </predicate>
                      </expression>
                    </expression>
                    <expression xsi:type="amn-exp:IntegerValue" value="3"/>
                  </predicate>
                  <predicate xsi:type="amn-pred:AtomicPredicate" sign="&lt;=">
                    <expression xsi:type="amn-exp:FunctionalExpression" sign="card">
                      <expression xsi:type="amn-exp:SetComprehension">
                        <variable>dd</variable>
                        <predicate xsi:type="amn-pred:Conjunction">
                          <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
                            <expression xsi:type="amn-exp:Variable" name="dd"/>
                            <expression xsi:type="amn-exp:BinaryOperator" sign="\/">
                              <expression xsi:type="amn-exp:NamedConstant" name="teacher"/>
                              <expression xsi:type="amn-exp:NamedConstant" name="proposal"/>
                            </expression>
                          </predicate>
                          <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
                            <expression xsi:type="amn-exp:BinaryOperator" sign="|->">
                              <expression xsi:type="amn-exp:Variable" name="dd"/>
                              <expression xsi:type="amn-exp:Variable" name="rr"/>
                            </expression>
                            <expression xsi:type="amn-exp:Variable" name="av"/>
                          </predicate>
                        </predicate>
                      </expression>
                    </expression>
                    <expression xsi:type="amn-exp:IntegerValue" value="10"/>
                  </predicate>
                </predicate>
              </predicate>
              <variable>rr</variable>
            </predicate>
            <predicate xsi:type="amn-pred:UniversalPredicate">
              <predicate xsi:type="amn-pred:Implication">
                <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
                  <expression xsi:type="amn-exp:Variable" name="dd"/>
                  <expression xsi:type="amn-exp:BinaryOperator" sign="\/">
                    <expression xsi:type="amn-exp:NamedConstant" name="teacher"/>
                    <expression xsi:type="amn-exp:NamedConstant" name="proposal"/>
                  </expression>
                </predicate>
                <predicate xsi:type="amn-pred:Conjunction">
                  <predicate xsi:type="amn-pred:AtomicPredicate" sign=">=">
                    <expression xsi:type="amn-exp:FunctionalExpression" sign="card">
                      <expression xsi:type="amn-exp:SetComprehension">
                        <variable>rr</variable>
                        <predicate xsi:type="amn-pred:Conjunction">
                          <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
                            <expression xsi:type="amn-exp:Variable" name="rr"/>
                            <expression xsi:type="amn-exp:BinaryOperator" sign="\/">
                              <expression xsi:type="amn-exp:NamedConstant" name="student"/>
                              <expression xsi:type="amn-exp:NamedConstant" name="evaluation"/>
                            </expression>
                          </predicate>
                          <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
                            <expression xsi:type="amn-exp:BinaryOperator" sign="|->">
                              <expression xsi:type="amn-exp:Variable" name="dd"/>
                              <expression xsi:type="amn-exp:Variable" name="rr"/>
                            </expression>
                            <expression xsi:type="amn-exp:Variable" name="av"/>
                          </predicate>
                        </predicate>
                      </expression>
                    </expression>
                    <expression xsi:type="amn-exp:IntegerValue" value="1"/>
                  </predicate>
                  <predicate xsi:type="amn-pred:AtomicPredicate" sign="&lt;=">
                    <expression xsi:type="amn-exp:FunctionalExpression" sign="card">
                      <expression xsi:type="amn-exp:SetComprehension">
                        <variable>rr</variable>
                        <predicate xsi:type="amn-pred:Conjunction">
                          <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
                            <expression xsi:type="amn-exp:Variable" name="rr"/>
                            <expression xsi:type="amn-exp:BinaryOperator" sign="\/">
                              <expression xsi:type="amn-exp:NamedConstant" name="student"/>
                              <expression xsi:type="amn-exp:NamedConstant" name="evaluation"/>
                            </expression>
                          </predicate>
                          <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
                            <expression xsi:type="amn-exp:BinaryOperator" sign="|->">
                              <expression xsi:type="amn-exp:Variable" name="dd"/>
                              <expression xsi:type="amn-exp:Variable" name="rr"/>
                            </expression>
                            <expression xsi:type="amn-exp:Variable" name="av"/>
                          </predicate>
                        </predicate>
                      </expression>
                    </expression>
                    <expression xsi:type="amn-exp:IntegerValue" value="2"/>
                  </predicate>
                </predicate>
              </predicate>
              <variable>dd</variable>
            </predicate>
          </predicate>
        </expression>
      </predicate>
    </invariant>
    <invariant xsi:type="amn-pred:Conjunction">
      <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:NamedConstant" name="teaches"/>
        <expression xsi:type="amn-exp:BinaryOperator" sign="-->">
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Teacher"/>
          <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
            <expression xsi:type="amn-exp:NamedConstant" name="ext_Student"/>
          </expression>
        </expression>
      </predicate>
      <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:SetComprehension">
          <variable>pair</variable>
          <predicate xsi:type="amn-pred:Conjunction">
            <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
              <expression xsi:type="amn-exp:Variable" name="pair"/>
              <expression xsi:type="amn-exp:BinaryOperator" sign="*">
                <expression xsi:type="amn-exp:NamedConstant" name="ext_Teacher"/>
                <expression xsi:type="amn-exp:NamedConstant" name="ext_Student"/>
              </expression>
            </predicate>
            <predicate xsi:type="amn-pred:ExistentialPredicate">
              <predicate xsi:type="amn-pred:Conjunction">
                <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
                  <expression xsi:type="amn-exp:Variable" name="dd"/>
                  <expression xsi:type="amn-exp:NamedConstant" name="ext_Teacher"/>
                </predicate>
                <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
                  <expression xsi:type="amn-exp:Variable" name="rr"/>
                  <expression xsi:type="amn-exp:NamedConstant" name="ext_Student"/>
                </predicate>
                <predicate xsi:type="amn-pred:AtomicPredicate" sign="=">
                  <expression xsi:type="amn-exp:BinaryOperator" sign="|->">
                    <expression xsi:type="amn-exp:Variable" name="dd"/>
                    <expression xsi:type="amn-exp:Variable" name="rr"/>
                  </expression>
                  <expression xsi:type="amn-exp:Variable" name="pair"/>
                </predicate>
                <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
                  <expression xsi:type="amn-exp:Variable" name="rr"/>
                  <expression xsi:type="amn-exp:FunctionalExpression" sign="teaches">
                    <expression xsi:type="amn-exp:Variable" name="dd"/>
                  </expression>
                </predicate>
              </predicate>
              <variable>dd</variable>
              <variable>rr</variable>
            </predicate>
          </predicate>
        </expression>
        <expression xsi:type="amn-exp:Variable" name="teachesAM"/>
      </predicate>
    </invariant>
    <invariant xsi:type="amn-pred:UniversalPredicate">
      <predicate xsi:type="amn-pred:Implication">
        <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
          <expression xsi:type="amn-exp:Variable" name="av"/>
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Teacher"/>
        </predicate>
        <predicate xsi:type="amn-pred:AtomicPredicate" sign="&lt;=">
          <expression xsi:type="amn-exp:FunctionalExpression" sign="card">
            <expression xsi:type="amn-exp:FunctionalExpression" sign="teaches">
              <expression xsi:type="amn-exp:Variable" name="av"/>
            </expression>
          </expression>
          <expression xsi:type="amn-exp:IntegerValue" value="15"/>
        </predicate>
      </predicate>
      <variable>av</variable>
    </invariant>
    <invariant xsi:type="amn-pred:AtomicPredicate" sign="=">
      <expression xsi:type="amn-exp:SetComprehension">
        <variable>pair</variable>
        <predicate xsi:type="amn-pred:Conjunction">
          <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
            <expression xsi:type="amn-exp:Variable" name="pair"/>
            <expression xsi:type="amn-exp:BinaryOperator" sign="*">
              <expression xsi:type="amn-exp:NamedConstant" name="ext_Teacher"/>
              <expression xsi:type="amn-exp:NamedConstant" name="ext_Student"/>
            </expression>
          </predicate>
          <predicate xsi:type="amn-pred:ExistentialPredicate">
            <predicate xsi:type="amn-pred:Conjunction">
              <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
                <expression xsi:type="amn-exp:Variable" name="dd"/>
                <expression xsi:type="amn-exp:NamedConstant" name="ext_Teacher"/>
              </predicate>
              <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
                <expression xsi:type="amn-exp:Variable" name="rr"/>
                <expression xsi:type="amn-exp:NamedConstant" name="ext_Student"/>
              </predicate>
              <predicate xsi:type="amn-pred:AtomicPredicate" sign="=">
                <expression xsi:type="amn-exp:BinaryOperator" sign="|->">
                  <expression xsi:type="amn-exp:Variable" name="dd"/>
                  <expression xsi:type="amn-exp:Variable" name="rr"/>
                </expression>
                <expression xsi:type="amn-exp:Variable" name="pair"/>
              </predicate>
              <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
                <expression xsi:type="amn-exp:Variable" name="rr"/>
                <expression xsi:type="amn-exp:FunctionalExpression" sign="teaches">
                  <expression xsi:type="amn-exp:Variable" name="dd"/>
                </expression>
              </predicate>
            </predicate>
            <variable>dd</variable>
            <variable>rr</variable>
          </predicate>
        </predicate>
      </expression>
      <expression xsi:type="amn-exp:UnaryOperator" sign="~">
        <expression xsi:type="amn-exp:SetComprehension">
          <variable>pair</variable>
          <predicate xsi:type="amn-pred:Conjunction">
            <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
              <expression xsi:type="amn-exp:Variable" name="pair"/>
              <expression xsi:type="amn-exp:BinaryOperator" sign="*">
                <expression xsi:type="amn-exp:NamedConstant" name="ext_Student"/>
                <expression xsi:type="amn-exp:NamedConstant" name="ext_Teacher"/>
              </expression>
            </predicate>
            <predicate xsi:type="amn-pred:ExistentialPredicate">
              <predicate xsi:type="amn-pred:Conjunction">
                <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
                  <expression xsi:type="amn-exp:Variable" name="dd"/>
                  <expression xsi:type="amn-exp:NamedConstant" name="ext_Student"/>
                </predicate>
                <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
                  <expression xsi:type="amn-exp:Variable" name="rr"/>
                  <expression xsi:type="amn-exp:NamedConstant" name="ext_Teacher"/>
                </predicate>
                <predicate xsi:type="amn-pred:AtomicPredicate" sign="=">
                  <expression xsi:type="amn-exp:BinaryOperator" sign="|->">
                    <expression xsi:type="amn-exp:Variable" name="dd"/>
                    <expression xsi:type="amn-exp:Variable" name="rr"/>
                  </expression>
                  <expression xsi:type="amn-exp:Variable" name="pair"/>
                </predicate>
                <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
                  <expression xsi:type="amn-exp:Variable" name="rr"/>
                  <expression xsi:type="amn-exp:FunctionalExpression" sign="isTaughtBy">
                    <expression xsi:type="amn-exp:Variable" name="dd"/>
                  </expression>
                </predicate>
              </predicate>
              <variable>dd</variable>
              <variable>rr</variable>
            </predicate>
          </predicate>
        </expression>
      </expression>
    </invariant>
    <invariant xsi:type="amn-pred:AtomicPredicate" sign="&lt;:">
      <expression xsi:type="amn-exp:Variable" name="teacher"/>
      <expression xsi:type="amn-exp:Variable" name="person"/>
    </invariant>
    <initialization xsi:type="amn-subst:Any">
      <any>ateaches</any>
      <where xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:Variable" name="ateaches"/>
        <expression xsi:type="amn-exp:BinaryOperator" sign="-->">
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Teacher"/>
          <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
            <expression xsi:type="amn-exp:NamedConstant" name="ext_Student"/>
          </expression>
        </expression>
      </where>
      <thenPart xsi:type="amn-subst:BecomesEqual">
        <leftExpression xsi:type="amn-exp:Variable" name="teaches"/>
        <rightExpression xsi:type="amn-exp:Variable" name="ateaches"/>
      </thenPart>
    </initialization>
    <initialization xsi:type="amn-subst:BecomesEqual">
      <leftExpression xsi:type="amn-exp:Variable" name="teacher"/>
      <rightExpression xsi:type="amn-exp:SetValue"/>
    </initialization>
    <initialization xsi:type="amn-subst:BecomesEqual">
      <leftExpression xsi:type="amn-exp:Variable" name="teachesAM"/>
      <rightExpression xsi:type="amn-exp:SetValue"/>
    </initialization>
    <operations name="set_teaches">
      <substitution xsi:type="amn-subst:Precondition">
        <pre xsi:type="amn-pred:AtomicPredicate" sign=":">
          <expression xsi:type="amn-exp:Variable" name="sav"/>
          <expression xsi:type="amn-exp:BinaryOperator" sign="+->">
            <expression xsi:type="amn-exp:NamedConstant" name="ext_Teacher"/>
            <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
              <expression xsi:type="amn-exp:NamedConstant" name="ext_Student"/>
            </expression>
          </expression>
        </pre>
        <thenPart xsi:type="amn-subst:BecomesEqual">
          <leftExpression xsi:type="amn-exp:Variable" name="teaches"/>
          <rightExpression xsi:type="amn-exp:BinaryOperator" sign="&lt;+">
            <expression xsi:type="amn-exp:Variable" name="teaches"/>
            <expression xsi:type="amn-exp:Variable" name="sav"/>
          </rightExpression>
        </thenPart>
      </substitution>
      <inputParams>sav</inputParams>
    </operations>
    <abstractVariables>teaches</abstractVariables>
    <abstractVariables>teacher</abstractVariables>
    <abstractVariables>teachesAM</abstractVariables>
  </amn:AbstractMachine>
  <amn:AbstractMachine name="MTeacher" sees="/2"/>
  <amn:Refinement name="TeacherRef" sees="/2" extendsClause="/48" refines="/16" includes="/18 /27 /3 /21 /42">
    <invariant xsi:type="amn-pred:AtomicPredicate" sign=":">
      <expression xsi:type="amn-exp:Variable" name="teacher"/>
      <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
        <expression xsi:type="amn-exp:NamedConstant" name="ext_Teacher"/>
      </expression>
    </invariant>
    <invariant xsi:type="amn-pred:Conjunction">
      <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:Variable" name="teachesAM"/>
        <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
          <expression xsi:type="amn-exp:BinaryOperator" sign="&lt;->">
            <expression xsi:type="amn-exp:BinaryOperator" sign="\/">
              <expression xsi:type="amn-exp:NamedConstant" name="teacher"/>
              <expression xsi:type="amn-exp:NamedConstant" name="proposal"/>
            </expression>
            <expression xsi:type="amn-exp:BinaryOperator" sign="\/">
              <expression xsi:type="amn-exp:NamedConstant" name="student"/>
              <expression xsi:type="amn-exp:NamedConstant" name="evaluation"/>
            </expression>
          </expression>
        </expression>
      </predicate>
      <predicate xsi:type="amn-pred:AtomicPredicate" sign="=">
        <expression xsi:type="amn-exp:Variable" name="teachesAM"/>
        <expression xsi:type="amn-exp:SetComprehension">
          <variable>av</variable>
          <predicate xsi:type="amn-pred:Conjunction">
            <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
              <expression xsi:type="amn-exp:Variable" name="av"/>
              <expression xsi:type="amn-exp:BinaryOperator" sign="&lt;->">
                <expression xsi:type="amn-exp:BinaryOperator" sign="\/">
                  <expression xsi:type="amn-exp:NamedConstant" name="teacher"/>
                  <expression xsi:type="amn-exp:NamedConstant" name="proposal"/>
                </expression>
                <expression xsi:type="amn-exp:BinaryOperator" sign="\/">
                  <expression xsi:type="amn-exp:NamedConstant" name="student"/>
                  <expression xsi:type="amn-exp:NamedConstant" name="evaluation"/>
                </expression>
              </expression>
            </predicate>
            <predicate xsi:type="amn-pred:UniversalPredicate">
              <predicate xsi:type="amn-pred:Implication">
                <predicate xsi:type="amn-pred:Conjunction">
                  <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
                    <expression xsi:type="amn-exp:Variable" name="tt"/>
                    <expression xsi:type="amn-exp:NamedConstant" name="ext_Teacher"/>
                  </predicate>
                </predicate>
                <predicate xsi:type="amn-pred:Implication">
                  <predicate xsi:type="amn-pred:AtomicPredicate" sign="/=">
                    <expression xsi:type="amn-exp:FunctionalExpression" sign="degree">
                      <expression xsi:type="amn-exp:Variable" name="tt"/>
                    </expression>
                    <expression xsi:type="amn-exp:Variable" name="PhD"/>
                  </predicate>
                  <predicate xsi:type="amn-pred:AtomicPredicate" sign="&lt;=">
                    <expression xsi:type="amn-exp:FunctionalExpression" sign="card">
                      <expression xsi:type="amn-exp:SetComprehension">
                        <variable>ss</variable>
                        <predicate xsi:type="amn-pred:Conjunction">
                          <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
                            <expression xsi:type="amn-exp:Variable" name="ss"/>
                            <expression xsi:type="amn-exp:NamedConstant" name="ext_Student"/>
                          </predicate>
                          <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
                            <expression xsi:type="amn-exp:BinaryOperator" sign="|->">
                              <expression xsi:type="amn-exp:Variable" name="tt"/>
                              <expression xsi:type="amn-exp:Variable" name="ss"/>
                            </expression>
                            <expression xsi:type="amn-exp:Variable" name="av"/>
                          </predicate>
                        </predicate>
                      </expression>
                    </expression>
                    <expression xsi:type="amn-exp:IntegerValue" value="5"/>
                  </predicate>
                </predicate>
              </predicate>
              <variable>tt</variable>
            </predicate>
            <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
              <expression xsi:type="amn-exp:Variable" name="av"/>
              <expression xsi:type="amn-exp:NamedConstant" name="symmetric"/>
            </predicate>
            <predicate xsi:type="amn-pred:UniversalPredicate">
              <predicate xsi:type="amn-pred:Implication">
                <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
                  <expression xsi:type="amn-exp:Variable" name="rr"/>
                  <expression xsi:type="amn-exp:BinaryOperator" sign="\/">
                    <expression xsi:type="amn-exp:NamedConstant" name="student"/>
                    <expression xsi:type="amn-exp:NamedConstant" name="evaluation"/>
                  </expression>
                </predicate>
                <predicate xsi:type="amn-pred:Conjunction">
                  <predicate xsi:type="amn-pred:AtomicPredicate" sign=">=">
                    <expression xsi:type="amn-exp:FunctionalExpression" sign="card">
                      <expression xsi:type="amn-exp:SetComprehension">
                        <variable>dd</variable>
                        <predicate xsi:type="amn-pred:Conjunction">
                          <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
                            <expression xsi:type="amn-exp:Variable" name="dd"/>
                            <expression xsi:type="amn-exp:BinaryOperator" sign="\/">
                              <expression xsi:type="amn-exp:NamedConstant" name="teacher"/>
                              <expression xsi:type="amn-exp:NamedConstant" name="proposal"/>
                            </expression>
                          </predicate>
                          <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
                            <expression xsi:type="amn-exp:BinaryOperator" sign="|->">
                              <expression xsi:type="amn-exp:Variable" name="dd"/>
                              <expression xsi:type="amn-exp:Variable" name="rr"/>
                            </expression>
                            <expression xsi:type="amn-exp:Variable" name="av"/>
                          </predicate>
                        </predicate>
                      </expression>
                    </expression>
                    <expression xsi:type="amn-exp:IntegerValue" value="3"/>
                  </predicate>
                  <predicate xsi:type="amn-pred:AtomicPredicate" sign="&lt;=">
                    <expression xsi:type="amn-exp:FunctionalExpression" sign="card">
                      <expression xsi:type="amn-exp:SetComprehension">
                        <variable>dd</variable>
                        <predicate xsi:type="amn-pred:Conjunction">
                          <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
                            <expression xsi:type="amn-exp:Variable" name="dd"/>
                            <expression xsi:type="amn-exp:BinaryOperator" sign="\/">
                              <expression xsi:type="amn-exp:NamedConstant" name="teacher"/>
                              <expression xsi:type="amn-exp:NamedConstant" name="proposal"/>
                            </expression>
                          </predicate>
                          <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
                            <expression xsi:type="amn-exp:BinaryOperator" sign="|->">
                              <expression xsi:type="amn-exp:Variable" name="dd"/>
                              <expression xsi:type="amn-exp:Variable" name="rr"/>
                            </expression>
                            <expression xsi:type="amn-exp:Variable" name="av"/>
                          </predicate>
                        </predicate>
                      </expression>
                    </expression>
                    <expression xsi:type="amn-exp:IntegerValue" value="10"/>
                  </predicate>
                </predicate>
              </predicate>
              <variable>rr</variable>
            </predicate>
            <predicate xsi:type="amn-pred:UniversalPredicate">
              <predicate xsi:type="amn-pred:Implication">
                <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
                  <expression xsi:type="amn-exp:Variable" name="dd"/>
                  <expression xsi:type="amn-exp:BinaryOperator" sign="\/">
                    <expression xsi:type="amn-exp:NamedConstant" name="teacher"/>
                    <expression xsi:type="amn-exp:NamedConstant" name="proposal"/>
                  </expression>
                </predicate>
                <predicate xsi:type="amn-pred:Conjunction">
                  <predicate xsi:type="amn-pred:AtomicPredicate" sign=">=">
                    <expression xsi:type="amn-exp:FunctionalExpression" sign="card">
                      <expression xsi:type="amn-exp:SetComprehension">
                        <variable>rr</variable>
                        <predicate xsi:type="amn-pred:Conjunction">
                          <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
                            <expression xsi:type="amn-exp:Variable" name="rr"/>
                            <expression xsi:type="amn-exp:BinaryOperator" sign="\/">
                              <expression xsi:type="amn-exp:NamedConstant" name="student"/>
                              <expression xsi:type="amn-exp:NamedConstant" name="evaluation"/>
                            </expression>
                          </predicate>
                          <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
                            <expression xsi:type="amn-exp:BinaryOperator" sign="|->">
                              <expression xsi:type="amn-exp:Variable" name="dd"/>
                              <expression xsi:type="amn-exp:Variable" name="rr"/>
                            </expression>
                            <expression xsi:type="amn-exp:Variable" name="av"/>
                          </predicate>
                        </predicate>
                      </expression>
                    </expression>
                    <expression xsi:type="amn-exp:IntegerValue" value="1"/>
                  </predicate>
                  <predicate xsi:type="amn-pred:AtomicPredicate" sign="&lt;=">
                    <expression xsi:type="amn-exp:FunctionalExpression" sign="card">
                      <expression xsi:type="amn-exp:SetComprehension">
                        <variable>rr</variable>
                        <predicate xsi:type="amn-pred:Conjunction">
                          <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
                            <expression xsi:type="amn-exp:Variable" name="rr"/>
                            <expression xsi:type="amn-exp:BinaryOperator" sign="\/">
                              <expression xsi:type="amn-exp:NamedConstant" name="student"/>
                              <expression xsi:type="amn-exp:NamedConstant" name="evaluation"/>
                            </expression>
                          </predicate>
                          <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
                            <expression xsi:type="amn-exp:BinaryOperator" sign="|->">
                              <expression xsi:type="amn-exp:Variable" name="dd"/>
                              <expression xsi:type="amn-exp:Variable" name="rr"/>
                            </expression>
                            <expression xsi:type="amn-exp:Variable" name="av"/>
                          </predicate>
                        </predicate>
                      </expression>
                    </expression>
                    <expression xsi:type="amn-exp:IntegerValue" value="2"/>
                  </predicate>
                </predicate>
              </predicate>
              <variable>dd</variable>
            </predicate>
          </predicate>
        </expression>
      </predicate>
    </invariant>
    <invariant xsi:type="amn-pred:Conjunction">
      <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:NamedConstant" name="teaches"/>
        <expression xsi:type="amn-exp:BinaryOperator" sign="-->">
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Teacher"/>
          <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
            <expression xsi:type="amn-exp:NamedConstant" name="ext_Student"/>
          </expression>
        </expression>
      </predicate>
      <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:SetComprehension">
          <variable>pair</variable>
          <predicate xsi:type="amn-pred:Conjunction">
            <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
              <expression xsi:type="amn-exp:Variable" name="pair"/>
              <expression xsi:type="amn-exp:BinaryOperator" sign="*">
                <expression xsi:type="amn-exp:NamedConstant" name="ext_Teacher"/>
                <expression xsi:type="amn-exp:NamedConstant" name="ext_Student"/>
              </expression>
            </predicate>
            <predicate xsi:type="amn-pred:ExistentialPredicate">
              <predicate xsi:type="amn-pred:Conjunction">
                <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
                  <expression xsi:type="amn-exp:Variable" name="dd"/>
                  <expression xsi:type="amn-exp:NamedConstant" name="ext_Teacher"/>
                </predicate>
                <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
                  <expression xsi:type="amn-exp:Variable" name="rr"/>
                  <expression xsi:type="amn-exp:NamedConstant" name="ext_Student"/>
                </predicate>
                <predicate xsi:type="amn-pred:AtomicPredicate" sign="=">
                  <expression xsi:type="amn-exp:BinaryOperator" sign="|->">
                    <expression xsi:type="amn-exp:Variable" name="dd"/>
                    <expression xsi:type="amn-exp:Variable" name="rr"/>
                  </expression>
                  <expression xsi:type="amn-exp:Variable" name="pair"/>
                </predicate>
                <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
                  <expression xsi:type="amn-exp:Variable" name="rr"/>
                  <expression xsi:type="amn-exp:FunctionalExpression" sign="teaches">
                    <expression xsi:type="amn-exp:Variable" name="dd"/>
                  </expression>
                </predicate>
              </predicate>
              <variable>dd</variable>
              <variable>rr</variable>
            </predicate>
          </predicate>
        </expression>
        <expression xsi:type="amn-exp:Variable" name="teachesAM"/>
      </predicate>
    </invariant>
    <invariant xsi:type="amn-pred:UniversalPredicate">
      <predicate xsi:type="amn-pred:Implication">
        <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
          <expression xsi:type="amn-exp:Variable" name="av"/>
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Teacher"/>
        </predicate>
        <predicate xsi:type="amn-pred:AtomicPredicate" sign="&lt;=">
          <expression xsi:type="amn-exp:FunctionalExpression" sign="card">
            <expression xsi:type="amn-exp:FunctionalExpression" sign="teaches">
              <expression xsi:type="amn-exp:Variable" name="av"/>
            </expression>
          </expression>
          <expression xsi:type="amn-exp:IntegerValue" value="15"/>
        </predicate>
      </predicate>
      <variable>av</variable>
    </invariant>
    <invariant xsi:type="amn-pred:AtomicPredicate" sign="=">
      <expression xsi:type="amn-exp:SetComprehension">
        <variable>pair</variable>
        <predicate xsi:type="amn-pred:Conjunction">
          <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
            <expression xsi:type="amn-exp:Variable" name="pair"/>
            <expression xsi:type="amn-exp:BinaryOperator" sign="*">
              <expression xsi:type="amn-exp:NamedConstant" name="ext_Teacher"/>
              <expression xsi:type="amn-exp:NamedConstant" name="ext_Student"/>
            </expression>
          </predicate>
          <predicate xsi:type="amn-pred:ExistentialPredicate">
            <predicate xsi:type="amn-pred:Conjunction">
              <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
                <expression xsi:type="amn-exp:Variable" name="dd"/>
                <expression xsi:type="amn-exp:NamedConstant" name="ext_Teacher"/>
              </predicate>
              <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
                <expression xsi:type="amn-exp:Variable" name="rr"/>
                <expression xsi:type="amn-exp:NamedConstant" name="ext_Student"/>
              </predicate>
              <predicate xsi:type="amn-pred:AtomicPredicate" sign="=">
                <expression xsi:type="amn-exp:BinaryOperator" sign="|->">
                  <expression xsi:type="amn-exp:Variable" name="dd"/>
                  <expression xsi:type="amn-exp:Variable" name="rr"/>
                </expression>
                <expression xsi:type="amn-exp:Variable" name="pair"/>
              </predicate>
              <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
                <expression xsi:type="amn-exp:Variable" name="rr"/>
                <expression xsi:type="amn-exp:FunctionalExpression" sign="teaches">
                  <expression xsi:type="amn-exp:Variable" name="dd"/>
                </expression>
              </predicate>
            </predicate>
            <variable>dd</variable>
            <variable>rr</variable>
          </predicate>
        </predicate>
      </expression>
      <expression xsi:type="amn-exp:UnaryOperator" sign="~">
        <expression xsi:type="amn-exp:SetComprehension">
          <variable>pair</variable>
          <predicate xsi:type="amn-pred:Conjunction">
            <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
              <expression xsi:type="amn-exp:Variable" name="pair"/>
              <expression xsi:type="amn-exp:BinaryOperator" sign="*">
                <expression xsi:type="amn-exp:NamedConstant" name="ext_Student"/>
                <expression xsi:type="amn-exp:NamedConstant" name="ext_Teacher"/>
              </expression>
            </predicate>
            <predicate xsi:type="amn-pred:ExistentialPredicate">
              <predicate xsi:type="amn-pred:Conjunction">
                <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
                  <expression xsi:type="amn-exp:Variable" name="dd"/>
                  <expression xsi:type="amn-exp:NamedConstant" name="ext_Student"/>
                </predicate>
                <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
                  <expression xsi:type="amn-exp:Variable" name="rr"/>
                  <expression xsi:type="amn-exp:NamedConstant" name="ext_Teacher"/>
                </predicate>
                <predicate xsi:type="amn-pred:AtomicPredicate" sign="=">
                  <expression xsi:type="amn-exp:BinaryOperator" sign="|->">
                    <expression xsi:type="amn-exp:Variable" name="dd"/>
                    <expression xsi:type="amn-exp:Variable" name="rr"/>
                  </expression>
                  <expression xsi:type="amn-exp:Variable" name="pair"/>
                </predicate>
                <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
                  <expression xsi:type="amn-exp:Variable" name="rr"/>
                  <expression xsi:type="amn-exp:FunctionalExpression" sign="isTaughtBy">
                    <expression xsi:type="amn-exp:Variable" name="dd"/>
                  </expression>
                </predicate>
              </predicate>
              <variable>dd</variable>
              <variable>rr</variable>
            </predicate>
          </predicate>
        </expression>
      </expression>
    </invariant>
    <invariant xsi:type="amn-pred:AtomicPredicate" sign="&lt;:">
      <expression xsi:type="amn-exp:Variable" name="teacher"/>
      <expression xsi:type="amn-exp:Variable" name="person"/>
    </invariant>
    <initialization xsi:type="amn-subst:Any">
      <any>ateaches</any>
      <where xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:Variable" name="ateaches"/>
        <expression xsi:type="amn-exp:BinaryOperator" sign="-->">
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Teacher"/>
          <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
            <expression xsi:type="amn-exp:NamedConstant" name="ext_Student"/>
          </expression>
        </expression>
      </where>
      <thenPart xsi:type="amn-subst:BecomesEqual">
        <leftExpression xsi:type="amn-exp:Variable" name="teaches"/>
        <rightExpression xsi:type="amn-exp:Variable" name="ateaches"/>
      </thenPart>
    </initialization>
    <initialization xsi:type="amn-subst:BecomesEqual">
      <leftExpression xsi:type="amn-exp:Variable" name="teacher"/>
      <rightExpression xsi:type="amn-exp:SetValue"/>
    </initialization>
    <initialization xsi:type="amn-subst:BecomesEqual">
      <leftExpression xsi:type="amn-exp:Variable" name="teachesAM"/>
      <rightExpression xsi:type="amn-exp:SetValue"/>
    </initialization>
    <abstractVariables>teaches</abstractVariables>
    <abstractVariables>teacher</abstractVariables>
    <abstractVariables>teachesAM</abstractVariables>
  </amn:Refinement>
  <amn:AbstractMachine name="Student" sees="/2" includes="/27">
    <invariant xsi:type="amn-pred:AtomicPredicate" sign=":">
      <expression xsi:type="amn-exp:Variable" name="student"/>
      <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
        <expression xsi:type="amn-exp:NamedConstant" name="ext_Student"/>
      </expression>
    </invariant>
    <invariant xsi:type="amn-pred:Conjunction">
      <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:NamedConstant" name="isTaughtBy"/>
        <expression xsi:type="amn-exp:BinaryOperator" sign="-->">
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Student"/>
          <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
            <expression xsi:type="amn-exp:NamedConstant" name="ext_Teacher"/>
          </expression>
        </expression>
      </predicate>
    </invariant>
    <invariant xsi:type="amn-pred:Conjunction">
      <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:NamedConstant" name="grade"/>
        <expression xsi:type="amn-exp:BinaryOperator" sign="-->">
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Student"/>
          <expression xsi:type="amn-exp:NamedConstant" name="INTEGER"/>
        </expression>
      </predicate>
    </invariant>
    <invariant xsi:type="amn-pred:AtomicPredicate" sign="&lt;:">
      <expression xsi:type="amn-exp:Variable" name="student"/>
      <expression xsi:type="amn-exp:Variable" name="person"/>
    </invariant>
    <initialization xsi:type="amn-subst:Any">
      <any>aisTaughtBy</any>
      <where xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:Variable" name="aisTaughtBy"/>
        <expression xsi:type="amn-exp:BinaryOperator" sign="-->">
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Student"/>
          <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
            <expression xsi:type="amn-exp:NamedConstant" name="ext_Teacher"/>
          </expression>
        </expression>
      </where>
      <thenPart xsi:type="amn-subst:BecomesEqual">
        <leftExpression xsi:type="amn-exp:Variable" name="isTaughtBy"/>
        <rightExpression xsi:type="amn-exp:Variable" name="aisTaughtBy"/>
      </thenPart>
    </initialization>
    <initialization xsi:type="amn-subst:Any">
      <any>agrade</any>
      <where xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:Variable" name="agrade"/>
        <expression xsi:type="amn-exp:BinaryOperator" sign="-->">
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Student"/>
          <expression xsi:type="amn-exp:NamedConstant" name="INTEGER"/>
        </expression>
      </where>
      <where xsi:type="amn-pred:UniversalPredicate">
        <predicate xsi:type="amn-pred:Implication">
          <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
            <expression xsi:type="amn-exp:Variable" name="av"/>
            <expression xsi:type="amn-exp:NamedConstant" name="ext_Student"/>
          </predicate>
          <predicate xsi:type="amn-pred:AtomicPredicate" sign="=">
            <expression xsi:type="amn-exp:FunctionalExpression" sign="agrade">
              <expression xsi:type="amn-exp:Variable" name="av"/>
            </expression>
            <expression xsi:type="amn-exp:IntegerValue" value="1"/>
          </predicate>
        </predicate>
        <variable>av</variable>
      </where>
      <thenPart xsi:type="amn-subst:BecomesEqual">
        <leftExpression xsi:type="amn-exp:Variable" name="grade"/>
        <rightExpression xsi:type="amn-exp:Variable" name="agrade"/>
      </thenPart>
    </initialization>
    <initialization xsi:type="amn-subst:BecomesEqual">
      <leftExpression xsi:type="amn-exp:Variable" name="student"/>
      <rightExpression xsi:type="amn-exp:SetValue"/>
    </initialization>
    <operations name="set_isTaughtBy">
      <substitution xsi:type="amn-subst:Precondition">
        <pre xsi:type="amn-pred:AtomicPredicate" sign=":">
          <expression xsi:type="amn-exp:Variable" name="sav"/>
          <expression xsi:type="amn-exp:BinaryOperator" sign="+->">
            <expression xsi:type="amn-exp:NamedConstant" name="ext_Student"/>
            <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
              <expression xsi:type="amn-exp:NamedConstant" name="ext_Teacher"/>
            </expression>
          </expression>
        </pre>
        <thenPart xsi:type="amn-subst:BecomesEqual">
          <leftExpression xsi:type="amn-exp:Variable" name="isTaughtBy"/>
          <rightExpression xsi:type="amn-exp:BinaryOperator" sign="&lt;+">
            <expression xsi:type="amn-exp:Variable" name="isTaughtBy"/>
            <expression xsi:type="amn-exp:Variable" name="sav"/>
          </rightExpression>
        </thenPart>
      </substitution>
      <inputParams>sav</inputParams>
    </operations>
    <operations name="set_grade">
      <substitution xsi:type="amn-subst:Precondition">
        <pre xsi:type="amn-pred:AtomicPredicate" sign=":">
          <expression xsi:type="amn-exp:Variable" name="sav"/>
          <expression xsi:type="amn-exp:BinaryOperator" sign="+->">
            <expression xsi:type="amn-exp:NamedConstant" name="ext_Student"/>
            <expression xsi:type="amn-exp:NamedConstant" name="INTEGER"/>
          </expression>
        </pre>
        <thenPart xsi:type="amn-subst:BecomesEqual">
          <leftExpression xsi:type="amn-exp:Variable" name="grade"/>
          <rightExpression xsi:type="amn-exp:BinaryOperator" sign="&lt;+">
            <expression xsi:type="amn-exp:Variable" name="grade"/>
            <expression xsi:type="amn-exp:Variable" name="sav"/>
          </rightExpression>
        </thenPart>
      </substitution>
      <inputParams>sav</inputParams>
    </operations>
    <abstractVariables>isTaughtBy</abstractVariables>
    <abstractVariables>grade</abstractVariables>
    <abstractVariables>student</abstractVariables>
  </amn:AbstractMachine>
  <amn:AbstractMachine name="MStudent" sees="/2"/>
  <amn:Refinement name="StudentRef" sees="/2" refines="/19" includes="/27">
    <invariant xsi:type="amn-pred:AtomicPredicate" sign=":">
      <expression xsi:type="amn-exp:Variable" name="student"/>
      <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
        <expression xsi:type="amn-exp:NamedConstant" name="ext_Student"/>
      </expression>
    </invariant>
    <invariant xsi:type="amn-pred:Conjunction">
      <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:NamedConstant" name="isTaughtBy"/>
        <expression xsi:type="amn-exp:BinaryOperator" sign="-->">
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Student"/>
          <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
            <expression xsi:type="amn-exp:NamedConstant" name="ext_Teacher"/>
          </expression>
        </expression>
      </predicate>
    </invariant>
    <invariant xsi:type="amn-pred:Conjunction">
      <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:NamedConstant" name="grade"/>
        <expression xsi:type="amn-exp:BinaryOperator" sign="-->">
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Student"/>
          <expression xsi:type="amn-exp:NamedConstant" name="INTEGER"/>
        </expression>
      </predicate>
    </invariant>
    <invariant xsi:type="amn-pred:AtomicPredicate" sign="&lt;:">
      <expression xsi:type="amn-exp:Variable" name="student"/>
      <expression xsi:type="amn-exp:Variable" name="person"/>
    </invariant>
    <initialization xsi:type="amn-subst:Any">
      <any>aisTaughtBy</any>
      <where xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:Variable" name="aisTaughtBy"/>
        <expression xsi:type="amn-exp:BinaryOperator" sign="-->">
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Student"/>
          <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
            <expression xsi:type="amn-exp:NamedConstant" name="ext_Teacher"/>
          </expression>
        </expression>
      </where>
      <thenPart xsi:type="amn-subst:BecomesEqual">
        <leftExpression xsi:type="amn-exp:Variable" name="isTaughtBy"/>
        <rightExpression xsi:type="amn-exp:Variable" name="aisTaughtBy"/>
      </thenPart>
    </initialization>
    <initialization xsi:type="amn-subst:Any">
      <any>agrade</any>
      <where xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:Variable" name="agrade"/>
        <expression xsi:type="amn-exp:BinaryOperator" sign="-->">
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Student"/>
          <expression xsi:type="amn-exp:NamedConstant" name="INTEGER"/>
        </expression>
      </where>
      <where xsi:type="amn-pred:UniversalPredicate">
        <predicate xsi:type="amn-pred:Implication">
          <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
            <expression xsi:type="amn-exp:Variable" name="av"/>
            <expression xsi:type="amn-exp:NamedConstant" name="ext_Student"/>
          </predicate>
          <predicate xsi:type="amn-pred:AtomicPredicate" sign="=">
            <expression xsi:type="amn-exp:FunctionalExpression" sign="agrade">
              <expression xsi:type="amn-exp:Variable" name="av"/>
            </expression>
            <expression xsi:type="amn-exp:IntegerValue" value="1"/>
          </predicate>
        </predicate>
        <variable>av</variable>
      </where>
      <thenPart xsi:type="amn-subst:BecomesEqual">
        <leftExpression xsi:type="amn-exp:Variable" name="grade"/>
        <rightExpression xsi:type="amn-exp:Variable" name="agrade"/>
      </thenPart>
    </initialization>
    <initialization xsi:type="amn-subst:BecomesEqual">
      <leftExpression xsi:type="amn-exp:Variable" name="student"/>
      <rightExpression xsi:type="amn-exp:SetValue"/>
    </initialization>
    <abstractVariables>isTaughtBy</abstractVariables>
    <abstractVariables>grade</abstractVariables>
    <abstractVariables>student</abstractVariables>
  </amn:Refinement>
  <amn:AbstractMachine name="Proposal" sees="/2">
    <invariant xsi:type="amn-pred:AtomicPredicate" sign=":">
      <expression xsi:type="amn-exp:Variable" name="proposal"/>
      <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
        <expression xsi:type="amn-exp:NamedConstant" name="ext_Proposal"/>
      </expression>
    </invariant>
    <invariant xsi:type="amn-pred:Conjunction">
      <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:NamedConstant" name="area"/>
        <expression xsi:type="amn-exp:BinaryOperator" sign="-->">
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Proposal"/>
          <expression xsi:type="amn-exp:FunctionalExpression" sign="seq">
            <expression xsi:type="amn-exp:BinaryOperator" sign="..">
              <expression xsi:type="amn-exp:IntegerValue"/>
              <expression xsi:type="amn-exp:IntegerValue" value="255"/>
            </expression>
          </expression>
        </expression>
      </predicate>
    </invariant>
    <initialization xsi:type="amn-subst:Any">
      <any>aarea</any>
      <where xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:Variable" name="aarea"/>
        <expression xsi:type="amn-exp:BinaryOperator" sign="-->">
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Proposal"/>
          <expression xsi:type="amn-exp:FunctionalExpression" sign="seq">
            <expression xsi:type="amn-exp:BinaryOperator" sign="..">
              <expression xsi:type="amn-exp:IntegerValue"/>
              <expression xsi:type="amn-exp:IntegerValue" value="255"/>
            </expression>
          </expression>
        </expression>
      </where>
      <thenPart xsi:type="amn-subst:BecomesEqual">
        <leftExpression xsi:type="amn-exp:Variable" name="area"/>
        <rightExpression xsi:type="amn-exp:Variable" name="aarea"/>
      </thenPart>
    </initialization>
    <initialization xsi:type="amn-subst:BecomesEqual">
      <leftExpression xsi:type="amn-exp:Variable" name="proposal"/>
      <rightExpression xsi:type="amn-exp:SetValue"/>
    </initialization>
    <operations name="set_area">
      <substitution xsi:type="amn-subst:Precondition">
        <pre xsi:type="amn-pred:AtomicPredicate" sign=":">
          <expression xsi:type="amn-exp:Variable" name="sav"/>
          <expression xsi:type="amn-exp:BinaryOperator" sign="+->">
            <expression xsi:type="amn-exp:NamedConstant" name="ext_Proposal"/>
            <expression xsi:type="amn-exp:FunctionalExpression" sign="seq">
              <expression xsi:type="amn-exp:BinaryOperator" sign="..">
                <expression xsi:type="amn-exp:IntegerValue"/>
                <expression xsi:type="amn-exp:IntegerValue" value="255"/>
              </expression>
            </expression>
          </expression>
        </pre>
        <thenPart xsi:type="amn-subst:BecomesEqual">
          <leftExpression xsi:type="amn-exp:Variable" name="area"/>
          <rightExpression xsi:type="amn-exp:BinaryOperator" sign="&lt;+">
            <expression xsi:type="amn-exp:Variable" name="area"/>
            <expression xsi:type="amn-exp:Variable" name="sav"/>
          </rightExpression>
        </thenPart>
      </substitution>
      <inputParams>sav</inputParams>
    </operations>
    <abstractVariables>area</abstractVariables>
    <abstractVariables>proposal</abstractVariables>
  </amn:AbstractMachine>
  <amn:AbstractMachine name="MProposal" sees="/2"/>
  <amn:Refinement name="ProposalRef" sees="/2" refines="/22">
    <invariant xsi:type="amn-pred:AtomicPredicate" sign=":">
      <expression xsi:type="amn-exp:Variable" name="proposal"/>
      <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
        <expression xsi:type="amn-exp:NamedConstant" name="ext_Proposal"/>
      </expression>
    </invariant>
    <invariant xsi:type="amn-pred:Conjunction">
      <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:NamedConstant" name="area"/>
        <expression xsi:type="amn-exp:BinaryOperator" sign="-->">
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Proposal"/>
          <expression xsi:type="amn-exp:FunctionalExpression" sign="seq">
            <expression xsi:type="amn-exp:BinaryOperator" sign="..">
              <expression xsi:type="amn-exp:IntegerValue"/>
              <expression xsi:type="amn-exp:IntegerValue" value="255"/>
            </expression>
          </expression>
        </expression>
      </predicate>
    </invariant>
    <initialization xsi:type="amn-subst:Any">
      <any>aarea</any>
      <where xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:Variable" name="aarea"/>
        <expression xsi:type="amn-exp:BinaryOperator" sign="-->">
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Proposal"/>
          <expression xsi:type="amn-exp:FunctionalExpression" sign="seq">
            <expression xsi:type="amn-exp:BinaryOperator" sign="..">
              <expression xsi:type="amn-exp:IntegerValue"/>
              <expression xsi:type="amn-exp:IntegerValue" value="255"/>
            </expression>
          </expression>
        </expression>
      </where>
      <thenPart xsi:type="amn-subst:BecomesEqual">
        <leftExpression xsi:type="amn-exp:Variable" name="area"/>
        <rightExpression xsi:type="amn-exp:Variable" name="aarea"/>
      </thenPart>
    </initialization>
    <initialization xsi:type="amn-subst:BecomesEqual">
      <leftExpression xsi:type="amn-exp:Variable" name="proposal"/>
      <rightExpression xsi:type="amn-exp:SetValue"/>
    </initialization>
    <abstractVariables>area</abstractVariables>
    <abstractVariables>proposal</abstractVariables>
  </amn:Refinement>
  <amn:AbstractMachine name="Review" sees="/2">
    <invariant xsi:type="amn-pred:AtomicPredicate" sign=":">
      <expression xsi:type="amn-exp:Variable" name="review"/>
      <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
        <expression xsi:type="amn-exp:NamedConstant" name="ext_Review"/>
      </expression>
    </invariant>
    <invariant xsi:type="amn-pred:Conjunction">
      <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:NamedConstant" name="for_proposal"/>
        <expression xsi:type="amn-exp:BinaryOperator" sign="-->">
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Review"/>
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Proposal"/>
        </expression>
      </predicate>
    </invariant>
    <invariant xsi:type="amn-pred:Conjunction">
      <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:NamedConstant" name="by_expert"/>
        <expression xsi:type="amn-exp:BinaryOperator" sign="-->">
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Review"/>
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Expert"/>
        </expression>
      </predicate>
    </invariant>
    <initialization xsi:type="amn-subst:Any">
      <any>afor_proposal</any>
      <where xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:Variable" name="afor_proposal"/>
        <expression xsi:type="amn-exp:BinaryOperator" sign="-->">
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Review"/>
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Proposal"/>
        </expression>
      </where>
      <thenPart xsi:type="amn-subst:BecomesEqual">
        <leftExpression xsi:type="amn-exp:Variable" name="for_proposal"/>
        <rightExpression xsi:type="amn-exp:Variable" name="afor_proposal"/>
      </thenPart>
    </initialization>
    <initialization xsi:type="amn-subst:Any">
      <any>aby_expert</any>
      <where xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:Variable" name="aby_expert"/>
        <expression xsi:type="amn-exp:BinaryOperator" sign="-->">
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Review"/>
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Expert"/>
        </expression>
      </where>
      <thenPart xsi:type="amn-subst:BecomesEqual">
        <leftExpression xsi:type="amn-exp:Variable" name="by_expert"/>
        <rightExpression xsi:type="amn-exp:Variable" name="aby_expert"/>
      </thenPart>
    </initialization>
    <initialization xsi:type="amn-subst:BecomesEqual">
      <leftExpression xsi:type="amn-exp:Variable" name="review"/>
      <rightExpression xsi:type="amn-exp:SetValue"/>
    </initialization>
    <operations name="set_for_proposal">
      <substitution xsi:type="amn-subst:Precondition">
        <pre xsi:type="amn-pred:AtomicPredicate" sign=":">
          <expression xsi:type="amn-exp:Variable" name="sav"/>
          <expression xsi:type="amn-exp:BinaryOperator" sign="+->">
            <expression xsi:type="amn-exp:NamedConstant" name="ext_Review"/>
            <expression xsi:type="amn-exp:NamedConstant" name="ext_Proposal"/>
          </expression>
        </pre>
        <thenPart xsi:type="amn-subst:BecomesEqual">
          <leftExpression xsi:type="amn-exp:Variable" name="for_proposal"/>
          <rightExpression xsi:type="amn-exp:BinaryOperator" sign="&lt;+">
            <expression xsi:type="amn-exp:Variable" name="for_proposal"/>
            <expression xsi:type="amn-exp:Variable" name="sav"/>
          </rightExpression>
        </thenPart>
      </substitution>
      <inputParams>sav</inputParams>
    </operations>
    <operations name="set_by_expert">
      <substitution xsi:type="amn-subst:Precondition">
        <pre xsi:type="amn-pred:AtomicPredicate" sign=":">
          <expression xsi:type="amn-exp:Variable" name="sav"/>
          <expression xsi:type="amn-exp:BinaryOperator" sign="+->">
            <expression xsi:type="amn-exp:NamedConstant" name="ext_Review"/>
            <expression xsi:type="amn-exp:NamedConstant" name="ext_Expert"/>
          </expression>
        </pre>
        <thenPart xsi:type="amn-subst:BecomesEqual">
          <leftExpression xsi:type="amn-exp:Variable" name="by_expert"/>
          <rightExpression xsi:type="amn-exp:BinaryOperator" sign="&lt;+">
            <expression xsi:type="amn-exp:Variable" name="by_expert"/>
            <expression xsi:type="amn-exp:Variable" name="sav"/>
          </rightExpression>
        </thenPart>
      </substitution>
      <inputParams>sav</inputParams>
    </operations>
    <abstractVariables>for_proposal</abstractVariables>
    <abstractVariables>by_expert</abstractVariables>
    <abstractVariables>review</abstractVariables>
  </amn:AbstractMachine>
  <amn:AbstractMachine name="MReview" sees="/2"/>
  <amn:Refinement name="ReviewRef" sees="/2" refines="/25">
    <invariant xsi:type="amn-pred:AtomicPredicate" sign=":">
      <expression xsi:type="amn-exp:Variable" name="review"/>
      <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
        <expression xsi:type="amn-exp:NamedConstant" name="ext_Review"/>
      </expression>
    </invariant>
    <invariant xsi:type="amn-pred:Conjunction">
      <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:NamedConstant" name="for_proposal"/>
        <expression xsi:type="amn-exp:BinaryOperator" sign="-->">
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Review"/>
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Proposal"/>
        </expression>
      </predicate>
    </invariant>
    <invariant xsi:type="amn-pred:Conjunction">
      <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:NamedConstant" name="by_expert"/>
        <expression xsi:type="amn-exp:BinaryOperator" sign="-->">
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Review"/>
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Expert"/>
        </expression>
      </predicate>
    </invariant>
    <initialization xsi:type="amn-subst:Any">
      <any>afor_proposal</any>
      <where xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:Variable" name="afor_proposal"/>
        <expression xsi:type="amn-exp:BinaryOperator" sign="-->">
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Review"/>
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Proposal"/>
        </expression>
      </where>
      <thenPart xsi:type="amn-subst:BecomesEqual">
        <leftExpression xsi:type="amn-exp:Variable" name="for_proposal"/>
        <rightExpression xsi:type="amn-exp:Variable" name="afor_proposal"/>
      </thenPart>
    </initialization>
    <initialization xsi:type="amn-subst:Any">
      <any>aby_expert</any>
      <where xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:Variable" name="aby_expert"/>
        <expression xsi:type="amn-exp:BinaryOperator" sign="-->">
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Review"/>
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Expert"/>
        </expression>
      </where>
      <thenPart xsi:type="amn-subst:BecomesEqual">
        <leftExpression xsi:type="amn-exp:Variable" name="by_expert"/>
        <rightExpression xsi:type="amn-exp:Variable" name="aby_expert"/>
      </thenPart>
    </initialization>
    <initialization xsi:type="amn-subst:BecomesEqual">
      <leftExpression xsi:type="amn-exp:Variable" name="review"/>
      <rightExpression xsi:type="amn-exp:SetValue"/>
    </initialization>
    <abstractVariables>for_proposal</abstractVariables>
    <abstractVariables>by_expert</abstractVariables>
    <abstractVariables>review</abstractVariables>
  </amn:Refinement>
  <amn:AbstractMachine name="Person" sees="/2">
    <invariant xsi:type="amn-pred:AtomicPredicate" sign=":">
      <expression xsi:type="amn-exp:Variable" name="person"/>
      <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
        <expression xsi:type="amn-exp:NamedConstant" name="ext_Person"/>
      </expression>
    </invariant>
    <invariant xsi:type="amn-pred:Conjunction">
      <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:NamedConstant" name="name"/>
        <expression xsi:type="amn-exp:BinaryOperator" sign="-->">
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Person"/>
          <expression xsi:type="amn-exp:FunctionalExpression" sign="seq">
            <expression xsi:type="amn-exp:BinaryOperator" sign="..">
              <expression xsi:type="amn-exp:IntegerValue"/>
              <expression xsi:type="amn-exp:IntegerValue" value="255"/>
            </expression>
          </expression>
        </expression>
      </predicate>
    </invariant>
    <initialization xsi:type="amn-subst:Any">
      <any>aname</any>
      <where xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:Variable" name="aname"/>
        <expression xsi:type="amn-exp:BinaryOperator" sign="-->">
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Person"/>
          <expression xsi:type="amn-exp:FunctionalExpression" sign="seq">
            <expression xsi:type="amn-exp:BinaryOperator" sign="..">
              <expression xsi:type="amn-exp:IntegerValue"/>
              <expression xsi:type="amn-exp:IntegerValue" value="255"/>
            </expression>
          </expression>
        </expression>
      </where>
      <thenPart xsi:type="amn-subst:BecomesEqual">
        <leftExpression xsi:type="amn-exp:Variable" name="name"/>
        <rightExpression xsi:type="amn-exp:Variable" name="aname"/>
      </thenPart>
    </initialization>
    <initialization xsi:type="amn-subst:BecomesEqual">
      <leftExpression xsi:type="amn-exp:Variable" name="person"/>
      <rightExpression xsi:type="amn-exp:SetValue"/>
    </initialization>
    <operations name="set_name">
      <substitution xsi:type="amn-subst:Precondition">
        <pre xsi:type="amn-pred:AtomicPredicate" sign=":">
          <expression xsi:type="amn-exp:Variable" name="sav"/>
          <expression xsi:type="amn-exp:BinaryOperator" sign="+->">
            <expression xsi:type="amn-exp:NamedConstant" name="ext_Person"/>
            <expression xsi:type="amn-exp:FunctionalExpression" sign="seq">
              <expression xsi:type="amn-exp:BinaryOperator" sign="..">
                <expression xsi:type="amn-exp:IntegerValue"/>
                <expression xsi:type="amn-exp:IntegerValue" value="255"/>
              </expression>
            </expression>
          </expression>
        </pre>
        <thenPart xsi:type="amn-subst:BecomesEqual">
          <leftExpression xsi:type="amn-exp:Variable" name="name"/>
          <rightExpression xsi:type="amn-exp:BinaryOperator" sign="&lt;+">
            <expression xsi:type="amn-exp:Variable" name="name"/>
            <expression xsi:type="amn-exp:Variable" name="sav"/>
          </rightExpression>
        </thenPart>
      </substitution>
      <inputParams>sav</inputParams>
    </operations>
    <abstractVariables>name</abstractVariables>
    <abstractVariables>person</abstractVariables>
  </amn:AbstractMachine>
  <amn:AbstractMachine name="MPerson" sees="/2"/>
  <amn:Refinement name="PersonRef" sees="/2" refines="/28">
    <invariant xsi:type="amn-pred:AtomicPredicate" sign=":">
      <expression xsi:type="amn-exp:Variable" name="person"/>
      <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
        <expression xsi:type="amn-exp:NamedConstant" name="ext_Person"/>
      </expression>
    </invariant>
    <invariant xsi:type="amn-pred:Conjunction">
      <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:NamedConstant" name="name"/>
        <expression xsi:type="amn-exp:BinaryOperator" sign="-->">
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Person"/>
          <expression xsi:type="amn-exp:FunctionalExpression" sign="seq">
            <expression xsi:type="amn-exp:BinaryOperator" sign="..">
              <expression xsi:type="amn-exp:IntegerValue"/>
              <expression xsi:type="amn-exp:IntegerValue" value="255"/>
            </expression>
          </expression>
        </expression>
      </predicate>
    </invariant>
    <initialization xsi:type="amn-subst:Any">
      <any>aname</any>
      <where xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:Variable" name="aname"/>
        <expression xsi:type="amn-exp:BinaryOperator" sign="-->">
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Person"/>
          <expression xsi:type="amn-exp:FunctionalExpression" sign="seq">
            <expression xsi:type="amn-exp:BinaryOperator" sign="..">
              <expression xsi:type="amn-exp:IntegerValue"/>
              <expression xsi:type="amn-exp:IntegerValue" value="255"/>
            </expression>
          </expression>
        </expression>
      </where>
      <thenPart xsi:type="amn-subst:BecomesEqual">
        <leftExpression xsi:type="amn-exp:Variable" name="name"/>
        <rightExpression xsi:type="amn-exp:Variable" name="aname"/>
      </thenPart>
    </initialization>
    <initialization xsi:type="amn-subst:BecomesEqual">
      <leftExpression xsi:type="amn-exp:Variable" name="person"/>
      <rightExpression xsi:type="amn-exp:SetValue"/>
    </initialization>
    <abstractVariables>name</abstractVariables>
    <abstractVariables>person</abstractVariables>
  </amn:Refinement>
  <amn:AbstractMachine name="Researcher" sees="/2" extendsClause="/27">
    <invariant xsi:type="amn-pred:AtomicPredicate" sign=":">
      <expression xsi:type="amn-exp:Variable" name="researcher"/>
      <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
        <expression xsi:type="amn-exp:NamedConstant" name="ext_Researcher"/>
      </expression>
    </invariant>
    <invariant xsi:type="amn-pred:Conjunction">
      <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:NamedConstant" name="research_area"/>
        <expression xsi:type="amn-exp:BinaryOperator" sign="-->">
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Researcher"/>
          <expression xsi:type="amn-exp:NamedConstant" name="Researcher_research_area_Enum"/>
        </expression>
      </predicate>
    </invariant>
    <invariant xsi:type="amn-pred:AtomicPredicate" sign="&lt;:">
      <expression xsi:type="amn-exp:Variable" name="researcher"/>
      <expression xsi:type="amn-exp:Variable" name="person"/>
    </invariant>
    <initialization xsi:type="amn-subst:Any">
      <any>aresearch_area</any>
      <where xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:Variable" name="aresearch_area"/>
        <expression xsi:type="amn-exp:BinaryOperator" sign="-->">
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Researcher"/>
          <expression xsi:type="amn-exp:NamedConstant" name="Researcher_research_area_Enum"/>
        </expression>
      </where>
      <where xsi:type="amn-pred:UniversalPredicate">
        <predicate xsi:type="amn-pred:Implication">
          <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
            <expression xsi:type="amn-exp:Variable" name="av"/>
            <expression xsi:type="amn-exp:NamedConstant" name="ext_Researcher"/>
          </predicate>
          <predicate xsi:type="amn-pred:AtomicPredicate" sign="=">
            <expression xsi:type="amn-exp:FunctionalExpression" sign="aresearch_area">
              <expression xsi:type="amn-exp:Variable" name="av"/>
            </expression>
            <expression xsi:type="amn-exp:Variable" name="biology"/>
          </predicate>
        </predicate>
        <variable>av</variable>
      </where>
      <thenPart xsi:type="amn-subst:BecomesEqual">
        <leftExpression xsi:type="amn-exp:Variable" name="research_area"/>
        <rightExpression xsi:type="amn-exp:Variable" name="aresearch_area"/>
      </thenPart>
    </initialization>
    <initialization xsi:type="amn-subst:BecomesEqual">
      <leftExpression xsi:type="amn-exp:Variable" name="researcher"/>
      <rightExpression xsi:type="amn-exp:SetValue"/>
    </initialization>
    <operations name="set_research_area">
      <substitution xsi:type="amn-subst:Precondition">
        <pre xsi:type="amn-pred:AtomicPredicate" sign=":">
          <expression xsi:type="amn-exp:Variable" name="sav"/>
          <expression xsi:type="amn-exp:BinaryOperator" sign="+->">
            <expression xsi:type="amn-exp:NamedConstant" name="ext_Researcher"/>
            <expression xsi:type="amn-exp:NamedConstant" name="Researcher_research_area_Enum"/>
          </expression>
        </pre>
        <thenPart xsi:type="amn-subst:BecomesEqual">
          <leftExpression xsi:type="amn-exp:Variable" name="research_area"/>
          <rightExpression xsi:type="amn-exp:BinaryOperator" sign="&lt;+">
            <expression xsi:type="amn-exp:Variable" name="research_area"/>
            <expression xsi:type="amn-exp:Variable" name="sav"/>
          </rightExpression>
        </thenPart>
      </substitution>
      <inputParams>sav</inputParams>
    </operations>
    <abstractVariables>research_area</abstractVariables>
    <abstractVariables>researcher</abstractVariables>
  </amn:AbstractMachine>
  <amn:AbstractMachine name="MResearcher" sees="/2">
    <operations name="ee">
      <substitution xsi:type="amn-subst:Precondition">
        <pre xsi:type="amn-pred:AtomicPredicate" sign=":">
          <expression xsi:type="amn-exp:Variable" name="av"/>
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Researcher"/>
        </pre>
        <pre xsi:type="amn-pred:AtomicPredicate" sign=":">
          <expression xsi:type="amn-exp:Variable" name="ii"/>
          <expression xsi:type="amn-exp:NamedConstant" name="INTEGER"/>
        </pre>
        <pre xsi:type="amn-pred:AtomicPredicate" sign=":">
          <expression xsi:type="amn-exp:Variable" name="bb"/>
          <expression xsi:type="amn-exp:NamedConstant" name="BOOL"/>
        </pre>
        <pre xsi:type="amn-pred:AtomicPredicate" sign=":">
          <expression xsi:type="amn-exp:Variable" name="pp"/>
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Person"/>
        </pre>
        <pre xsi:type="amn-pred:AtomicPredicate" sign=":">
          <expression xsi:type="amn-exp:Variable" name="st"/>
          <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
            <expression xsi:type="amn-exp:NamedConstant" name="ext_Person"/>
          </expression>
        </pre>
        <thenPart xsi:type="amn-subst:Any">
          <any>ss1</any>
          <where xsi:type="amn-pred:Conjunction">
            <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
              <expression xsi:type="amn-exp:Variable" name="ss1"/>
              <expression xsi:type="amn-exp:FunctionalExpression" sign="seq">
                <expression xsi:type="amn-exp:BinaryOperator" sign="..">
                  <expression xsi:type="amn-exp:IntegerValue"/>
                  <expression xsi:type="amn-exp:IntegerValue" value="255"/>
                </expression>
              </expression>
            </predicate>
          </where>
          <thenPart xsi:type="amn-subst:Simultaneous">
            <substitution xsi:type="amn-subst:BecomesEqual">
              <leftExpression xsi:type="amn-exp:Variable" name="ss"/>
              <rightExpression xsi:type="amn-exp:Variable" name="ss1"/>
            </substitution>
          </thenPart>
        </thenPart>
      </substitution>
      <inputParams>av</inputParams>
      <inputParams>ii</inputParams>
      <inputParams>bb</inputParams>
      <inputParams>pp</inputParams>
      <inputParams>st</inputParams>
      <outputParams>ss</outputParams>
    </operations>
  </amn:AbstractMachine>
  <amn:Refinement name="ResearcherRef" sees="/2" extendsClause="/27" refines="/31">
    <invariant xsi:type="amn-pred:AtomicPredicate" sign=":">
      <expression xsi:type="amn-exp:Variable" name="researcher"/>
      <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
        <expression xsi:type="amn-exp:NamedConstant" name="ext_Researcher"/>
      </expression>
    </invariant>
    <invariant xsi:type="amn-pred:Conjunction">
      <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:NamedConstant" name="research_area"/>
        <expression xsi:type="amn-exp:BinaryOperator" sign="-->">
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Researcher"/>
          <expression xsi:type="amn-exp:NamedConstant" name="Researcher_research_area_Enum"/>
        </expression>
      </predicate>
    </invariant>
    <invariant xsi:type="amn-pred:AtomicPredicate" sign="&lt;:">
      <expression xsi:type="amn-exp:Variable" name="researcher"/>
      <expression xsi:type="amn-exp:Variable" name="person"/>
    </invariant>
    <initialization xsi:type="amn-subst:Any">
      <any>aresearch_area</any>
      <where xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:Variable" name="aresearch_area"/>
        <expression xsi:type="amn-exp:BinaryOperator" sign="-->">
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Researcher"/>
          <expression xsi:type="amn-exp:NamedConstant" name="Researcher_research_area_Enum"/>
        </expression>
      </where>
      <where xsi:type="amn-pred:UniversalPredicate">
        <predicate xsi:type="amn-pred:Implication">
          <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
            <expression xsi:type="amn-exp:Variable" name="av"/>
            <expression xsi:type="amn-exp:NamedConstant" name="ext_Researcher"/>
          </predicate>
          <predicate xsi:type="amn-pred:AtomicPredicate" sign="=">
            <expression xsi:type="amn-exp:FunctionalExpression" sign="aresearch_area">
              <expression xsi:type="amn-exp:Variable" name="av"/>
            </expression>
            <expression xsi:type="amn-exp:Variable" name="biology"/>
          </predicate>
        </predicate>
        <variable>av</variable>
      </where>
      <thenPart xsi:type="amn-subst:BecomesEqual">
        <leftExpression xsi:type="amn-exp:Variable" name="research_area"/>
        <rightExpression xsi:type="amn-exp:Variable" name="aresearch_area"/>
      </thenPart>
    </initialization>
    <initialization xsi:type="amn-subst:BecomesEqual">
      <leftExpression xsi:type="amn-exp:Variable" name="researcher"/>
      <rightExpression xsi:type="amn-exp:SetValue"/>
    </initialization>
    <operations name="ee">
      <substitution xsi:type="amn-subst:Precondition">
        <pre xsi:type="amn-pred:AtomicPredicate" sign=":">
          <expression xsi:type="amn-exp:Variable" name="av"/>
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Researcher"/>
        </pre>
        <pre xsi:type="amn-pred:AtomicPredicate" sign=":">
          <expression xsi:type="amn-exp:Variable" name="ii"/>
          <expression xsi:type="amn-exp:NamedConstant" name="INTEGER"/>
        </pre>
        <pre xsi:type="amn-pred:AtomicPredicate" sign=":">
          <expression xsi:type="amn-exp:Variable" name="bb"/>
          <expression xsi:type="amn-exp:NamedConstant" name="BOOL"/>
        </pre>
        <pre xsi:type="amn-pred:AtomicPredicate" sign=":">
          <expression xsi:type="amn-exp:Variable" name="pp"/>
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Person"/>
        </pre>
        <pre xsi:type="amn-pred:AtomicPredicate" sign=":">
          <expression xsi:type="amn-exp:Variable" name="st"/>
          <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
            <expression xsi:type="amn-exp:NamedConstant" name="ext_Person"/>
          </expression>
        </pre>
        <thenPart xsi:type="amn-subst:Any">
          <any>ss1</any>
          <where xsi:type="amn-pred:Conjunction">
            <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
              <expression xsi:type="amn-exp:Variable" name="ss1"/>
              <expression xsi:type="amn-exp:FunctionalExpression" sign="seq">
                <expression xsi:type="amn-exp:BinaryOperator" sign="..">
                  <expression xsi:type="amn-exp:IntegerValue"/>
                  <expression xsi:type="amn-exp:IntegerValue" value="255"/>
                </expression>
              </expression>
            </predicate>
            <predicate xsi:type="amn-pred:Conjunction">
              <predicate xsi:type="amn-pred:AtomicPredicate" sign="=">
                <expression xsi:type="amn-exp:IntegerValue" value="1"/>
                <expression xsi:type="amn-exp:IntegerValue" value="2"/>
              </predicate>
              <predicate xsi:type="amn-pred:UniversalPredicate">
                <predicate xsi:type="amn-pred:Implication">
                  <predicate xsi:type="amn-pred:Conjunction">
                    <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
                      <expression xsi:type="amn-exp:Variable" name="xx"/>
                      <expression xsi:type="amn-exp:NamedConstant" name="ext_Researcher"/>
                    </predicate>
                    <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
                      <expression xsi:type="amn-exp:Variable" name="yy"/>
                      <expression xsi:type="amn-exp:NamedConstant" name="ext_Researcher"/>
                    </predicate>
                  </predicate>
                  <predicate xsi:type="amn-pred:AtomicPredicate" sign="=">
                    <expression xsi:type="amn-exp:Variable" name="xx"/>
                    <expression xsi:type="amn-exp:Variable" name="yy"/>
                  </predicate>
                </predicate>
                <variable>xx</variable>
                <variable>yy</variable>
              </predicate>
            </predicate>
          </where>
          <thenPart xsi:type="amn-subst:Simultaneous">
            <substitution xsi:type="amn-subst:BecomesEqual">
              <leftExpression xsi:type="amn-exp:Variable" name="ss"/>
              <rightExpression xsi:type="amn-exp:Variable" name="ss1"/>
            </substitution>
          </thenPart>
        </thenPart>
      </substitution>
      <inputParams>av</inputParams>
      <inputParams>ii</inputParams>
      <inputParams>bb</inputParams>
      <inputParams>pp</inputParams>
      <inputParams>st</inputParams>
      <outputParams>ss</outputParams>
    </operations>
    <abstractVariables>research_area</abstractVariables>
    <abstractVariables>researcher</abstractVariables>
  </amn:Refinement>
  <amn:AbstractMachine name="Expert" sees="/2" extendsClause="/30" includes="/51 /48">
    <invariant xsi:type="amn-pred:AtomicPredicate" sign=":">
      <expression xsi:type="amn-exp:Variable" name="expert"/>
      <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
        <expression xsi:type="amn-exp:NamedConstant" name="ext_Expert"/>
      </expression>
    </invariant>
    <invariant xsi:type="amn-pred:Conjunction">
      <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:NamedConstant" name="area_of_expertise"/>
        <expression xsi:type="amn-exp:BinaryOperator" sign="-->">
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Expert"/>
          <expression xsi:type="amn-exp:FunctionalExpression" sign="seq">
            <expression xsi:type="amn-exp:BinaryOperator" sign="..">
              <expression xsi:type="amn-exp:IntegerValue"/>
              <expression xsi:type="amn-exp:IntegerValue" value="255"/>
            </expression>
          </expression>
        </expression>
      </predicate>
    </invariant>
    <invariant xsi:type="amn-pred:UniversalPredicate">
      <predicate xsi:type="amn-pred:Implication">
        <predicate xsi:type="amn-pred:Conjunction">
          <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
            <expression xsi:type="amn-exp:Variable" name="xx"/>
            <expression xsi:type="amn-exp:NamedConstant" name="ext_Specialist"/>
          </predicate>
        </predicate>
        <predicate xsi:type="amn-pred:Bracketed">
          <predicate xsi:type="amn-pred:Conjunction">
            <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
              <expression xsi:type="amn-exp:Variable" name="xx"/>
              <expression xsi:type="amn-exp:Variable" name="dispatcher"/>
            </predicate>
            <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
              <expression xsi:type="amn-exp:Variable" name="xx"/>
              <expression xsi:type="amn-exp:Variable" name="specialist"/>
            </predicate>
          </predicate>
        </predicate>
      </predicate>
      <variable>xx</variable>
    </invariant>
    <invariant xsi:type="amn-pred:AtomicPredicate" sign="&lt;:">
      <expression xsi:type="amn-exp:Variable" name="expert"/>
      <expression xsi:type="amn-exp:Variable" name="researcher"/>
    </invariant>
    <initialization xsi:type="amn-subst:Any">
      <any>aarea_of_expertise</any>
      <where xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:Variable" name="aarea_of_expertise"/>
        <expression xsi:type="amn-exp:BinaryOperator" sign="-->">
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Expert"/>
          <expression xsi:type="amn-exp:FunctionalExpression" sign="seq">
            <expression xsi:type="amn-exp:BinaryOperator" sign="..">
              <expression xsi:type="amn-exp:IntegerValue"/>
              <expression xsi:type="amn-exp:IntegerValue" value="255"/>
            </expression>
          </expression>
        </expression>
      </where>
      <thenPart xsi:type="amn-subst:BecomesEqual">
        <leftExpression xsi:type="amn-exp:Variable" name="area_of_expertise"/>
        <rightExpression xsi:type="amn-exp:Variable" name="aarea_of_expertise"/>
      </thenPart>
    </initialization>
    <initialization xsi:type="amn-subst:BecomesEqual">
      <leftExpression xsi:type="amn-exp:Variable" name="expert"/>
      <rightExpression xsi:type="amn-exp:SetValue"/>
    </initialization>
    <operations name="set_area_of_expertise">
      <substitution xsi:type="amn-subst:Precondition">
        <pre xsi:type="amn-pred:AtomicPredicate" sign=":">
          <expression xsi:type="amn-exp:Variable" name="sav"/>
          <expression xsi:type="amn-exp:BinaryOperator" sign="+->">
            <expression xsi:type="amn-exp:NamedConstant" name="ext_Expert"/>
            <expression xsi:type="amn-exp:FunctionalExpression" sign="seq">
              <expression xsi:type="amn-exp:BinaryOperator" sign="..">
                <expression xsi:type="amn-exp:IntegerValue"/>
                <expression xsi:type="amn-exp:IntegerValue" value="255"/>
              </expression>
            </expression>
          </expression>
        </pre>
        <thenPart xsi:type="amn-subst:BecomesEqual">
          <leftExpression xsi:type="amn-exp:Variable" name="area_of_expertise"/>
          <rightExpression xsi:type="amn-exp:BinaryOperator" sign="&lt;+">
            <expression xsi:type="amn-exp:Variable" name="area_of_expertise"/>
            <expression xsi:type="amn-exp:Variable" name="sav"/>
          </rightExpression>
        </thenPart>
      </substitution>
      <inputParams>sav</inputParams>
    </operations>
    <abstractVariables>area_of_expertise</abstractVariables>
    <abstractVariables>expert</abstractVariables>
  </amn:AbstractMachine>
  <amn:AbstractMachine name="MExpert" sees="/2"/>
  <amn:Refinement name="ExpertRef" sees="/2" extendsClause="/30" refines="/34" includes="/51 /48">
    <invariant xsi:type="amn-pred:AtomicPredicate" sign=":">
      <expression xsi:type="amn-exp:Variable" name="expert"/>
      <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
        <expression xsi:type="amn-exp:NamedConstant" name="ext_Expert"/>
      </expression>
    </invariant>
    <invariant xsi:type="amn-pred:Conjunction">
      <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:NamedConstant" name="area_of_expertise"/>
        <expression xsi:type="amn-exp:BinaryOperator" sign="-->">
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Expert"/>
          <expression xsi:type="amn-exp:FunctionalExpression" sign="seq">
            <expression xsi:type="amn-exp:BinaryOperator" sign="..">
              <expression xsi:type="amn-exp:IntegerValue"/>
              <expression xsi:type="amn-exp:IntegerValue" value="255"/>
            </expression>
          </expression>
        </expression>
      </predicate>
    </invariant>
    <invariant xsi:type="amn-pred:UniversalPredicate">
      <predicate xsi:type="amn-pred:Implication">
        <predicate xsi:type="amn-pred:Conjunction">
          <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
            <expression xsi:type="amn-exp:Variable" name="xx"/>
            <expression xsi:type="amn-exp:NamedConstant" name="ext_Specialist"/>
          </predicate>
        </predicate>
        <predicate xsi:type="amn-pred:Bracketed">
          <predicate xsi:type="amn-pred:Conjunction">
            <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
              <expression xsi:type="amn-exp:Variable" name="xx"/>
              <expression xsi:type="amn-exp:Variable" name="dispatcher"/>
            </predicate>
            <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
              <expression xsi:type="amn-exp:Variable" name="xx"/>
              <expression xsi:type="amn-exp:Variable" name="specialist"/>
            </predicate>
          </predicate>
        </predicate>
      </predicate>
      <variable>xx</variable>
    </invariant>
    <invariant xsi:type="amn-pred:AtomicPredicate" sign="&lt;:">
      <expression xsi:type="amn-exp:Variable" name="expert"/>
      <expression xsi:type="amn-exp:Variable" name="researcher"/>
    </invariant>
    <initialization xsi:type="amn-subst:Any">
      <any>aarea_of_expertise</any>
      <where xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:Variable" name="aarea_of_expertise"/>
        <expression xsi:type="amn-exp:BinaryOperator" sign="-->">
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Expert"/>
          <expression xsi:type="amn-exp:FunctionalExpression" sign="seq">
            <expression xsi:type="amn-exp:BinaryOperator" sign="..">
              <expression xsi:type="amn-exp:IntegerValue"/>
              <expression xsi:type="amn-exp:IntegerValue" value="255"/>
            </expression>
          </expression>
        </expression>
      </where>
      <thenPart xsi:type="amn-subst:BecomesEqual">
        <leftExpression xsi:type="amn-exp:Variable" name="area_of_expertise"/>
        <rightExpression xsi:type="amn-exp:Variable" name="aarea_of_expertise"/>
      </thenPart>
    </initialization>
    <initialization xsi:type="amn-subst:BecomesEqual">
      <leftExpression xsi:type="amn-exp:Variable" name="expert"/>
      <rightExpression xsi:type="amn-exp:SetValue"/>
    </initialization>
    <abstractVariables>area_of_expertise</abstractVariables>
    <abstractVariables>expert</abstractVariables>
  </amn:Refinement>
  <amn:AbstractMachine name="Secretary" sees="/2">
    <invariant xsi:type="amn-pred:AtomicPredicate" sign=":">
      <expression xsi:type="amn-exp:Variable" name="secretary"/>
      <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
        <expression xsi:type="amn-exp:NamedConstant" name="ext_Secretary"/>
      </expression>
    </invariant>
    <invariant xsi:type="amn-pred:Conjunction">
      <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:NamedConstant" name="available_experts"/>
        <expression xsi:type="amn-exp:BinaryOperator" sign="-->">
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Secretary"/>
          <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
            <expression xsi:type="amn-exp:NamedConstant" name="ext_Expert"/>
          </expression>
        </expression>
      </predicate>
    </invariant>
    <initialization xsi:type="amn-subst:Any">
      <any>aavailable_experts</any>
      <where xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:Variable" name="aavailable_experts"/>
        <expression xsi:type="amn-exp:BinaryOperator" sign="-->">
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Secretary"/>
          <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
            <expression xsi:type="amn-exp:NamedConstant" name="ext_Expert"/>
          </expression>
        </expression>
      </where>
      <thenPart xsi:type="amn-subst:BecomesEqual">
        <leftExpression xsi:type="amn-exp:Variable" name="available_experts"/>
        <rightExpression xsi:type="amn-exp:Variable" name="aavailable_experts"/>
      </thenPart>
    </initialization>
    <initialization xsi:type="amn-subst:BecomesEqual">
      <leftExpression xsi:type="amn-exp:Variable" name="secretary"/>
      <rightExpression xsi:type="amn-exp:SetValue"/>
    </initialization>
    <operations name="set_available_experts">
      <substitution xsi:type="amn-subst:Precondition">
        <pre xsi:type="amn-pred:AtomicPredicate" sign=":">
          <expression xsi:type="amn-exp:Variable" name="sav"/>
          <expression xsi:type="amn-exp:BinaryOperator" sign="+->">
            <expression xsi:type="amn-exp:NamedConstant" name="ext_Secretary"/>
            <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
              <expression xsi:type="amn-exp:NamedConstant" name="ext_Expert"/>
            </expression>
          </expression>
        </pre>
        <thenPart xsi:type="amn-subst:BecomesEqual">
          <leftExpression xsi:type="amn-exp:Variable" name="available_experts"/>
          <rightExpression xsi:type="amn-exp:BinaryOperator" sign="&lt;+">
            <expression xsi:type="amn-exp:Variable" name="available_experts"/>
            <expression xsi:type="amn-exp:Variable" name="sav"/>
          </rightExpression>
        </thenPart>
      </substitution>
      <inputParams>sav</inputParams>
    </operations>
    <abstractVariables>available_experts</abstractVariables>
    <abstractVariables>secretary</abstractVariables>
  </amn:AbstractMachine>
  <amn:AbstractMachine name="MSecretary" sees="/2">
    <operations name="search_for_experts">
      <substitution xsi:type="amn-subst:Precondition">
        <pre xsi:type="amn-pred:AtomicPredicate" sign=":">
          <expression xsi:type="amn-exp:Variable" name="av"/>
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Secretary"/>
        </pre>
        <thenPart xsi:type="amn-subst:Any">
          <any>number_of_experts1</any>
          <where xsi:type="amn-pred:Conjunction">
            <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
              <expression xsi:type="amn-exp:Variable" name="number_of_experts1"/>
              <expression xsi:type="amn-exp:NamedConstant" name="INTEGER"/>
            </predicate>
          </where>
          <thenPart xsi:type="amn-subst:Simultaneous">
            <substitution xsi:type="amn-subst:BecomesEqual">
              <leftExpression xsi:type="amn-exp:Variable" name="number_of_experts"/>
              <rightExpression xsi:type="amn-exp:Variable" name="number_of_experts1"/>
            </substitution>
          </thenPart>
        </thenPart>
      </substitution>
      <inputParams>av</inputParams>
      <outputParams>number_of_experts</outputParams>
    </operations>
    <operations name="dispatch">
      <substitution xsi:type="amn-subst:Precondition">
        <pre xsi:type="amn-pred:AtomicPredicate" sign=":">
          <expression xsi:type="amn-exp:Variable" name="av"/>
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Secretary"/>
        </pre>
        <pre xsi:type="amn-pred:AtomicPredicate" sign=":">
          <expression xsi:type="amn-exp:Variable" name="revi"/>
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Review"/>
        </pre>
        <thenPart xsi:type="amn-subst:Identity"/>
      </substitution>
      <inputParams>av</inputParams>
      <inputParams>revi</inputParams>
    </operations>
  </amn:AbstractMachine>
  <amn:Refinement name="SecretaryRef" sees="/2 /33 /24 /21" refines="/37" includes="/24">
    <invariant xsi:type="amn-pred:AtomicPredicate" sign=":">
      <expression xsi:type="amn-exp:Variable" name="secretary"/>
      <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
        <expression xsi:type="amn-exp:NamedConstant" name="ext_Secretary"/>
      </expression>
    </invariant>
    <invariant xsi:type="amn-pred:Conjunction">
      <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:NamedConstant" name="available_experts"/>
        <expression xsi:type="amn-exp:BinaryOperator" sign="-->">
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Secretary"/>
          <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
            <expression xsi:type="amn-exp:NamedConstant" name="ext_Expert"/>
          </expression>
        </expression>
      </predicate>
    </invariant>
    <initialization xsi:type="amn-subst:Any">
      <any>aavailable_experts</any>
      <where xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:Variable" name="aavailable_experts"/>
        <expression xsi:type="amn-exp:BinaryOperator" sign="-->">
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Secretary"/>
          <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
            <expression xsi:type="amn-exp:NamedConstant" name="ext_Expert"/>
          </expression>
        </expression>
      </where>
      <thenPart xsi:type="amn-subst:BecomesEqual">
        <leftExpression xsi:type="amn-exp:Variable" name="available_experts"/>
        <rightExpression xsi:type="amn-exp:Variable" name="aavailable_experts"/>
      </thenPart>
    </initialization>
    <initialization xsi:type="amn-subst:BecomesEqual">
      <leftExpression xsi:type="amn-exp:Variable" name="secretary"/>
      <rightExpression xsi:type="amn-exp:SetValue"/>
    </initialization>
    <operations name="search_for_experts">
      <substitution xsi:type="amn-subst:Precondition">
        <pre xsi:type="amn-pred:AtomicPredicate" sign=":">
          <expression xsi:type="amn-exp:Variable" name="av"/>
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Secretary"/>
        </pre>
        <thenPart xsi:type="amn-subst:Any">
          <any>eff1</any>
          <any>number_of_experts1</any>
          <where xsi:type="amn-pred:Conjunction">
            <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
              <expression xsi:type="amn-exp:Variable" name="eff1"/>
              <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
                <expression xsi:type="amn-exp:NamedConstant" name="ext_Expert"/>
              </expression>
            </predicate>
            <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
              <expression xsi:type="amn-exp:Variable" name="number_of_experts1"/>
              <expression xsi:type="amn-exp:NamedConstant" name="INTEGER"/>
            </predicate>
            <predicate xsi:type="amn-pred:ExistentialPredicate">
              <predicate xsi:type="amn-pred:Conjunction">
                <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
                  <expression xsi:type="amn-exp:Variable" name="exps"/>
                  <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
                    <expression xsi:type="amn-exp:NamedConstant" name="ext_Expert"/>
                  </expression>
                </predicate>
                <predicate xsi:type="amn-pred:Conjunction">
                  <predicate xsi:type="amn-pred:Conjunction">
                    <predicate xsi:type="amn-pred:AtomicPredicate" sign="=">
                      <expression xsi:type="amn-exp:Variable" name="exps"/>
                      <expression xsi:type="amn-exp:SetComprehension">
                        <variable>exp</variable>
                        <predicate xsi:type="amn-pred:Conjunction">
                          <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
                            <expression xsi:type="amn-exp:Variable" name="exp"/>
                            <expression xsi:type="amn-exp:NamedConstant" name="ext_Expert"/>
                          </predicate>
                          <predicate xsi:type="amn-pred:Conjunction">
                            <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
                              <expression xsi:type="amn-exp:Variable" name="exp"/>
                              <expression xsi:type="amn-exp:Variable" name="expert"/>
                            </predicate>
                            <predicate xsi:type="amn-pred:AtomicPredicate" sign="=">
                              <expression xsi:type="amn-exp:FunctionalExpression"
                                  sign="research_area">
                                <expression xsi:type="amn-exp:Variable" name="exp"/>
                              </expression>
                              <expression xsi:type="amn-exp:Variable" name="computer_science"/>
                            </predicate>
                          </predicate>
                        </predicate>
                      </expression>
                    </predicate>
                    <predicate xsi:type="amn-pred:AtomicPredicate" sign="=">
                      <expression xsi:type="amn-exp:Variable" name="eff1"/>
                      <expression xsi:type="amn-exp:Variable" name="exps"/>
                    </predicate>
                  </predicate>
                  <predicate xsi:type="amn-pred:AtomicPredicate" sign="=">
                    <expression xsi:type="amn-exp:Variable" name="number_of_experts1"/>
                    <expression xsi:type="amn-exp:FunctionalExpression" sign="card">
                      <expression xsi:type="amn-exp:Variable" name="exps"/>
                    </expression>
                  </predicate>
                </predicate>
              </predicate>
              <variable>exps</variable>
            </predicate>
          </where>
          <thenPart xsi:type="amn-subst:Simultaneous">
            <substitution xsi:type="amn-subst:BecomesEqual">
              <leftExpression xsi:type="amn-exp:FunctionalExpression" sign="available_experts">
                <expression xsi:type="amn-exp:Variable" name="av"/>
              </leftExpression>
              <rightExpression xsi:type="amn-exp:Variable" name="eff1"/>
            </substitution>
            <substitution xsi:type="amn-subst:BecomesEqual">
              <leftExpression xsi:type="amn-exp:Variable" name="number_of_experts"/>
              <rightExpression xsi:type="amn-exp:Variable" name="number_of_experts1"/>
            </substitution>
          </thenPart>
        </thenPart>
      </substitution>
      <inputParams>av</inputParams>
      <outputParams>number_of_experts</outputParams>
    </operations>
    <operations name="dispatch">
      <substitution xsi:type="amn-subst:Precondition">
        <pre xsi:type="amn-pred:AtomicPredicate" sign=":">
          <expression xsi:type="amn-exp:Variable" name="av"/>
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Secretary"/>
        </pre>
        <pre xsi:type="amn-pred:AtomicPredicate" sign=":">
          <expression xsi:type="amn-exp:Variable" name="revi"/>
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Review"/>
        </pre>
        <thenPart xsi:type="amn-subst:Any">
          <any>eff1</any>
          <where xsi:type="amn-pred:Conjunction">
            <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
              <expression xsi:type="amn-exp:Variable" name="eff1"/>
              <expression xsi:type="amn-exp:NamedConstant" name="ext_Expert"/>
            </predicate>
            <predicate xsi:type="amn-pred:Conjunction">
              <predicate xsi:type="amn-pred:Negation">
                <predicate xsi:type="amn-pred:AtomicPredicate" sign="=">
                  <expression xsi:type="amn-exp:FunctionalExpression" sign="available_experts">
                    <expression xsi:type="amn-exp:Variable" name="av"/>
                  </expression>
                  <expression xsi:type="amn-exp:SetValue"/>
                </predicate>
              </predicate>
              <predicate xsi:type="amn-pred:ExistentialPredicate">
                <predicate xsi:type="amn-pred:Conjunction">
                  <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
                    <expression xsi:type="amn-exp:Variable" name="exp"/>
                    <expression xsi:type="amn-exp:NamedConstant" name="ext_Expert"/>
                  </predicate>
                  <predicate xsi:type="amn-pred:Conjunction">
                    <predicate xsi:type="amn-pred:Conjunction">
                      <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
                        <expression xsi:type="amn-exp:Variable" name="exp"/>
                        <expression xsi:type="amn-exp:FunctionalExpression" sign="available_experts">
                          <expression xsi:type="amn-exp:Variable" name="av"/>
                        </expression>
                      </predicate>
                      <predicate xsi:type="amn-pred:AtomicPredicate" sign="=">
                        <expression xsi:type="amn-exp:FunctionalExpression" sign="area_of_expertise">
                          <expression xsi:type="amn-exp:Variable" name="exp"/>
                        </expression>
                        <expression xsi:type="amn-exp:FunctionalExpression" sign="area">
                          <expression xsi:type="amn-exp:FunctionalExpression" sign="for_proposal">
                            <expression xsi:type="amn-exp:Variable" name="revi"/>
                          </expression>
                        </expression>
                      </predicate>
                    </predicate>
                    <predicate xsi:type="amn-pred:AtomicPredicate" sign="=">
                      <expression xsi:type="amn-exp:Variable" name="eff1"/>
                      <expression xsi:type="amn-exp:Variable" name="exp"/>
                    </predicate>
                  </predicate>
                </predicate>
                <variable>exp</variable>
              </predicate>
            </predicate>
          </where>
          <thenPart xsi:type="amn-subst:Simultaneous">
            <substitution xsi:type="amn-subst:Call">
              <operationName>
                <id>set_by_expert</id>
              </operationName>
              <actualParam xsi:type="amn-exp:SetValue">
                <value xsi:type="amn-exp:BinaryOperator" sign="|->">
                  <expression xsi:type="amn-exp:Variable" name="revi"/>
                  <expression xsi:type="amn-exp:Variable" name="eff1"/>
                </value>
              </actualParam>
            </substitution>
          </thenPart>
        </thenPart>
      </substitution>
      <inputParams>av</inputParams>
      <inputParams>revi</inputParams>
    </operations>
    <abstractVariables>available_experts</abstractVariables>
    <abstractVariables>secretary</abstractVariables>
  </amn:Refinement>
  <amn:AbstractMachine name="Submission" sees="/2">
    <invariant xsi:type="amn-pred:Conjunction">
      <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:NamedConstant" name="field"/>
        <expression xsi:type="amn-exp:BinaryOperator" sign="-->">
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Submission"/>
          <expression xsi:type="amn-exp:FunctionalExpression" sign="seq">
            <expression xsi:type="amn-exp:BinaryOperator" sign="..">
              <expression xsi:type="amn-exp:IntegerValue"/>
              <expression xsi:type="amn-exp:IntegerValue" value="255"/>
            </expression>
          </expression>
        </expression>
      </predicate>
    </invariant>
    <initialization xsi:type="amn-subst:Any">
      <any>afield</any>
      <where xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:Variable" name="afield"/>
        <expression xsi:type="amn-exp:BinaryOperator" sign="-->">
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Submission"/>
          <expression xsi:type="amn-exp:FunctionalExpression" sign="seq">
            <expression xsi:type="amn-exp:BinaryOperator" sign="..">
              <expression xsi:type="amn-exp:IntegerValue"/>
              <expression xsi:type="amn-exp:IntegerValue" value="255"/>
            </expression>
          </expression>
        </expression>
      </where>
      <thenPart xsi:type="amn-subst:BecomesEqual">
        <leftExpression xsi:type="amn-exp:Variable" name="field"/>
        <rightExpression xsi:type="amn-exp:Variable" name="afield"/>
      </thenPart>
    </initialization>
    <operations name="set_field">
      <substitution xsi:type="amn-subst:Precondition">
        <pre xsi:type="amn-pred:AtomicPredicate" sign=":">
          <expression xsi:type="amn-exp:Variable" name="sav"/>
          <expression xsi:type="amn-exp:BinaryOperator" sign="+->">
            <expression xsi:type="amn-exp:NamedConstant" name="ext_Submission"/>
            <expression xsi:type="amn-exp:FunctionalExpression" sign="seq">
              <expression xsi:type="amn-exp:BinaryOperator" sign="..">
                <expression xsi:type="amn-exp:IntegerValue"/>
                <expression xsi:type="amn-exp:IntegerValue" value="255"/>
              </expression>
            </expression>
          </expression>
        </pre>
        <thenPart xsi:type="amn-subst:BecomesEqual">
          <leftExpression xsi:type="amn-exp:Variable" name="field"/>
          <rightExpression xsi:type="amn-exp:BinaryOperator" sign="&lt;+">
            <expression xsi:type="amn-exp:Variable" name="field"/>
            <expression xsi:type="amn-exp:Variable" name="sav"/>
          </rightExpression>
        </thenPart>
      </substitution>
      <inputParams>sav</inputParams>
    </operations>
    <abstractVariables>field</abstractVariables>
  </amn:AbstractMachine>
  <amn:AbstractMachine name="MSubmission" sees="/2"/>
  <amn:Refinement name="SubmissionRef" sees="/2" refines="/40">
    <invariant xsi:type="amn-pred:Conjunction">
      <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:NamedConstant" name="field"/>
        <expression xsi:type="amn-exp:BinaryOperator" sign="-->">
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Submission"/>
          <expression xsi:type="amn-exp:FunctionalExpression" sign="seq">
            <expression xsi:type="amn-exp:BinaryOperator" sign="..">
              <expression xsi:type="amn-exp:IntegerValue"/>
              <expression xsi:type="amn-exp:IntegerValue" value="255"/>
            </expression>
          </expression>
        </expression>
      </predicate>
    </invariant>
    <initialization xsi:type="amn-subst:Any">
      <any>afield</any>
      <where xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:Variable" name="afield"/>
        <expression xsi:type="amn-exp:BinaryOperator" sign="-->">
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Submission"/>
          <expression xsi:type="amn-exp:FunctionalExpression" sign="seq">
            <expression xsi:type="amn-exp:BinaryOperator" sign="..">
              <expression xsi:type="amn-exp:IntegerValue"/>
              <expression xsi:type="amn-exp:IntegerValue" value="255"/>
            </expression>
          </expression>
        </expression>
      </where>
      <thenPart xsi:type="amn-subst:BecomesEqual">
        <leftExpression xsi:type="amn-exp:Variable" name="field"/>
        <rightExpression xsi:type="amn-exp:Variable" name="afield"/>
      </thenPart>
    </initialization>
    <abstractVariables>field</abstractVariables>
  </amn:Refinement>
  <amn:AbstractMachine name="Evaluation" sees="/2">
    <invariant xsi:type="amn-pred:AtomicPredicate" sign=":">
      <expression xsi:type="amn-exp:Variable" name="evaluation"/>
      <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
        <expression xsi:type="amn-exp:NamedConstant" name="ext_Evaluation"/>
      </expression>
    </invariant>
    <invariant xsi:type="amn-pred:Conjunction">
      <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:NamedConstant" name="subm_ref"/>
        <expression xsi:type="amn-exp:BinaryOperator" sign="-->">
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Evaluation"/>
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Submission"/>
        </expression>
      </predicate>
    </invariant>
    <invariant xsi:type="amn-pred:Conjunction">
      <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:NamedConstant" name="by_specialist"/>
        <expression xsi:type="amn-exp:BinaryOperator" sign="-->">
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Evaluation"/>
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Expert"/>
        </expression>
      </predicate>
    </invariant>
    <initialization xsi:type="amn-subst:Any">
      <any>asubm_ref</any>
      <where xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:Variable" name="asubm_ref"/>
        <expression xsi:type="amn-exp:BinaryOperator" sign="-->">
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Evaluation"/>
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Submission"/>
        </expression>
      </where>
      <thenPart xsi:type="amn-subst:BecomesEqual">
        <leftExpression xsi:type="amn-exp:Variable" name="subm_ref"/>
        <rightExpression xsi:type="amn-exp:Variable" name="asubm_ref"/>
      </thenPart>
    </initialization>
    <initialization xsi:type="amn-subst:Any">
      <any>aby_specialist</any>
      <where xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:Variable" name="aby_specialist"/>
        <expression xsi:type="amn-exp:BinaryOperator" sign="-->">
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Evaluation"/>
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Expert"/>
        </expression>
      </where>
      <thenPart xsi:type="amn-subst:BecomesEqual">
        <leftExpression xsi:type="amn-exp:Variable" name="by_specialist"/>
        <rightExpression xsi:type="amn-exp:Variable" name="aby_specialist"/>
      </thenPart>
    </initialization>
    <initialization xsi:type="amn-subst:BecomesEqual">
      <leftExpression xsi:type="amn-exp:Variable" name="evaluation"/>
      <rightExpression xsi:type="amn-exp:SetValue"/>
    </initialization>
    <operations name="set_subm_ref">
      <substitution xsi:type="amn-subst:Precondition">
        <pre xsi:type="amn-pred:AtomicPredicate" sign=":">
          <expression xsi:type="amn-exp:Variable" name="sav"/>
          <expression xsi:type="amn-exp:BinaryOperator" sign="+->">
            <expression xsi:type="amn-exp:NamedConstant" name="ext_Evaluation"/>
            <expression xsi:type="amn-exp:NamedConstant" name="ext_Submission"/>
          </expression>
        </pre>
        <thenPart xsi:type="amn-subst:BecomesEqual">
          <leftExpression xsi:type="amn-exp:Variable" name="subm_ref"/>
          <rightExpression xsi:type="amn-exp:BinaryOperator" sign="&lt;+">
            <expression xsi:type="amn-exp:Variable" name="subm_ref"/>
            <expression xsi:type="amn-exp:Variable" name="sav"/>
          </rightExpression>
        </thenPart>
      </substitution>
      <inputParams>sav</inputParams>
    </operations>
    <operations name="set_by_specialist">
      <substitution xsi:type="amn-subst:Precondition">
        <pre xsi:type="amn-pred:AtomicPredicate" sign=":">
          <expression xsi:type="amn-exp:Variable" name="sav"/>
          <expression xsi:type="amn-exp:BinaryOperator" sign="+->">
            <expression xsi:type="amn-exp:NamedConstant" name="ext_Evaluation"/>
            <expression xsi:type="amn-exp:NamedConstant" name="ext_Expert"/>
          </expression>
        </pre>
        <thenPart xsi:type="amn-subst:BecomesEqual">
          <leftExpression xsi:type="amn-exp:Variable" name="by_specialist"/>
          <rightExpression xsi:type="amn-exp:BinaryOperator" sign="&lt;+">
            <expression xsi:type="amn-exp:Variable" name="by_specialist"/>
            <expression xsi:type="amn-exp:Variable" name="sav"/>
          </rightExpression>
        </thenPart>
      </substitution>
      <inputParams>sav</inputParams>
    </operations>
    <abstractVariables>subm_ref</abstractVariables>
    <abstractVariables>by_specialist</abstractVariables>
    <abstractVariables>evaluation</abstractVariables>
  </amn:AbstractMachine>
  <amn:AbstractMachine name="MEvaluation" sees="/2"/>
  <amn:Refinement name="EvaluationRef" sees="/2" refines="/43">
    <invariant xsi:type="amn-pred:AtomicPredicate" sign=":">
      <expression xsi:type="amn-exp:Variable" name="evaluation"/>
      <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
        <expression xsi:type="amn-exp:NamedConstant" name="ext_Evaluation"/>
      </expression>
    </invariant>
    <invariant xsi:type="amn-pred:Conjunction">
      <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:NamedConstant" name="subm_ref"/>
        <expression xsi:type="amn-exp:BinaryOperator" sign="-->">
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Evaluation"/>
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Submission"/>
        </expression>
      </predicate>
    </invariant>
    <invariant xsi:type="amn-pred:Conjunction">
      <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:NamedConstant" name="by_specialist"/>
        <expression xsi:type="amn-exp:BinaryOperator" sign="-->">
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Evaluation"/>
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Expert"/>
        </expression>
      </predicate>
    </invariant>
    <initialization xsi:type="amn-subst:Any">
      <any>asubm_ref</any>
      <where xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:Variable" name="asubm_ref"/>
        <expression xsi:type="amn-exp:BinaryOperator" sign="-->">
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Evaluation"/>
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Submission"/>
        </expression>
      </where>
      <thenPart xsi:type="amn-subst:BecomesEqual">
        <leftExpression xsi:type="amn-exp:Variable" name="subm_ref"/>
        <rightExpression xsi:type="amn-exp:Variable" name="asubm_ref"/>
      </thenPart>
    </initialization>
    <initialization xsi:type="amn-subst:Any">
      <any>aby_specialist</any>
      <where xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:Variable" name="aby_specialist"/>
        <expression xsi:type="amn-exp:BinaryOperator" sign="-->">
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Evaluation"/>
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Expert"/>
        </expression>
      </where>
      <thenPart xsi:type="amn-subst:BecomesEqual">
        <leftExpression xsi:type="amn-exp:Variable" name="by_specialist"/>
        <rightExpression xsi:type="amn-exp:Variable" name="aby_specialist"/>
      </thenPart>
    </initialization>
    <initialization xsi:type="amn-subst:BecomesEqual">
      <leftExpression xsi:type="amn-exp:Variable" name="evaluation"/>
      <rightExpression xsi:type="amn-exp:SetValue"/>
    </initialization>
    <abstractVariables>subm_ref</abstractVariables>
    <abstractVariables>by_specialist</abstractVariables>
    <abstractVariables>evaluation</abstractVariables>
  </amn:Refinement>
  <amn:AbstractMachine name="Employee" sees="/2">
    <invariant xsi:type="amn-pred:AtomicPredicate" sign=":">
      <expression xsi:type="amn-exp:Variable" name="employee"/>
      <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
        <expression xsi:type="amn-exp:NamedConstant" name="ext_Employee"/>
      </expression>
    </invariant>
    <invariant xsi:type="amn-pred:Conjunction">
      <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:NamedConstant" name="first_name"/>
        <expression xsi:type="amn-exp:BinaryOperator" sign="-->">
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Employee"/>
          <expression xsi:type="amn-exp:FunctionalExpression" sign="seq">
            <expression xsi:type="amn-exp:BinaryOperator" sign="..">
              <expression xsi:type="amn-exp:IntegerValue"/>
              <expression xsi:type="amn-exp:IntegerValue" value="255"/>
            </expression>
          </expression>
        </expression>
      </predicate>
    </invariant>
    <invariant xsi:type="amn-pred:Conjunction">
      <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:NamedConstant" name="last_name"/>
        <expression xsi:type="amn-exp:BinaryOperator" sign="-->">
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Employee"/>
          <expression xsi:type="amn-exp:FunctionalExpression" sign="seq">
            <expression xsi:type="amn-exp:BinaryOperator" sign="..">
              <expression xsi:type="amn-exp:IntegerValue"/>
              <expression xsi:type="amn-exp:IntegerValue" value="255"/>
            </expression>
          </expression>
        </expression>
      </predicate>
    </invariant>
    <initialization xsi:type="amn-subst:Any">
      <any>afirst_name</any>
      <where xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:Variable" name="afirst_name"/>
        <expression xsi:type="amn-exp:BinaryOperator" sign="-->">
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Employee"/>
          <expression xsi:type="amn-exp:FunctionalExpression" sign="seq">
            <expression xsi:type="amn-exp:BinaryOperator" sign="..">
              <expression xsi:type="amn-exp:IntegerValue"/>
              <expression xsi:type="amn-exp:IntegerValue" value="255"/>
            </expression>
          </expression>
        </expression>
      </where>
      <thenPart xsi:type="amn-subst:BecomesEqual">
        <leftExpression xsi:type="amn-exp:Variable" name="first_name"/>
        <rightExpression xsi:type="amn-exp:Variable" name="afirst_name"/>
      </thenPart>
    </initialization>
    <initialization xsi:type="amn-subst:Any">
      <any>alast_name</any>
      <where xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:Variable" name="alast_name"/>
        <expression xsi:type="amn-exp:BinaryOperator" sign="-->">
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Employee"/>
          <expression xsi:type="amn-exp:FunctionalExpression" sign="seq">
            <expression xsi:type="amn-exp:BinaryOperator" sign="..">
              <expression xsi:type="amn-exp:IntegerValue"/>
              <expression xsi:type="amn-exp:IntegerValue" value="255"/>
            </expression>
          </expression>
        </expression>
      </where>
      <thenPart xsi:type="amn-subst:BecomesEqual">
        <leftExpression xsi:type="amn-exp:Variable" name="last_name"/>
        <rightExpression xsi:type="amn-exp:Variable" name="alast_name"/>
      </thenPart>
    </initialization>
    <initialization xsi:type="amn-subst:BecomesEqual">
      <leftExpression xsi:type="amn-exp:Variable" name="employee"/>
      <rightExpression xsi:type="amn-exp:SetValue"/>
    </initialization>
    <operations name="set_first_name">
      <substitution xsi:type="amn-subst:Precondition">
        <pre xsi:type="amn-pred:AtomicPredicate" sign=":">
          <expression xsi:type="amn-exp:Variable" name="sav"/>
          <expression xsi:type="amn-exp:BinaryOperator" sign="+->">
            <expression xsi:type="amn-exp:NamedConstant" name="ext_Employee"/>
            <expression xsi:type="amn-exp:FunctionalExpression" sign="seq">
              <expression xsi:type="amn-exp:BinaryOperator" sign="..">
                <expression xsi:type="amn-exp:IntegerValue"/>
                <expression xsi:type="amn-exp:IntegerValue" value="255"/>
              </expression>
            </expression>
          </expression>
        </pre>
        <thenPart xsi:type="amn-subst:BecomesEqual">
          <leftExpression xsi:type="amn-exp:Variable" name="first_name"/>
          <rightExpression xsi:type="amn-exp:BinaryOperator" sign="&lt;+">
            <expression xsi:type="amn-exp:Variable" name="first_name"/>
            <expression xsi:type="amn-exp:Variable" name="sav"/>
          </rightExpression>
        </thenPart>
      </substitution>
      <inputParams>sav</inputParams>
    </operations>
    <operations name="set_last_name">
      <substitution xsi:type="amn-subst:Precondition">
        <pre xsi:type="amn-pred:AtomicPredicate" sign=":">
          <expression xsi:type="amn-exp:Variable" name="sav"/>
          <expression xsi:type="amn-exp:BinaryOperator" sign="+->">
            <expression xsi:type="amn-exp:NamedConstant" name="ext_Employee"/>
            <expression xsi:type="amn-exp:FunctionalExpression" sign="seq">
              <expression xsi:type="amn-exp:BinaryOperator" sign="..">
                <expression xsi:type="amn-exp:IntegerValue"/>
                <expression xsi:type="amn-exp:IntegerValue" value="255"/>
              </expression>
            </expression>
          </expression>
        </pre>
        <thenPart xsi:type="amn-subst:BecomesEqual">
          <leftExpression xsi:type="amn-exp:Variable" name="last_name"/>
          <rightExpression xsi:type="amn-exp:BinaryOperator" sign="&lt;+">
            <expression xsi:type="amn-exp:Variable" name="last_name"/>
            <expression xsi:type="amn-exp:Variable" name="sav"/>
          </rightExpression>
        </thenPart>
      </substitution>
      <inputParams>sav</inputParams>
    </operations>
    <abstractVariables>first_name</abstractVariables>
    <abstractVariables>last_name</abstractVariables>
    <abstractVariables>employee</abstractVariables>
  </amn:AbstractMachine>
  <amn:AbstractMachine name="MEmployee" sees="/2"/>
  <amn:Refinement name="EmployeeRef" sees="/2" refines="/46">
    <invariant xsi:type="amn-pred:AtomicPredicate" sign=":">
      <expression xsi:type="amn-exp:Variable" name="employee"/>
      <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
        <expression xsi:type="amn-exp:NamedConstant" name="ext_Employee"/>
      </expression>
    </invariant>
    <invariant xsi:type="amn-pred:Conjunction">
      <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:NamedConstant" name="first_name"/>
        <expression xsi:type="amn-exp:BinaryOperator" sign="-->">
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Employee"/>
          <expression xsi:type="amn-exp:FunctionalExpression" sign="seq">
            <expression xsi:type="amn-exp:BinaryOperator" sign="..">
              <expression xsi:type="amn-exp:IntegerValue"/>
              <expression xsi:type="amn-exp:IntegerValue" value="255"/>
            </expression>
          </expression>
        </expression>
      </predicate>
    </invariant>
    <invariant xsi:type="amn-pred:Conjunction">
      <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:NamedConstant" name="last_name"/>
        <expression xsi:type="amn-exp:BinaryOperator" sign="-->">
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Employee"/>
          <expression xsi:type="amn-exp:FunctionalExpression" sign="seq">
            <expression xsi:type="amn-exp:BinaryOperator" sign="..">
              <expression xsi:type="amn-exp:IntegerValue"/>
              <expression xsi:type="amn-exp:IntegerValue" value="255"/>
            </expression>
          </expression>
        </expression>
      </predicate>
    </invariant>
    <initialization xsi:type="amn-subst:Any">
      <any>afirst_name</any>
      <where xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:Variable" name="afirst_name"/>
        <expression xsi:type="amn-exp:BinaryOperator" sign="-->">
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Employee"/>
          <expression xsi:type="amn-exp:FunctionalExpression" sign="seq">
            <expression xsi:type="amn-exp:BinaryOperator" sign="..">
              <expression xsi:type="amn-exp:IntegerValue"/>
              <expression xsi:type="amn-exp:IntegerValue" value="255"/>
            </expression>
          </expression>
        </expression>
      </where>
      <thenPart xsi:type="amn-subst:BecomesEqual">
        <leftExpression xsi:type="amn-exp:Variable" name="first_name"/>
        <rightExpression xsi:type="amn-exp:Variable" name="afirst_name"/>
      </thenPart>
    </initialization>
    <initialization xsi:type="amn-subst:Any">
      <any>alast_name</any>
      <where xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:Variable" name="alast_name"/>
        <expression xsi:type="amn-exp:BinaryOperator" sign="-->">
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Employee"/>
          <expression xsi:type="amn-exp:FunctionalExpression" sign="seq">
            <expression xsi:type="amn-exp:BinaryOperator" sign="..">
              <expression xsi:type="amn-exp:IntegerValue"/>
              <expression xsi:type="amn-exp:IntegerValue" value="255"/>
            </expression>
          </expression>
        </expression>
      </where>
      <thenPart xsi:type="amn-subst:BecomesEqual">
        <leftExpression xsi:type="amn-exp:Variable" name="last_name"/>
        <rightExpression xsi:type="amn-exp:Variable" name="alast_name"/>
      </thenPart>
    </initialization>
    <initialization xsi:type="amn-subst:BecomesEqual">
      <leftExpression xsi:type="amn-exp:Variable" name="employee"/>
      <rightExpression xsi:type="amn-exp:SetValue"/>
    </initialization>
    <abstractVariables>first_name</abstractVariables>
    <abstractVariables>last_name</abstractVariables>
    <abstractVariables>employee</abstractVariables>
  </amn:Refinement>
  <amn:AbstractMachine name="Specialist" sees="/2" extendsClause="/45">
    <invariant xsi:type="amn-pred:AtomicPredicate" sign=":">
      <expression xsi:type="amn-exp:Variable" name="specialist"/>
      <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
        <expression xsi:type="amn-exp:NamedConstant" name="ext_Specialist"/>
      </expression>
    </invariant>
    <invariant xsi:type="amn-pred:Conjunction">
      <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:NamedConstant" name="research_field"/>
        <expression xsi:type="amn-exp:BinaryOperator" sign="-->">
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Specialist"/>
          <expression xsi:type="amn-exp:NamedConstant" name="Specialist_research_field_Enum"/>
        </expression>
      </predicate>
    </invariant>
    <invariant xsi:type="amn-pred:Conjunction">
      <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:NamedConstant" name="degree"/>
        <expression xsi:type="amn-exp:BinaryOperator" sign="-->">
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Specialist"/>
          <expression xsi:type="amn-exp:NamedConstant" name="Specialist_degree_Enum"/>
        </expression>
      </predicate>
    </invariant>
    <invariant xsi:type="amn-pred:Conjunction">
      <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:NamedConstant" name="field_of_expertise"/>
        <expression xsi:type="amn-exp:BinaryOperator" sign="-->">
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Specialist"/>
          <expression xsi:type="amn-exp:FunctionalExpression" sign="seq">
            <expression xsi:type="amn-exp:BinaryOperator" sign="..">
              <expression xsi:type="amn-exp:IntegerValue"/>
              <expression xsi:type="amn-exp:IntegerValue" value="255"/>
            </expression>
          </expression>
        </expression>
      </predicate>
    </invariant>
    <invariant xsi:type="amn-pred:AtomicPredicate" sign="&lt;:">
      <expression xsi:type="amn-exp:Variable" name="specialist"/>
      <expression xsi:type="amn-exp:Variable" name="employee"/>
    </invariant>
    <initialization xsi:type="amn-subst:Any">
      <any>aresearch_field</any>
      <where xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:Variable" name="aresearch_field"/>
        <expression xsi:type="amn-exp:BinaryOperator" sign="-->">
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Specialist"/>
          <expression xsi:type="amn-exp:NamedConstant" name="Specialist_research_field_Enum"/>
        </expression>
      </where>
      <thenPart xsi:type="amn-subst:BecomesEqual">
        <leftExpression xsi:type="amn-exp:Variable" name="research_field"/>
        <rightExpression xsi:type="amn-exp:Variable" name="aresearch_field"/>
      </thenPart>
    </initialization>
    <initialization xsi:type="amn-subst:Any">
      <any>adegree</any>
      <where xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:Variable" name="adegree"/>
        <expression xsi:type="amn-exp:BinaryOperator" sign="-->">
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Specialist"/>
          <expression xsi:type="amn-exp:NamedConstant" name="Specialist_degree_Enum"/>
        </expression>
      </where>
      <thenPart xsi:type="amn-subst:BecomesEqual">
        <leftExpression xsi:type="amn-exp:Variable" name="degree"/>
        <rightExpression xsi:type="amn-exp:Variable" name="adegree"/>
      </thenPart>
    </initialization>
    <initialization xsi:type="amn-subst:Any">
      <any>afield_of_expertise</any>
      <where xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:Variable" name="afield_of_expertise"/>
        <expression xsi:type="amn-exp:BinaryOperator" sign="-->">
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Specialist"/>
          <expression xsi:type="amn-exp:FunctionalExpression" sign="seq">
            <expression xsi:type="amn-exp:BinaryOperator" sign="..">
              <expression xsi:type="amn-exp:IntegerValue"/>
              <expression xsi:type="amn-exp:IntegerValue" value="255"/>
            </expression>
          </expression>
        </expression>
      </where>
      <thenPart xsi:type="amn-subst:BecomesEqual">
        <leftExpression xsi:type="amn-exp:Variable" name="field_of_expertise"/>
        <rightExpression xsi:type="amn-exp:Variable" name="afield_of_expertise"/>
      </thenPart>
    </initialization>
    <initialization xsi:type="amn-subst:BecomesEqual">
      <leftExpression xsi:type="amn-exp:Variable" name="specialist"/>
      <rightExpression xsi:type="amn-exp:SetValue"/>
    </initialization>
    <operations name="set_research_field">
      <substitution xsi:type="amn-subst:Precondition">
        <pre xsi:type="amn-pred:AtomicPredicate" sign=":">
          <expression xsi:type="amn-exp:Variable" name="sav"/>
          <expression xsi:type="amn-exp:BinaryOperator" sign="+->">
            <expression xsi:type="amn-exp:NamedConstant" name="ext_Specialist"/>
            <expression xsi:type="amn-exp:NamedConstant" name="Specialist_research_field_Enum"/>
          </expression>
        </pre>
        <thenPart xsi:type="amn-subst:BecomesEqual">
          <leftExpression xsi:type="amn-exp:Variable" name="research_field"/>
          <rightExpression xsi:type="amn-exp:BinaryOperator" sign="&lt;+">
            <expression xsi:type="amn-exp:Variable" name="research_field"/>
            <expression xsi:type="amn-exp:Variable" name="sav"/>
          </rightExpression>
        </thenPart>
      </substitution>
      <inputParams>sav</inputParams>
    </operations>
    <operations name="set_degree">
      <substitution xsi:type="amn-subst:Precondition">
        <pre xsi:type="amn-pred:AtomicPredicate" sign=":">
          <expression xsi:type="amn-exp:Variable" name="sav"/>
          <expression xsi:type="amn-exp:BinaryOperator" sign="+->">
            <expression xsi:type="amn-exp:NamedConstant" name="ext_Specialist"/>
            <expression xsi:type="amn-exp:NamedConstant" name="Specialist_degree_Enum"/>
          </expression>
        </pre>
        <thenPart xsi:type="amn-subst:BecomesEqual">
          <leftExpression xsi:type="amn-exp:Variable" name="degree"/>
          <rightExpression xsi:type="amn-exp:BinaryOperator" sign="&lt;+">
            <expression xsi:type="amn-exp:Variable" name="degree"/>
            <expression xsi:type="amn-exp:Variable" name="sav"/>
          </rightExpression>
        </thenPart>
      </substitution>
      <inputParams>sav</inputParams>
    </operations>
    <operations name="set_field_of_expertise">
      <substitution xsi:type="amn-subst:Precondition">
        <pre xsi:type="amn-pred:AtomicPredicate" sign=":">
          <expression xsi:type="amn-exp:Variable" name="sav"/>
          <expression xsi:type="amn-exp:BinaryOperator" sign="+->">
            <expression xsi:type="amn-exp:NamedConstant" name="ext_Specialist"/>
            <expression xsi:type="amn-exp:FunctionalExpression" sign="seq">
              <expression xsi:type="amn-exp:BinaryOperator" sign="..">
                <expression xsi:type="amn-exp:IntegerValue"/>
                <expression xsi:type="amn-exp:IntegerValue" value="255"/>
              </expression>
            </expression>
          </expression>
        </pre>
        <thenPart xsi:type="amn-subst:BecomesEqual">
          <leftExpression xsi:type="amn-exp:Variable" name="field_of_expertise"/>
          <rightExpression xsi:type="amn-exp:BinaryOperator" sign="&lt;+">
            <expression xsi:type="amn-exp:Variable" name="field_of_expertise"/>
            <expression xsi:type="amn-exp:Variable" name="sav"/>
          </rightExpression>
        </thenPart>
      </substitution>
      <inputParams>sav</inputParams>
    </operations>
    <abstractVariables>research_field</abstractVariables>
    <abstractVariables>degree</abstractVariables>
    <abstractVariables>field_of_expertise</abstractVariables>
    <abstractVariables>specialist</abstractVariables>
  </amn:AbstractMachine>
  <amn:AbstractMachine name="MSpecialist" sees="/2"/>
  <amn:Refinement name="SpecialistRef" sees="/2" extendsClause="/45" refines="/49">
    <invariant xsi:type="amn-pred:AtomicPredicate" sign=":">
      <expression xsi:type="amn-exp:Variable" name="specialist"/>
      <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
        <expression xsi:type="amn-exp:NamedConstant" name="ext_Specialist"/>
      </expression>
    </invariant>
    <invariant xsi:type="amn-pred:Conjunction">
      <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:NamedConstant" name="research_field"/>
        <expression xsi:type="amn-exp:BinaryOperator" sign="-->">
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Specialist"/>
          <expression xsi:type="amn-exp:NamedConstant" name="Specialist_research_field_Enum"/>
        </expression>
      </predicate>
    </invariant>
    <invariant xsi:type="amn-pred:Conjunction">
      <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:NamedConstant" name="degree"/>
        <expression xsi:type="amn-exp:BinaryOperator" sign="-->">
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Specialist"/>
          <expression xsi:type="amn-exp:NamedConstant" name="Specialist_degree_Enum"/>
        </expression>
      </predicate>
    </invariant>
    <invariant xsi:type="amn-pred:Conjunction">
      <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:NamedConstant" name="field_of_expertise"/>
        <expression xsi:type="amn-exp:BinaryOperator" sign="-->">
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Specialist"/>
          <expression xsi:type="amn-exp:FunctionalExpression" sign="seq">
            <expression xsi:type="amn-exp:BinaryOperator" sign="..">
              <expression xsi:type="amn-exp:IntegerValue"/>
              <expression xsi:type="amn-exp:IntegerValue" value="255"/>
            </expression>
          </expression>
        </expression>
      </predicate>
    </invariant>
    <invariant xsi:type="amn-pred:AtomicPredicate" sign="&lt;:">
      <expression xsi:type="amn-exp:Variable" name="specialist"/>
      <expression xsi:type="amn-exp:Variable" name="employee"/>
    </invariant>
    <initialization xsi:type="amn-subst:Any">
      <any>aresearch_field</any>
      <where xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:Variable" name="aresearch_field"/>
        <expression xsi:type="amn-exp:BinaryOperator" sign="-->">
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Specialist"/>
          <expression xsi:type="amn-exp:NamedConstant" name="Specialist_research_field_Enum"/>
        </expression>
      </where>
      <thenPart xsi:type="amn-subst:BecomesEqual">
        <leftExpression xsi:type="amn-exp:Variable" name="research_field"/>
        <rightExpression xsi:type="amn-exp:Variable" name="aresearch_field"/>
      </thenPart>
    </initialization>
    <initialization xsi:type="amn-subst:Any">
      <any>adegree</any>
      <where xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:Variable" name="adegree"/>
        <expression xsi:type="amn-exp:BinaryOperator" sign="-->">
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Specialist"/>
          <expression xsi:type="amn-exp:NamedConstant" name="Specialist_degree_Enum"/>
        </expression>
      </where>
      <thenPart xsi:type="amn-subst:BecomesEqual">
        <leftExpression xsi:type="amn-exp:Variable" name="degree"/>
        <rightExpression xsi:type="amn-exp:Variable" name="adegree"/>
      </thenPart>
    </initialization>
    <initialization xsi:type="amn-subst:Any">
      <any>afield_of_expertise</any>
      <where xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:Variable" name="afield_of_expertise"/>
        <expression xsi:type="amn-exp:BinaryOperator" sign="-->">
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Specialist"/>
          <expression xsi:type="amn-exp:FunctionalExpression" sign="seq">
            <expression xsi:type="amn-exp:BinaryOperator" sign="..">
              <expression xsi:type="amn-exp:IntegerValue"/>
              <expression xsi:type="amn-exp:IntegerValue" value="255"/>
            </expression>
          </expression>
        </expression>
      </where>
      <thenPart xsi:type="amn-subst:BecomesEqual">
        <leftExpression xsi:type="amn-exp:Variable" name="field_of_expertise"/>
        <rightExpression xsi:type="amn-exp:Variable" name="afield_of_expertise"/>
      </thenPart>
    </initialization>
    <initialization xsi:type="amn-subst:BecomesEqual">
      <leftExpression xsi:type="amn-exp:Variable" name="specialist"/>
      <rightExpression xsi:type="amn-exp:SetValue"/>
    </initialization>
    <abstractVariables>research_field</abstractVariables>
    <abstractVariables>degree</abstractVariables>
    <abstractVariables>field_of_expertise</abstractVariables>
    <abstractVariables>specialist</abstractVariables>
  </amn:Refinement>
  <amn:AbstractMachine name="Dispatcher" sees="/2">
    <invariant xsi:type="amn-pred:AtomicPredicate" sign=":">
      <expression xsi:type="amn-exp:Variable" name="dispatcher"/>
      <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
        <expression xsi:type="amn-exp:NamedConstant" name="ext_Dispatcher"/>
      </expression>
    </invariant>
    <invariant xsi:type="amn-pred:Conjunction">
      <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:NamedConstant" name="experts"/>
        <expression xsi:type="amn-exp:BinaryOperator" sign="-->">
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Dispatcher"/>
          <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
            <expression xsi:type="amn-exp:NamedConstant" name="ext_Specialist"/>
          </expression>
        </expression>
      </predicate>
    </invariant>
    <invariant xsi:type="amn-pred:Conjunction">
      <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:NamedConstant" name="experts_got"/>
        <expression xsi:type="amn-exp:BinaryOperator" sign="-->">
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Dispatcher"/>
          <expression xsi:type="amn-exp:NamedConstant" name="BOOL"/>
        </expression>
      </predicate>
    </invariant>
    <invariant xsi:type="amn-pred:Conjunction">
      <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:NamedConstant" name="relevant_experts"/>
        <expression xsi:type="amn-exp:BinaryOperator" sign="-->">
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Dispatcher"/>
          <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
            <expression xsi:type="amn-exp:NamedConstant" name="ext_Specialist"/>
          </expression>
        </expression>
      </predicate>
    </invariant>
    <initialization xsi:type="amn-subst:Any">
      <any>aexperts</any>
      <where xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:Variable" name="aexperts"/>
        <expression xsi:type="amn-exp:BinaryOperator" sign="-->">
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Dispatcher"/>
          <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
            <expression xsi:type="amn-exp:NamedConstant" name="ext_Specialist"/>
          </expression>
        </expression>
      </where>
      <thenPart xsi:type="amn-subst:BecomesEqual">
        <leftExpression xsi:type="amn-exp:Variable" name="experts"/>
        <rightExpression xsi:type="amn-exp:Variable" name="aexperts"/>
      </thenPart>
    </initialization>
    <initialization xsi:type="amn-subst:Any">
      <any>aexperts_got</any>
      <where xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:Variable" name="aexperts_got"/>
        <expression xsi:type="amn-exp:BinaryOperator" sign="-->">
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Dispatcher"/>
          <expression xsi:type="amn-exp:NamedConstant" name="BOOL"/>
        </expression>
      </where>
      <thenPart xsi:type="amn-subst:BecomesEqual">
        <leftExpression xsi:type="amn-exp:Variable" name="experts_got"/>
        <rightExpression xsi:type="amn-exp:Variable" name="aexperts_got"/>
      </thenPart>
    </initialization>
    <initialization xsi:type="amn-subst:Any">
      <any>arelevant_experts</any>
      <where xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:Variable" name="arelevant_experts"/>
        <expression xsi:type="amn-exp:BinaryOperator" sign="-->">
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Dispatcher"/>
          <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
            <expression xsi:type="amn-exp:NamedConstant" name="ext_Specialist"/>
          </expression>
        </expression>
      </where>
      <thenPart xsi:type="amn-subst:BecomesEqual">
        <leftExpression xsi:type="amn-exp:Variable" name="relevant_experts"/>
        <rightExpression xsi:type="amn-exp:Variable" name="arelevant_experts"/>
      </thenPart>
    </initialization>
    <initialization xsi:type="amn-subst:BecomesEqual">
      <leftExpression xsi:type="amn-exp:Variable" name="dispatcher"/>
      <rightExpression xsi:type="amn-exp:SetValue"/>
    </initialization>
    <operations name="set_experts">
      <substitution xsi:type="amn-subst:Precondition">
        <pre xsi:type="amn-pred:AtomicPredicate" sign=":">
          <expression xsi:type="amn-exp:Variable" name="sav"/>
          <expression xsi:type="amn-exp:BinaryOperator" sign="+->">
            <expression xsi:type="amn-exp:NamedConstant" name="ext_Dispatcher"/>
            <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
              <expression xsi:type="amn-exp:NamedConstant" name="ext_Specialist"/>
            </expression>
          </expression>
        </pre>
        <thenPart xsi:type="amn-subst:BecomesEqual">
          <leftExpression xsi:type="amn-exp:Variable" name="experts"/>
          <rightExpression xsi:type="amn-exp:BinaryOperator" sign="&lt;+">
            <expression xsi:type="amn-exp:Variable" name="experts"/>
            <expression xsi:type="amn-exp:Variable" name="sav"/>
          </rightExpression>
        </thenPart>
      </substitution>
      <inputParams>sav</inputParams>
    </operations>
    <operations name="set_experts_got">
      <substitution xsi:type="amn-subst:Precondition">
        <pre xsi:type="amn-pred:AtomicPredicate" sign=":">
          <expression xsi:type="amn-exp:Variable" name="sav"/>
          <expression xsi:type="amn-exp:BinaryOperator" sign="+->">
            <expression xsi:type="amn-exp:NamedConstant" name="ext_Dispatcher"/>
            <expression xsi:type="amn-exp:NamedConstant" name="BOOL"/>
          </expression>
        </pre>
        <thenPart xsi:type="amn-subst:BecomesEqual">
          <leftExpression xsi:type="amn-exp:Variable" name="experts_got"/>
          <rightExpression xsi:type="amn-exp:BinaryOperator" sign="&lt;+">
            <expression xsi:type="amn-exp:Variable" name="experts_got"/>
            <expression xsi:type="amn-exp:Variable" name="sav"/>
          </rightExpression>
        </thenPart>
      </substitution>
      <inputParams>sav</inputParams>
    </operations>
    <operations name="set_relevant_experts">
      <substitution xsi:type="amn-subst:Precondition">
        <pre xsi:type="amn-pred:AtomicPredicate" sign=":">
          <expression xsi:type="amn-exp:Variable" name="sav"/>
          <expression xsi:type="amn-exp:BinaryOperator" sign="+->">
            <expression xsi:type="amn-exp:NamedConstant" name="ext_Dispatcher"/>
            <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
              <expression xsi:type="amn-exp:NamedConstant" name="ext_Specialist"/>
            </expression>
          </expression>
        </pre>
        <thenPart xsi:type="amn-subst:BecomesEqual">
          <leftExpression xsi:type="amn-exp:Variable" name="relevant_experts"/>
          <rightExpression xsi:type="amn-exp:BinaryOperator" sign="&lt;+">
            <expression xsi:type="amn-exp:Variable" name="relevant_experts"/>
            <expression xsi:type="amn-exp:Variable" name="sav"/>
          </rightExpression>
        </thenPart>
      </substitution>
      <inputParams>sav</inputParams>
    </operations>
    <abstractVariables>experts</abstractVariables>
    <abstractVariables>experts_got</abstractVariables>
    <abstractVariables>relevant_experts</abstractVariables>
    <abstractVariables>dispatcher</abstractVariables>
  </amn:AbstractMachine>
  <amn:AbstractMachine name="MDispatcher" sees="/2">
    <operations name="get_experts">
      <substitution xsi:type="amn-subst:Precondition">
        <pre xsi:type="amn-pred:AtomicPredicate" sign=":">
          <expression xsi:type="amn-exp:Variable" name="av"/>
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Dispatcher"/>
        </pre>
        <thenPart xsi:type="amn-subst:Identity"/>
      </substitution>
      <inputParams>av</inputParams>
    </operations>
    <operations name="check_expert">
      <substitution xsi:type="amn-subst:Precondition">
        <pre xsi:type="amn-pred:AtomicPredicate" sign=":">
          <expression xsi:type="amn-exp:Variable" name="av"/>
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Dispatcher"/>
        </pre>
        <thenPart xsi:type="amn-subst:Identity"/>
      </substitution>
      <inputParams>av</inputParams>
    </operations>
    <operations name="count_experts">
      <substitution xsi:type="amn-subst:Precondition">
        <pre xsi:type="amn-pred:AtomicPredicate" sign=":">
          <expression xsi:type="amn-exp:Variable" name="av"/>
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Dispatcher"/>
        </pre>
        <thenPart xsi:type="amn-subst:Any">
          <any>number_of_experts1</any>
          <where xsi:type="amn-pred:Conjunction">
            <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
              <expression xsi:type="amn-exp:Variable" name="number_of_experts1"/>
              <expression xsi:type="amn-exp:NamedConstant" name="INTEGER"/>
            </predicate>
          </where>
          <thenPart xsi:type="amn-subst:Simultaneous">
            <substitution xsi:type="amn-subst:BecomesEqual">
              <leftExpression xsi:type="amn-exp:Variable" name="number_of_experts"/>
              <rightExpression xsi:type="amn-exp:Variable" name="number_of_experts1"/>
            </substitution>
          </thenPart>
        </thenPart>
      </substitution>
      <inputParams>av</inputParams>
      <outputParams>number_of_experts</outputParams>
    </operations>
    <operations name="appoint">
      <substitution xsi:type="amn-subst:Precondition">
        <pre xsi:type="amn-pred:AtomicPredicate" sign=":">
          <expression xsi:type="amn-exp:Variable" name="av"/>
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Dispatcher"/>
        </pre>
        <pre xsi:type="amn-pred:AtomicPredicate" sign=":">
          <expression xsi:type="amn-exp:Variable" name="revi"/>
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Evaluation"/>
        </pre>
        <thenPart xsi:type="amn-subst:Identity"/>
      </substitution>
      <inputParams>av</inputParams>
      <inputParams>revi</inputParams>
    </operations>
  </amn:AbstractMachine>
  <amn:Refinement name="DispatcherRef" sees="/2 /33 /48 /42 /39" refines="/52" includes="/42">
    <invariant xsi:type="amn-pred:AtomicPredicate" sign=":">
      <expression xsi:type="amn-exp:Variable" name="dispatcher"/>
      <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
        <expression xsi:type="amn-exp:NamedConstant" name="ext_Dispatcher"/>
      </expression>
    </invariant>
    <invariant xsi:type="amn-pred:Conjunction">
      <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:NamedConstant" name="experts"/>
        <expression xsi:type="amn-exp:BinaryOperator" sign="-->">
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Dispatcher"/>
          <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
            <expression xsi:type="amn-exp:NamedConstant" name="ext_Specialist"/>
          </expression>
        </expression>
      </predicate>
    </invariant>
    <invariant xsi:type="amn-pred:Conjunction">
      <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:NamedConstant" name="experts_got"/>
        <expression xsi:type="amn-exp:BinaryOperator" sign="-->">
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Dispatcher"/>
          <expression xsi:type="amn-exp:NamedConstant" name="BOOL"/>
        </expression>
      </predicate>
    </invariant>
    <invariant xsi:type="amn-pred:Conjunction">
      <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:NamedConstant" name="relevant_experts"/>
        <expression xsi:type="amn-exp:BinaryOperator" sign="-->">
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Dispatcher"/>
          <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
            <expression xsi:type="amn-exp:NamedConstant" name="ext_Specialist"/>
          </expression>
        </expression>
      </predicate>
    </invariant>
    <initialization xsi:type="amn-subst:Any">
      <any>aexperts</any>
      <where xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:Variable" name="aexperts"/>
        <expression xsi:type="amn-exp:BinaryOperator" sign="-->">
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Dispatcher"/>
          <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
            <expression xsi:type="amn-exp:NamedConstant" name="ext_Specialist"/>
          </expression>
        </expression>
      </where>
      <thenPart xsi:type="amn-subst:BecomesEqual">
        <leftExpression xsi:type="amn-exp:Variable" name="experts"/>
        <rightExpression xsi:type="amn-exp:Variable" name="aexperts"/>
      </thenPart>
    </initialization>
    <initialization xsi:type="amn-subst:Any">
      <any>aexperts_got</any>
      <where xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:Variable" name="aexperts_got"/>
        <expression xsi:type="amn-exp:BinaryOperator" sign="-->">
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Dispatcher"/>
          <expression xsi:type="amn-exp:NamedConstant" name="BOOL"/>
        </expression>
      </where>
      <thenPart xsi:type="amn-subst:BecomesEqual">
        <leftExpression xsi:type="amn-exp:Variable" name="experts_got"/>
        <rightExpression xsi:type="amn-exp:Variable" name="aexperts_got"/>
      </thenPart>
    </initialization>
    <initialization xsi:type="amn-subst:Any">
      <any>arelevant_experts</any>
      <where xsi:type="amn-pred:AtomicPredicate" sign=":">
        <expression xsi:type="amn-exp:Variable" name="arelevant_experts"/>
        <expression xsi:type="amn-exp:BinaryOperator" sign="-->">
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Dispatcher"/>
          <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
            <expression xsi:type="amn-exp:NamedConstant" name="ext_Specialist"/>
          </expression>
        </expression>
      </where>
      <thenPart xsi:type="amn-subst:BecomesEqual">
        <leftExpression xsi:type="amn-exp:Variable" name="relevant_experts"/>
        <rightExpression xsi:type="amn-exp:Variable" name="arelevant_experts"/>
      </thenPart>
    </initialization>
    <initialization xsi:type="amn-subst:BecomesEqual">
      <leftExpression xsi:type="amn-exp:Variable" name="dispatcher"/>
      <rightExpression xsi:type="amn-exp:SetValue"/>
    </initialization>
    <operations name="get_experts">
      <substitution xsi:type="amn-subst:Precondition">
        <pre xsi:type="amn-pred:AtomicPredicate" sign=":">
          <expression xsi:type="amn-exp:Variable" name="av"/>
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Dispatcher"/>
        </pre>
        <thenPart xsi:type="amn-subst:Any">
          <any>eff1</any>
          <any>eff2</any>
          <where xsi:type="amn-pred:Conjunction">
            <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
              <expression xsi:type="amn-exp:Variable" name="eff1"/>
              <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
                <expression xsi:type="amn-exp:NamedConstant" name="ext_Specialist"/>
              </expression>
            </predicate>
            <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
              <expression xsi:type="amn-exp:Variable" name="eff2"/>
              <expression xsi:type="amn-exp:NamedConstant" name="BOOL"/>
            </predicate>
            <predicate xsi:type="amn-pred:Conjunction">
              <predicate xsi:type="amn-pred:AtomicPredicate" sign="=">
                <expression xsi:type="amn-exp:Variable" name="eff1"/>
                <expression xsi:type="amn-exp:Variable" name="expert"/>
              </predicate>
              <predicate xsi:type="amn-pred:AtomicPredicate" sign="=">
                <expression xsi:type="amn-exp:Variable" name="eff2"/>
                <expression xsi:type="amn-exp:BooleanValue" value="true"/>
              </predicate>
            </predicate>
          </where>
          <thenPart xsi:type="amn-subst:Simultaneous">
            <substitution xsi:type="amn-subst:BecomesEqual">
              <leftExpression xsi:type="amn-exp:FunctionalExpression" sign="experts">
                <expression xsi:type="amn-exp:Variable" name="av"/>
              </leftExpression>
              <rightExpression xsi:type="amn-exp:Variable" name="eff1"/>
            </substitution>
            <substitution xsi:type="amn-subst:BecomesEqual">
              <leftExpression xsi:type="amn-exp:FunctionalExpression" sign="experts_got">
                <expression xsi:type="amn-exp:Variable" name="av"/>
              </leftExpression>
              <rightExpression xsi:type="amn-exp:Variable" name="eff2"/>
            </substitution>
          </thenPart>
        </thenPart>
      </substitution>
      <inputParams>av</inputParams>
    </operations>
    <operations name="check_expert">
      <substitution xsi:type="amn-subst:Precondition">
        <pre xsi:type="amn-pred:AtomicPredicate" sign=":">
          <expression xsi:type="amn-exp:Variable" name="av"/>
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Dispatcher"/>
        </pre>
        <thenPart xsi:type="amn-subst:Any">
          <any>eff1</any>
          <any>eff2</any>
          <where xsi:type="amn-pred:Conjunction">
            <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
              <expression xsi:type="amn-exp:Variable" name="eff1"/>
              <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
                <expression xsi:type="amn-exp:NamedConstant" name="ext_Specialist"/>
              </expression>
            </predicate>
            <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
              <expression xsi:type="amn-exp:Variable" name="eff2"/>
              <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
                <expression xsi:type="amn-exp:NamedConstant" name="ext_Specialist"/>
              </expression>
            </predicate>
            <predicate xsi:type="amn-pred:Conjunction">
              <predicate xsi:type="amn-pred:Negation">
                <predicate xsi:type="amn-pred:AtomicPredicate" sign="=">
                  <expression xsi:type="amn-exp:FunctionalExpression" sign="experts">
                    <expression xsi:type="amn-exp:Variable" name="av"/>
                  </expression>
                  <expression xsi:type="amn-exp:SetValue"/>
                </predicate>
              </predicate>
              <predicate xsi:type="amn-pred:ExistentialPredicate">
                <predicate xsi:type="amn-pred:Conjunction">
                  <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
                    <expression xsi:type="amn-exp:Variable" name="exp"/>
                    <expression xsi:type="amn-exp:NamedConstant" name="ext_Specialist"/>
                  </predicate>
                  <predicate xsi:type="amn-pred:Conjunction">
                    <predicate xsi:type="amn-pred:Conjunction">
                      <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
                        <expression xsi:type="amn-exp:Variable" name="exp"/>
                        <expression xsi:type="amn-exp:FunctionalExpression" sign="experts">
                          <expression xsi:type="amn-exp:Variable" name="av"/>
                        </expression>
                      </predicate>
                      <predicate xsi:type="amn-pred:Bracketed">
                        <predicate xsi:type="amn-pred:Disjunction">
                          <predicate xsi:type="amn-pred:Bracketed">
                            <predicate xsi:type="amn-pred:Conjunction">
                              <predicate xsi:type="amn-pred:AtomicPredicate" sign="=">
                                <expression xsi:type="amn-exp:FunctionalExpression"
                                    sign="research_field">
                                  <expression xsi:type="amn-exp:Variable" name="exp"/>
                                </expression>
                                <expression xsi:type="amn-exp:Variable" name="computer_science"/>
                              </predicate>
                              <predicate xsi:type="amn-pred:AtomicPredicate" sign="=">
                                <expression xsi:type="amn-exp:Variable" name="eff1"/>
                                <expression xsi:type="amn-exp:BinaryOperator" sign="\/">
                                  <expression xsi:type="amn-exp:FunctionalExpression"
                                      sign="relevant_experts">
                                    <expression xsi:type="amn-exp:Variable" name="av"/>
                                  </expression>
                                  <expression xsi:type="amn-exp:SetValue">
                                    <value xsi:type="amn-exp:Variable" name="exp"/>
                                  </expression>
                                </expression>
                              </predicate>
                            </predicate>
                          </predicate>
                          <predicate xsi:type="amn-pred:Bracketed">
                            <predicate xsi:type="amn-pred:Conjunction">
                              <predicate xsi:type="amn-pred:AtomicPredicate" sign="/=">
                                <expression xsi:type="amn-exp:FunctionalExpression"
                                    sign="research_field">
                                  <expression xsi:type="amn-exp:Variable" name="exp"/>
                                </expression>
                                <expression xsi:type="amn-exp:Variable" name="computer_science"/>
                              </predicate>
                              <predicate xsi:type="amn-pred:AtomicPredicate" sign="=">
                                <expression xsi:type="amn-exp:Variable" name="eff1"/>
                                <expression xsi:type="amn-exp:FunctionalExpression"
                                    sign="relevant_experts">
                                  <expression xsi:type="amn-exp:Variable" name="av"/>
                                </expression>
                              </predicate>
                            </predicate>
                          </predicate>
                        </predicate>
                      </predicate>
                    </predicate>
                    <predicate xsi:type="amn-pred:AtomicPredicate" sign="=">
                      <expression xsi:type="amn-exp:Variable" name="eff2"/>
                      <expression xsi:type="amn-exp:BinaryOperator" sign="-">
                        <expression xsi:type="amn-exp:FunctionalExpression" sign="experts">
                          <expression xsi:type="amn-exp:Variable" name="av"/>
                        </expression>
                        <expression xsi:type="amn-exp:SetValue">
                          <value xsi:type="amn-exp:Variable" name="exp"/>
                        </expression>
                      </expression>
                    </predicate>
                  </predicate>
                </predicate>
                <variable>exp</variable>
              </predicate>
            </predicate>
          </where>
          <thenPart xsi:type="amn-subst:Simultaneous">
            <substitution xsi:type="amn-subst:BecomesEqual">
              <leftExpression xsi:type="amn-exp:FunctionalExpression" sign="relevant_experts">
                <expression xsi:type="amn-exp:Variable" name="av"/>
              </leftExpression>
              <rightExpression xsi:type="amn-exp:Variable" name="eff1"/>
            </substitution>
            <substitution xsi:type="amn-subst:BecomesEqual">
              <leftExpression xsi:type="amn-exp:FunctionalExpression" sign="experts">
                <expression xsi:type="amn-exp:Variable" name="av"/>
              </leftExpression>
              <rightExpression xsi:type="amn-exp:Variable" name="eff2"/>
            </substitution>
          </thenPart>
        </thenPart>
      </substitution>
      <inputParams>av</inputParams>
    </operations>
    <operations name="count_experts">
      <substitution xsi:type="amn-subst:Precondition">
        <pre xsi:type="amn-pred:AtomicPredicate" sign=":">
          <expression xsi:type="amn-exp:Variable" name="av"/>
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Dispatcher"/>
        </pre>
        <thenPart xsi:type="amn-subst:Any">
          <any>eff1</any>
          <any>number_of_experts1</any>
          <where xsi:type="amn-pred:Conjunction">
            <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
              <expression xsi:type="amn-exp:Variable" name="eff1"/>
              <expression xsi:type="amn-exp:NamedConstant" name="BOOL"/>
            </predicate>
            <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
              <expression xsi:type="amn-exp:Variable" name="number_of_experts1"/>
              <expression xsi:type="amn-exp:NamedConstant" name="INTEGER"/>
            </predicate>
            <predicate xsi:type="amn-pred:Conjunction">
              <predicate xsi:type="amn-pred:Conjunction">
                <predicate xsi:type="amn-pred:AtomicPredicate" sign="=">
                  <expression xsi:type="amn-exp:FunctionalExpression" sign="experts">
                    <expression xsi:type="amn-exp:Variable" name="av"/>
                  </expression>
                  <expression xsi:type="amn-exp:SetValue"/>
                </predicate>
                <predicate xsi:type="amn-pred:AtomicPredicate" sign="=">
                  <expression xsi:type="amn-exp:Variable" name="eff1"/>
                  <expression xsi:type="amn-exp:BooleanValue" value="true"/>
                </predicate>
              </predicate>
              <predicate xsi:type="amn-pred:AtomicPredicate" sign="=">
                <expression xsi:type="amn-exp:Variable" name="number_of_experts1"/>
                <expression xsi:type="amn-exp:FunctionalExpression" sign="card">
                  <expression xsi:type="amn-exp:FunctionalExpression" sign="relevant_experts">
                    <expression xsi:type="amn-exp:Variable" name="av"/>
                  </expression>
                </expression>
              </predicate>
            </predicate>
          </where>
          <thenPart xsi:type="amn-subst:Simultaneous">
            <substitution xsi:type="amn-subst:BecomesEqual">
              <leftExpression xsi:type="amn-exp:FunctionalExpression" sign="experts_got">
                <expression xsi:type="amn-exp:Variable" name="av"/>
              </leftExpression>
              <rightExpression xsi:type="amn-exp:Variable" name="eff1"/>
            </substitution>
            <substitution xsi:type="amn-subst:BecomesEqual">
              <leftExpression xsi:type="amn-exp:Variable" name="number_of_experts"/>
              <rightExpression xsi:type="amn-exp:Variable" name="number_of_experts1"/>
            </substitution>
          </thenPart>
        </thenPart>
      </substitution>
      <inputParams>av</inputParams>
      <outputParams>number_of_experts</outputParams>
    </operations>
    <operations name="appoint">
      <substitution xsi:type="amn-subst:Precondition">
        <pre xsi:type="amn-pred:AtomicPredicate" sign=":">
          <expression xsi:type="amn-exp:Variable" name="av"/>
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Dispatcher"/>
        </pre>
        <pre xsi:type="amn-pred:AtomicPredicate" sign=":">
          <expression xsi:type="amn-exp:Variable" name="revi"/>
          <expression xsi:type="amn-exp:NamedConstant" name="ext_Evaluation"/>
        </pre>
        <thenPart xsi:type="amn-subst:Any">
          <any>eff1</any>
          <where xsi:type="amn-pred:Conjunction">
            <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
              <expression xsi:type="amn-exp:Variable" name="eff1"/>
              <expression xsi:type="amn-exp:NamedConstant" name="ext_Expert"/>
            </predicate>
            <predicate xsi:type="amn-pred:Conjunction">
              <predicate xsi:type="amn-pred:Conjunction">
                <predicate xsi:type="amn-pred:AtomicPredicate" sign="=">
                  <expression xsi:type="amn-exp:FunctionalExpression" sign="experts">
                    <expression xsi:type="amn-exp:Variable" name="av"/>
                  </expression>
                  <expression xsi:type="amn-exp:SetValue"/>
                </predicate>
                <predicate xsi:type="amn-pred:Negation">
                  <predicate xsi:type="amn-pred:AtomicPredicate" sign="=">
                    <expression xsi:type="amn-exp:FunctionalExpression" sign="relevant_experts">
                      <expression xsi:type="amn-exp:Variable" name="av"/>
                    </expression>
                    <expression xsi:type="amn-exp:SetValue"/>
                  </predicate>
                </predicate>
              </predicate>
              <predicate xsi:type="amn-pred:Bracketed">
                <predicate xsi:type="amn-pred:Disjunction">
                  <predicate xsi:type="amn-pred:ExistentialPredicate">
                    <predicate xsi:type="amn-pred:Conjunction">
                      <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
                        <expression xsi:type="amn-exp:Variable" name="exp"/>
                        <expression xsi:type="amn-exp:NamedConstant" name="ext_Specialist"/>
                      </predicate>
                      <predicate xsi:type="amn-pred:Conjunction">
                        <predicate xsi:type="amn-pred:Conjunction">
                          <predicate xsi:type="amn-pred:Conjunction">
                            <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
                              <expression xsi:type="amn-exp:Variable" name="exp"/>
                              <expression xsi:type="amn-exp:FunctionalExpression"
                                  sign="relevant_experts">
                                <expression xsi:type="amn-exp:Variable" name="av"/>
                              </expression>
                            </predicate>
                            <predicate xsi:type="amn-pred:AtomicPredicate" sign="=">
                              <expression xsi:type="amn-exp:FunctionalExpression"
                                  sign="field_of_expertise">
                                <expression xsi:type="amn-exp:Variable" name="exp"/>
                              </expression>
                              <expression xsi:type="amn-exp:FunctionalExpression"
                                  sign="field">
                                <expression xsi:type="amn-exp:FunctionalExpression"
                                    sign="subm_ref">
                                  <expression xsi:type="amn-exp:Variable" name="revi"/>
                                </expression>
                              </expression>
                            </predicate>
                          </predicate>
                          <predicate xsi:type="amn-pred:AtomicPredicate" sign="=">
                            <expression xsi:type="amn-exp:FunctionalExpression" sign="degree">
                              <expression xsi:type="amn-exp:Variable" name="exp"/>
                            </expression>
                            <expression xsi:type="amn-exp:Variable" name="PhD"/>
                          </predicate>
                        </predicate>
                        <predicate xsi:type="amn-pred:AtomicPredicate" sign="=">
                          <expression xsi:type="amn-exp:Variable" name="eff1"/>
                          <expression xsi:type="amn-exp:Variable" name="exp"/>
                        </predicate>
                      </predicate>
                    </predicate>
                    <variable>exp</variable>
                  </predicate>
                  <predicate xsi:type="amn-pred:Bracketed">
                    <predicate xsi:type="amn-pred:Conjunction">
                      <predicate xsi:type="amn-pred:UniversalPredicate">
                        <predicate xsi:type="amn-pred:Implication">
                          <predicate xsi:type="amn-pred:Conjunction">
                            <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
                              <expression xsi:type="amn-exp:Variable" name="exp"/>
                              <expression xsi:type="amn-exp:NamedConstant" name="ext_Specialist"/>
                            </predicate>
                          </predicate>
                          <predicate xsi:type="amn-pred:Implication">
                            <predicate xsi:type="amn-pred:Bracketed">
                              <predicate xsi:type="amn-pred:Conjunction">
                                <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
                                  <expression xsi:type="amn-exp:Variable" name="exp"/>
                                  <expression xsi:type="amn-exp:FunctionalExpression"
                                      sign="relevant_experts">
                                    <expression xsi:type="amn-exp:Variable" name="av"/>
                                  </expression>
                                </predicate>
                                <predicate xsi:type="amn-pred:AtomicPredicate" sign="=">
                                  <expression xsi:type="amn-exp:FunctionalExpression"
                                      sign="field_of_expertise">
                                    <expression xsi:type="amn-exp:Variable" name="exp"/>
                                  </expression>
                                  <expression xsi:type="amn-exp:FunctionalExpression"
                                      sign="field">
                                    <expression xsi:type="amn-exp:FunctionalExpression"
                                        sign="subm_ref">
                                      <expression xsi:type="amn-exp:Variable" name="revi"/>
                                    </expression>
                                  </expression>
                                </predicate>
                              </predicate>
                            </predicate>
                            <predicate xsi:type="amn-pred:AtomicPredicate" sign="/=">
                              <expression xsi:type="amn-exp:FunctionalExpression"
                                  sign="degree">
                                <expression xsi:type="amn-exp:Variable" name="exp"/>
                              </expression>
                              <expression xsi:type="amn-exp:Variable" name="PhD"/>
                            </predicate>
                          </predicate>
                        </predicate>
                        <variable>exp</variable>
                      </predicate>
                      <predicate xsi:type="amn-pred:ExistentialPredicate">
                        <predicate xsi:type="amn-pred:Conjunction">
                          <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
                            <expression xsi:type="amn-exp:Variable" name="exp"/>
                            <expression xsi:type="amn-exp:NamedConstant" name="ext_Specialist"/>
                          </predicate>
                          <predicate xsi:type="amn-pred:Conjunction">
                            <predicate xsi:type="amn-pred:Conjunction">
                              <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
                                <expression xsi:type="amn-exp:Variable" name="exp"/>
                                <expression xsi:type="amn-exp:FunctionalExpression"
                                    sign="relevant_experts">
                                  <expression xsi:type="amn-exp:Variable" name="av"/>
                                </expression>
                              </predicate>
                              <predicate xsi:type="amn-pred:AtomicPredicate" sign="=">
                                <expression xsi:type="amn-exp:FunctionalExpression"
                                    sign="field_of_expertise">
                                  <expression xsi:type="amn-exp:Variable" name="exp"/>
                                </expression>
                                <expression xsi:type="amn-exp:FunctionalExpression"
                                    sign="field">
                                  <expression xsi:type="amn-exp:FunctionalExpression"
                                      sign="subm_ref">
                                    <expression xsi:type="amn-exp:Variable" name="revi"/>
                                  </expression>
                                </expression>
                              </predicate>
                            </predicate>
                            <predicate xsi:type="amn-pred:AtomicPredicate" sign="=">
                              <expression xsi:type="amn-exp:Variable" name="eff1"/>
                              <expression xsi:type="amn-exp:Variable" name="exp"/>
                            </predicate>
                          </predicate>
                        </predicate>
                        <variable>exp</variable>
                      </predicate>
                    </predicate>
                  </predicate>
                </predicate>
              </predicate>
            </predicate>
          </where>
          <thenPart xsi:type="amn-subst:Simultaneous">
            <substitution xsi:type="amn-subst:Call">
              <operationName>
                <id>set_by_specialist</id>
              </operationName>
              <actualParam xsi:type="amn-exp:SetValue">
                <value xsi:type="amn-exp:BinaryOperator" sign="|->">
                  <expression xsi:type="amn-exp:Variable" name="revi"/>
                  <expression xsi:type="amn-exp:Variable" name="eff1"/>
                </value>
              </actualParam>
            </substitution>
          </thenPart>
        </thenPart>
      </substitution>
      <inputParams>av</inputParams>
      <inputParams>revi</inputParams>
    </operations>
    <abstractVariables>experts</abstractVariables>
    <abstractVariables>experts_got</abstractVariables>
    <abstractVariables>relevant_experts</abstractVariables>
    <abstractVariables>dispatcher</abstractVariables>
  </amn:Refinement>
  <amn-pred:Conjunction>
    <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
      <expression xsi:type="amn-exp:Variable" name="symmetric"/>
      <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
        <expression xsi:type="amn-exp:BinaryOperator" sign="&lt;->">
          <expression xsi:type="amn-exp:BinaryOperator" sign="\/">
            <expression xsi:type="amn-exp:NamedConstant" name="person"/>
          </expression>
          <expression xsi:type="amn-exp:BinaryOperator" sign="\/">
            <expression xsi:type="amn-exp:NamedConstant" name="person"/>
          </expression>
        </expression>
      </expression>
    </predicate>
    <predicate xsi:type="amn-pred:AtomicPredicate" sign="=">
      <expression xsi:type="amn-exp:Variable" name="symmetric"/>
      <expression xsi:type="amn-exp:SetComprehension">
        <variable>av</variable>
        <predicate xsi:type="amn-pred:Conjunction">
          <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
            <expression xsi:type="amn-exp:Variable" name="av"/>
            <expression xsi:type="amn-exp:BinaryOperator" sign="&lt;->">
              <expression xsi:type="amn-exp:BinaryOperator" sign="\/">
                <expression xsi:type="amn-exp:NamedConstant" name="person"/>
              </expression>
              <expression xsi:type="amn-exp:BinaryOperator" sign="\/">
                <expression xsi:type="amn-exp:NamedConstant" name="person"/>
              </expression>
            </expression>
          </predicate>
          <predicate xsi:type="amn-pred:UniversalPredicate">
            <predicate xsi:type="amn-pred:Implication">
              <predicate xsi:type="amn-pred:Conjunction">
                <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
                  <expression xsi:type="amn-exp:Variable" name="s1"/>
                  <expression xsi:type="amn-exp:NamedConstant" name="ext_Person"/>
                </predicate>
                <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
                  <expression xsi:type="amn-exp:Variable" name="s2"/>
                  <expression xsi:type="amn-exp:NamedConstant" name="ext_Person"/>
                </predicate>
              </predicate>
              <predicate xsi:type="amn-pred:Implication">
                <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
                  <expression xsi:type="amn-exp:BinaryOperator" sign="|->">
                    <expression xsi:type="amn-exp:Variable" name="s1"/>
                    <expression xsi:type="amn-exp:Variable" name="s2"/>
                  </expression>
                  <expression xsi:type="amn-exp:Variable" name="av"/>
                </predicate>
                <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
                  <expression xsi:type="amn-exp:BinaryOperator" sign="|->">
                    <expression xsi:type="amn-exp:Variable" name="s2"/>
                    <expression xsi:type="amn-exp:Variable" name="s1"/>
                  </expression>
                  <expression xsi:type="amn-exp:Variable" name="av"/>
                </predicate>
              </predicate>
            </predicate>
            <variable>s1</variable>
            <variable>s2</variable>
          </predicate>
          <predicate xsi:type="amn-pred:UniversalPredicate">
            <predicate xsi:type="amn-pred:Implication">
              <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
                <expression xsi:type="amn-exp:Variable" name="rr"/>
                <expression xsi:type="amn-exp:BinaryOperator" sign="\/">
                  <expression xsi:type="amn-exp:NamedConstant" name="person"/>
                </expression>
              </predicate>
              <predicate xsi:type="amn-pred:Conjunction">
                <predicate xsi:type="amn-pred:AtomicPredicate" sign=">=">
                  <expression xsi:type="amn-exp:FunctionalExpression" sign="card">
                    <expression xsi:type="amn-exp:SetComprehension">
                      <variable>dd</variable>
                      <predicate xsi:type="amn-pred:Conjunction">
                        <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
                          <expression xsi:type="amn-exp:Variable" name="dd"/>
                          <expression xsi:type="amn-exp:BinaryOperator" sign="\/">
                            <expression xsi:type="amn-exp:NamedConstant" name="person"/>
                          </expression>
                        </predicate>
                        <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
                          <expression xsi:type="amn-exp:BinaryOperator" sign="|->">
                            <expression xsi:type="amn-exp:Variable" name="dd"/>
                            <expression xsi:type="amn-exp:Variable" name="rr"/>
                          </expression>
                          <expression xsi:type="amn-exp:Variable" name="av"/>
                        </predicate>
                      </predicate>
                    </expression>
                  </expression>
                  <expression xsi:type="amn-exp:IntegerValue"/>
                </predicate>
              </predicate>
            </predicate>
            <variable>rr</variable>
          </predicate>
          <predicate xsi:type="amn-pred:UniversalPredicate">
            <predicate xsi:type="amn-pred:Implication">
              <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
                <expression xsi:type="amn-exp:Variable" name="dd"/>
                <expression xsi:type="amn-exp:BinaryOperator" sign="\/">
                  <expression xsi:type="amn-exp:NamedConstant" name="person"/>
                </expression>
              </predicate>
              <predicate xsi:type="amn-pred:Conjunction">
                <predicate xsi:type="amn-pred:AtomicPredicate" sign=">=">
                  <expression xsi:type="amn-exp:FunctionalExpression" sign="card">
                    <expression xsi:type="amn-exp:SetComprehension">
                      <variable>rr</variable>
                      <predicate xsi:type="amn-pred:Conjunction">
                        <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
                          <expression xsi:type="amn-exp:Variable" name="rr"/>
                          <expression xsi:type="amn-exp:BinaryOperator" sign="\/">
                            <expression xsi:type="amn-exp:NamedConstant" name="person"/>
                          </expression>
                        </predicate>
                        <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
                          <expression xsi:type="amn-exp:BinaryOperator" sign="|->">
                            <expression xsi:type="amn-exp:Variable" name="dd"/>
                            <expression xsi:type="amn-exp:Variable" name="rr"/>
                          </expression>
                          <expression xsi:type="amn-exp:Variable" name="av"/>
                        </predicate>
                      </predicate>
                    </expression>
                  </expression>
                  <expression xsi:type="amn-exp:IntegerValue"/>
                </predicate>
              </predicate>
            </predicate>
            <variable>dd</variable>
          </predicate>
        </predicate>
      </expression>
    </predicate>
  </amn-pred:Conjunction>
  <amn-pred:Conjunction>
    <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
      <expression xsi:type="amn-exp:Variable" name="symmetric"/>
      <expression xsi:type="amn-exp:FunctionalExpression" sign="POW">
        <expression xsi:type="amn-exp:BinaryOperator" sign="&lt;->">
          <expression xsi:type="amn-exp:BinaryOperator" sign="\/">
            <expression xsi:type="amn-exp:NamedConstant" name="person"/>
          </expression>
          <expression xsi:type="amn-exp:BinaryOperator" sign="\/">
            <expression xsi:type="amn-exp:NamedConstant" name="person"/>
          </expression>
        </expression>
      </expression>
    </predicate>
    <predicate xsi:type="amn-pred:AtomicPredicate" sign="=">
      <expression xsi:type="amn-exp:Variable" name="symmetric"/>
      <expression xsi:type="amn-exp:SetComprehension">
        <variable>av</variable>
        <predicate xsi:type="amn-pred:Conjunction">
          <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
            <expression xsi:type="amn-exp:Variable" name="av"/>
            <expression xsi:type="amn-exp:BinaryOperator" sign="&lt;->">
              <expression xsi:type="amn-exp:BinaryOperator" sign="\/">
                <expression xsi:type="amn-exp:NamedConstant" name="person"/>
              </expression>
              <expression xsi:type="amn-exp:BinaryOperator" sign="\/">
                <expression xsi:type="amn-exp:NamedConstant" name="person"/>
              </expression>
            </expression>
          </predicate>
          <predicate xsi:type="amn-pred:UniversalPredicate">
            <predicate xsi:type="amn-pred:Implication">
              <predicate xsi:type="amn-pred:Conjunction">
                <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
                  <expression xsi:type="amn-exp:Variable" name="s1"/>
                  <expression xsi:type="amn-exp:NamedConstant" name="ext_Person"/>
                </predicate>
                <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
                  <expression xsi:type="amn-exp:Variable" name="s2"/>
                  <expression xsi:type="amn-exp:NamedConstant" name="ext_Person"/>
                </predicate>
              </predicate>
              <predicate xsi:type="amn-pred:Implication">
                <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
                  <expression xsi:type="amn-exp:BinaryOperator" sign="|->">
                    <expression xsi:type="amn-exp:Variable" name="s1"/>
                    <expression xsi:type="amn-exp:Variable" name="s2"/>
                  </expression>
                  <expression xsi:type="amn-exp:Variable" name="av"/>
                </predicate>
                <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
                  <expression xsi:type="amn-exp:BinaryOperator" sign="|->">
                    <expression xsi:type="amn-exp:Variable" name="s2"/>
                    <expression xsi:type="amn-exp:Variable" name="s1"/>
                  </expression>
                  <expression xsi:type="amn-exp:Variable" name="av"/>
                </predicate>
              </predicate>
            </predicate>
            <variable>s1</variable>
            <variable>s2</variable>
          </predicate>
          <predicate xsi:type="amn-pred:UniversalPredicate">
            <predicate xsi:type="amn-pred:Implication">
              <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
                <expression xsi:type="amn-exp:Variable" name="rr"/>
                <expression xsi:type="amn-exp:BinaryOperator" sign="\/">
                  <expression xsi:type="amn-exp:NamedConstant" name="person"/>
                </expression>
              </predicate>
              <predicate xsi:type="amn-pred:Conjunction">
                <predicate xsi:type="amn-pred:AtomicPredicate" sign=">=">
                  <expression xsi:type="amn-exp:FunctionalExpression" sign="card">
                    <expression xsi:type="amn-exp:SetComprehension">
                      <variable>dd</variable>
                      <predicate xsi:type="amn-pred:Conjunction">
                        <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
                          <expression xsi:type="amn-exp:Variable" name="dd"/>
                          <expression xsi:type="amn-exp:BinaryOperator" sign="\/">
                            <expression xsi:type="amn-exp:NamedConstant" name="person"/>
                          </expression>
                        </predicate>
                        <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
                          <expression xsi:type="amn-exp:BinaryOperator" sign="|->">
                            <expression xsi:type="amn-exp:Variable" name="dd"/>
                            <expression xsi:type="amn-exp:Variable" name="rr"/>
                          </expression>
                          <expression xsi:type="amn-exp:Variable" name="av"/>
                        </predicate>
                      </predicate>
                    </expression>
                  </expression>
                  <expression xsi:type="amn-exp:IntegerValue"/>
                </predicate>
              </predicate>
            </predicate>
            <variable>rr</variable>
          </predicate>
          <predicate xsi:type="amn-pred:UniversalPredicate">
            <predicate xsi:type="amn-pred:Implication">
              <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
                <expression xsi:type="amn-exp:Variable" name="dd"/>
                <expression xsi:type="amn-exp:BinaryOperator" sign="\/">
                  <expression xsi:type="amn-exp:NamedConstant" name="person"/>
                </expression>
              </predicate>
              <predicate xsi:type="amn-pred:Conjunction">
                <predicate xsi:type="amn-pred:AtomicPredicate" sign=">=">
                  <expression xsi:type="amn-exp:FunctionalExpression" sign="card">
                    <expression xsi:type="amn-exp:SetComprehension">
                      <variable>rr</variable>
                      <predicate xsi:type="amn-pred:Conjunction">
                        <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
                          <expression xsi:type="amn-exp:Variable" name="rr"/>
                          <expression xsi:type="amn-exp:BinaryOperator" sign="\/">
                            <expression xsi:type="amn-exp:NamedConstant" name="person"/>
                          </expression>
                        </predicate>
                        <predicate xsi:type="amn-pred:AtomicPredicate" sign=":">
                          <expression xsi:type="amn-exp:BinaryOperator" sign="|->">
                            <expression xsi:type="amn-exp:Variable" name="dd"/>
                            <expression xsi:type="amn-exp:Variable" name="rr"/>
                          </expression>
                          <expression xsi:type="amn-exp:Variable" name="av"/>
                        </predicate>
                      </predicate>
                    </expression>
                  </expression>
                  <expression xsi:type="amn-exp:IntegerValue"/>
                </predicate>
              </predicate>
            </predicate>
            <variable>dd</variable>
          </predicate>
        </predicate>
      </expression>
    </predicate>
  </amn-pred:Conjunction>
  <amn-exp:Variable name="s1"/>
  <amn-exp:Variable name="s2"/>
  <amn-exp:Variable name="degree"/>
  <amn-exp:Variable name="ss"/>
  <amn-exp:Variable name="tt"/>
  <amn-exp:Variable name="biology"/>
  <amn-exp:Variable name="xx"/>
  <amn-exp:Variable name="yy"/>
  <amn-exp:Variable name="xx"/>
  <amn-exp:Variable name="exp"/>
  <amn-exp:Variable name="research_area"/>
  <amn-exp:Variable name="available_experts"/>
  <amn-exp:Variable name="exps"/>
  <amn-exp:Variable name="available_experts"/>
  <amn-exp:Variable name="available_experts"/>
  <amn-exp:Variable name="area_of_expertise"/>
  <amn-exp:Variable name="revi"/>
  <amn-exp:Variable name="for_proposal"/>
  <amn-exp:Variable name="area"/>
  <amn-exp:Variable name="by_expert"/>
  <amn-exp:Variable name="exp"/>
  <amn-exp:Variable name="experts"/>
  <amn-exp:Variable name="experts_got"/>
  <amn-exp:Variable name="experts"/>
  <amn-exp:Variable name="experts"/>
  <amn-exp:Variable name="research_field"/>
  <amn-exp:Variable name="relevant_experts"/>
  <amn-exp:Variable name="relevant_experts"/>
  <amn-exp:Variable name="research_field"/>
  <amn-exp:Variable name="relevant_experts"/>
  <amn-exp:Variable name="relevant_experts"/>
  <amn-exp:Variable name="experts"/>
  <amn-exp:Variable name="experts"/>
  <amn-exp:Variable name="exp"/>
  <amn-exp:Variable name="experts"/>
  <amn-exp:Variable name="experts_got"/>
  <amn-exp:Variable name="relevant_experts"/>
  <amn-exp:Variable name="experts"/>
  <amn-exp:Variable name="relevant_experts"/>
  <amn-exp:Variable name="relevant_experts"/>
  <amn-exp:Variable name="field_of_expertise"/>
  <amn-exp:Variable name="revi"/>
  <amn-exp:Variable name="subm_ref"/>
  <amn-exp:Variable name="field"/>
  <amn-exp:Variable name="degree"/>
  <amn-exp:Variable name="by_specialist"/>
  <amn-exp:Variable name="exp"/>
  <amn-exp:Variable name="relevant_experts"/>
  <amn-exp:Variable name="field_of_expertise"/>
  <amn-exp:Variable name="revi"/>
  <amn-exp:Variable name="subm_ref"/>
  <amn-exp:Variable name="field"/>
  <amn-exp:Variable name="degree"/>
  <amn-exp:Variable name="exp"/>
  <amn-exp:Variable name="relevant_experts"/>
  <amn-exp:Variable name="field_of_expertise"/>
  <amn-exp:Variable name="revi"/>
  <amn-exp:Variable name="subm_ref"/>
  <amn-exp:Variable name="field"/>
  <amn-exp:Variable name="by_specialist"/>
  <amn-exp:Variable name="exp"/>
  <amn-exp:IntegerValue value="1"/>
  <amn-exp:FunctionalExpression sign="by_expert"/>
  <amn-exp:FunctionalExpression sign="relevant_experts">
    <expression xsi:type="amn-exp:Variable" name="av"/>
  </amn-exp:FunctionalExpression>
  <amn-exp:FunctionalExpression sign="by_specialist"/>
  <amn-exp:FunctionalExpression sign="by_specialist">
    <expression xsi:type="amn-exp:Variable" name="revi"/>
  </amn-exp:FunctionalExpression>
  <amn-subst:Identity/>
  <amn-subst:Identity/>
  <amn-subst:Any>
    <where xsi:type="amn-pred:Conjunction"/>
    <thenPart xsi:type="amn-subst:Simultaneous"/>
  </amn-subst:Any>
  <amn-subst:Any>
    <where xsi:type="amn-pred:Conjunction"/>
    <thenPart xsi:type="amn-subst:Simultaneous"/>
  </amn-subst:Any>
  <amn-subst:Any>
    <where xsi:type="amn-pred:Conjunction"/>
    <thenPart xsi:type="amn-subst:Simultaneous"/>
  </amn-subst:Any>
  <amn-subst:Identity/>
  <amn-subst:Any>
    <where xsi:type="amn-pred:Conjunction"/>
    <thenPart xsi:type="amn-subst:Simultaneous"/>
  </amn-subst:Any>
  <amn-pred:AtomicPredicate sign=":">
    <expression xsi:type="amn-exp:Variable" name="aa1"/>
    <expression xsi:type="amn-exp:NamedConstant" name="INTEGER"/>
  </amn-pred:AtomicPredicate>
  <amn-subst:BecomesEqual>
    <leftExpression xsi:type="amn-exp:Variable" name="aa"/>
    <rightExpression xsi:type="amn-exp:Variable" name="aa1"/>
  </amn-subst:BecomesEqual>
  <amn-pred:AtomicPredicate sign=":">
    <expression xsi:type="amn-exp:Variable" name="aa1"/>
    <expression xsi:type="amn-exp:NamedConstant" name="INTEGER"/>
  </amn-pred:AtomicPredicate>
  <amn-subst:BecomesEqual>
    <leftExpression xsi:type="amn-exp:Variable" name="aa"/>
    <rightExpression xsi:type="amn-exp:Variable" name="aa1"/>
  </amn-subst:BecomesEqual>
  <amn-subst:BecomesEqual>
    <leftExpression xsi:type="amn-exp:Variable" name="ii"/>
    <rightExpression xsi:type="amn-exp:Variable" name="ii1"/>
  </amn-subst:BecomesEqual>
  <amn-subst:BecomesEqual>
    <leftExpression xsi:type="amn-exp:Variable" name="ii"/>
    <rightExpression xsi:type="amn-exp:Variable" name="ii1"/>
  </amn-subst:BecomesEqual>
  <amn-subst:BecomesEqual>
    <leftExpression xsi:type="amn-exp:Variable" name="bb"/>
    <rightExpression xsi:type="amn-exp:Variable" name="bb1"/>
  </amn-subst:BecomesEqual>
  <amn-subst:BecomesEqual>
    <leftExpression xsi:type="amn-exp:Variable" name="bb"/>
    <rightExpression xsi:type="amn-exp:Variable" name="bb1"/>
  </amn-subst:BecomesEqual>
  <amn-subst:BecomesEqual>
    <leftExpression xsi:type="amn-exp:Variable" name="pp"/>
    <rightExpression xsi:type="amn-exp:Variable" name="pp1"/>
  </amn-subst:BecomesEqual>
  <amn-subst:BecomesEqual>
    <leftExpression xsi:type="amn-exp:Variable" name="pp"/>
    <rightExpression xsi:type="amn-exp:Variable" name="pp1"/>
  </amn-subst:BecomesEqual>
  <amn-subst:BecomesEqual>
    <leftExpression xsi:type="amn-exp:Variable" name="st"/>
    <rightExpression xsi:type="amn-exp:Variable" name="st1"/>
  </amn-subst:BecomesEqual>
  <amn-subst:BecomesEqual>
    <leftExpression xsi:type="amn-exp:Variable" name="st"/>
    <rightExpression xsi:type="amn-exp:Variable" name="st1"/>
  </amn-subst:BecomesEqual>
  <amn-subst:BecomesEqual>
    <leftExpression xsi:type="amn-exp:Variable" name="revi"/>
    <rightExpression xsi:type="amn-exp:Variable" name="revi1"/>
  </amn-subst:BecomesEqual>
  <amn-subst:BecomesEqual>
    <leftExpression xsi:type="amn-exp:Variable" name="revi"/>
    <rightExpression xsi:type="amn-exp:Variable" name="revi1"/>
  </amn-subst:BecomesEqual>
  <amn-subst:BecomesEqual>
    <leftExpression xsi:type="amn-exp:Variable" name="revi"/>
    <rightExpression xsi:type="amn-exp:Variable" name="revi1"/>
  </amn-subst:BecomesEqual>
  <amn-subst:BecomesEqual>
    <leftExpression xsi:type="amn-exp:Variable" name="revi"/>
    <rightExpression xsi:type="amn-exp:Variable" name="revi1"/>
  </amn-subst:BecomesEqual>
</xmi:XMI>
