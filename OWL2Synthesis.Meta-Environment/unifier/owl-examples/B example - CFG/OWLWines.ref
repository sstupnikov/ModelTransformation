REFINEMENT        OWLWines

REFINES           CanonicalWines

SEES

  WinesContext

VARIABLES         

  Wine, IceWine, DessertWine, 
  hasColor, hasSugar, hasFlavor

INVARIANT         

  Wine: POW(Ind) & IceWine: POW(Ind) & DessertWine: POW(Ind) &
  DessertWine <: Wine &

  hasColor: Wine <-> WineColor &
  !(wine).(wine: Wine => card(hasColor[{wine}]) = 1 ) &

  hasSugar: Wine <-> WineSugar &
  !(wine).(wine: Wine => card(hasSugar[{wine}]) = 1 ) &

  hasFlavor: Wine <-> WineFlavor &
  !(wine).(wine: Wine => card(hasFlavor[{wine}]) = 1 ) &

  ran(IceWine <| hasFlavor) = {Strong, Moderate} &

  ran(DessertWine <| hasSugar) = {OffDry, Sweet} &

  IceWine = DessertWine /\ {xx | xx: dom(hasColor) & hasColor(xx) = White  } 


  &
  

  Wine = wine & DessertWine = dessertWine & IceWine = iceWine &
  !(ind, val).(ind: Ind & val: WineColor => 
                  ((hasColor(ind) = val) <=> (hasColorCan(ind) = val))) &
  !(ind, val).(ind: Ind & val: WineSugar => 
                  ((hasSugar(ind) = val) <=> (hasSugarCan(ind) = val))) &
  !(ind, val).(ind: Ind & val: WineFlavor => 
                  ((hasFlavor(ind) = val) <=> (hasFlavorCan(ind) = val))) 


INITIALISATION

Wine:= {} 
||
IceWine:= {}
||
DessertWine:= {}
||
hasColor:= {}
||
hasSugar:= {}
||
hasFlavor:= {}
 

OPERATIONS

include_Wine(ind, color, flavor, sugar)=
PRE ind: Ind & color: WineColor & flavor: WineFlavor & sugar: WineSugar
THEN
 hasColor(ind):= color;
 hasFlavor(ind):= flavor;
 hasSugar(ind):= sugar;
 Wine:= Wine \/ {ind}
END;
  
include_IceWine(ind, color, flavor, sugar)=
PRE ind: Ind & color: WineColor & flavor: WineFlavor & sugar: WineSugar &
    flavor: {Strong, Moderate} & color = White
THEN
 hasColor(ind):= color;
 hasFlavor(ind):= flavor;
 hasSugar(ind):= sugar;
 IceWine:= IceWine \/ {ind};
 DessertWine:= DessertWine \/ {ind};
 Wine:= Wine \/ {ind}
END;

include_DessertWine(ind, color, flavor, sugar)=
PRE ind: Ind & color: WineColor & flavor: WineFlavor & sugar: WineSugar &
    sugar: {OffDry, Sweet}
THEN
 hasColor(ind):= color;
 hasFlavor(ind):= flavor;
 hasSugar(ind):= sugar;
 DessertWine:= DessertWine \/ {ind};
 Wine:= Wine \/ {ind}
END;

set_hasColor(ind, val)=
PRE ind: Wine & val: WineColor &
    (ind: IceWine => val = White)
THEN
 hasColor(ind):= val 
END;

set_hasSugar(ind, val)=
PRE ind: Wine & val: WineSugar &
    (ind: DessertWine => val: {OffDry, Sweet})
THEN
 hasSugar(ind):= val 
END;


set_hasFlavor(ind, val)=
PRE ind: Wine & val: WineFlavor &
    (ind: IceWine => val: {Strong, Moderate})
THEN
 hasFlavor(ind):= val
END

END
