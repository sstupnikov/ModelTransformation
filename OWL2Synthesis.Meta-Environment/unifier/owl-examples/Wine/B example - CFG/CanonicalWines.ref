REFINEMENT        CanonicalWines

REFINES           AbstractWines

SEES
  WinesContext

CONSTANTS 
  ext_Wine, ext_DessertWine, ext_IceWine
  
PROPERTIES
  ext_Wine: POW(Obj) & ext_DessertWine: POW(Obj) & ext_IceWine: POW(Obj) &
  ext_DessertWine <: ext_Wine & ext_IceWine <: ext_DessertWine

VARIABLES         
  wine, iceWine, dessertWine, 
  hasColorCan, hasFlavorCan, hasSugarCan  

INVARIANT         
  wine: POW(ext_Wine) & iceWine: POW(ext_IceWine) & dessertWine: POW(ext_DessertWine) &
  dessertWine <: wine &
  hasColorCan: ext_Wine --> WineColor &
  hasSugarCan: ext_Wine --> WineSugar &
  hasFlavorCan: ext_Wine --> WineFlavor &

  !(wine).(wine: ext_IceWine =>  hasFlavorCan(wine):  {Strong, Moderate}) &
  !(wine).(wine: ext_DessertWine => hasSugarCan(wine):  {OffDry, Sweet}) &
  iceWine = dessertWine /\ {ww | ww: wine & hasColorCan(ww) = White} 
      

INITIALISATION    

wine:= {} 
||
iceWine:= {}
||
dessertWine:= {}
||
hasColorCan:= {}
||
hasSugarCan:= {}
||
hasFlavorCan:= {}
 

OPERATIONS

include_Wine(ind, color, flavor, sugar)=
PRE ind: Ind & color: WineColor & flavor: WineFlavor & sugar: WineSugar
THEN
 hasColorCan(ind):= color;
 hasSugarCan(ind):= sugar;
 hasFlavorCan(ind):= flavor;
 wine:= wine \/ {ind}
END;
  
include_IceWine(ind, color, flavor, sugar)=
PRE ind: Ind & color: WineColor & flavor: WineFlavor & sugar: WineSugar &
    flavor: {Strong, Moderate} & color = White
THEN
 hasColorCan(ind):= color;
 hasSugarCan(ind):= sugar;
 hasFlavorCan(ind):= flavor;
 iceWine:= iceWine \/ {ind};
 dessertWine:= dessertWine \/ {ind};
 wine:= wine \/ {ind}
END;

include_DessertWine(ind, color, flavor, sugar)=
PRE ind: Ind & color: WineColor & flavor: WineFlavor & sugar: WineSugar &
    sugar: {OffDry, Sweet}
THEN
 hasColorCan(ind):= color;
 hasSugarCan(ind):= sugar;
 hasFlavorCan(ind):= flavor;
 dessertWine:= dessertWine \/ {ind};
 wine:= wine \/ {ind}
END;

set_hasColor(ind, val)=
PRE ind: wine & val: WineColor &
    (ind: iceWine => val = White)
THEN
 hasColorCan(ind):= val 
END;

set_hasSugar(ind, val)=
PRE ind: wine & val: WineSugar &
    (ind: dessertWine => val: {OffDry, Sweet})
THEN
 hasSugarCan(ind):= val 
END;


set_hasFlavor(ind, val)=
PRE ind: wine & val: WineFlavor &
    (ind: iceWine => val: {Strong, Moderate})
THEN
 hasFlavorCan(ind):= val
END

END
