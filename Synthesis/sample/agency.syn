{ FundingAgencySchema; in: schema;

class_specification:
{ component; in: metaclass;
},
{ structure; in: metaclass;
}
;

}

{ FundingAgency; in: module, component;
  params: {a/integer};
  import: FundingAgency_structure;
  schema:  FundingAgencySchema;
}


{ FundingAgency_structure; in: module, structure;
  schema:  FundingAgencySchema;
  
type:

{ Teacher; in: type;
  supertypes: Specialist;
	teaches: {set; type_of_element: Student;};
	metaslot 
		card_numb: 15;
		in: teachesAM;	
		inverse: isTaughtBy;	 
	end
},

{ Student; in: type;
  isTaughtBy: {set; type_of_element: Teacher;}; 
  grade: integer;
  metaslot init: 1; end 
},



{ Proposal; 
  in:type;
  
  area: string;  
},

{Review; 
 in: type;

 for_proposal: Proposal;
 by_expert:Expert; 
},

{ Person;
  in: type; 
  
  name: string;
  
  
  
},


{ Researcher; 
  in: type; 
  supertypes: Person;
  
  research_area: {enum; enum_list: { computer_science; mathematics; biology; chemistry } };
  metaslot init: biology;  end
  
  e: 
  { in: function; params: {+i/integer, +b/Boolean, -s/string, +p/Person, +st/{set; type_of_element: Person;}};
   { predicative:
     {  (1=2) & all x/Researcher, y/Researcher ( (x=y) ) /* & ( (a < b) & ^(same(d, e))  ) &
        ( researcher(v/Person) | person(w) )  & is_in(person, j) &
        (s < m) & ( 1  <= true) & ( "ACM" lt q ) & ({(1, 2)} le [1, 2]) & 
        ({v/Person | person(v) } ne u) & (v eq w) &
        (1 + 2 < 2*3) & (4 - cardinal(1) = 3%1 ) & (uni(x, intersect(y, differ(z, (a)))) = {()})  &
        (p.name~ = 2) & (r.for_proposal.area = chemistry) */  
     }
   };      
  };    
},

{ Expert; 
  in: type; 
  supertypes: Researcher;
  
  area_of_expertise: string;
  
  invExp: 
  { in: invariant;
   { predicative:
     { all x/Specialist((dispatcher(x) & specialist(x)))         
     }
   };      
  };  
},

{ Secretary;
  in: type;

  available_experts: {set; type_of_element: Expert;};

  search_for_experts: 
  { in: function; params: {-number_of_experts/integer};
   { predicative:
     { ex exps/{set; type_of_element: Expert;}(
         	(exps = { exp/Expert | is_in(expert, exp) & (exp.research_area = computer_science) }) & 
         	(this.available_experts~ = exps) & 
         	(number_of_experts = card(exps)
         )
       )         
     }
   };      
  };

  dispatch: 
  { in: function; params: { +revi/Review };
    { predicative:
      { 
         ^is_empty(this.available_experts) &
         ex exp/Expert (is_in(this.available_experts, exp) & 
            (exp.area_of_expertise = revi.for_proposal.area) &
            (revi.by_expert~ = exp) )
      }
    };  
  
  };   

},

{ Submission;
  in: type;
  
  field: string;
},

{ Evaluation;

  in: type;
  
  subm_ref: Submission;
  by_specialist: Expert;
},

{ Employee;
  in: type; 
  
  first_name: string;
  last_name: string;  
},


{ Specialist; 
  in: type; 
  supertypes: Employee;
  
  research_field: {enum; enum_list: { computer_science; mathematics; biology; chemistry } };
  degree: {enum; enum_list: {PhD; DrSc; MSc} };
  field_of_expertise: string;
},

{ Dispatcher;
  in: type;
   
  experts: {set; type_of_element: Specialist;};
  experts_got: Boolean;
  relevant_experts: {set; type_of_element: Specialist;};
  
  get_experts: 
  { in: function; 
    { predicative:
      {  (this.experts~ = expert) & (this.experts_got~ = true)  }
    }; 
  };
  
  check_expert: 
  { in: function;
    { predicative:
      { ^is_empty(this.experts) & 
         ex exp/Specialist( is_in(this.experts, exp) &
            ( ( (exp.research_field = computer_science) & 
               (this.relevant_experts~ = uni(this.relevant_experts, {(exp)})) ) |
              (  (exp.research_field <> computer_science) &
                 (this.relevant_experts~ = this.relevant_experts) )
            ) &
          (this.experts~ = differ(this.experts, {(exp)})) )
      }
     };
    };
    
    count_experts: 
    {in: function;
     params: {-number_of_experts/integer};
     { predicative: 
       { is_empty(this.experts) & (this.experts_got~ = true) &
          (number_of_experts = cardinal(this.relevant_experts)) 
       }
     };   
    };
    
    appoint: {in: function;
     params: { +revi/Evaluation };
     { predicative:     
       { is_empty(this.experts) & ^is_empty(this.relevant_experts) &
          ( ex exp/Specialist(is_in(this.relevant_experts, exp) & 
                            (exp.field_of_expertise = revi.subm_ref.field) & 
                            (exp.degree = PhD) & (revi.by_specialist~ = exp) )                        
          |
           ( all exp/Specialist((is_in(this.relevant_experts, exp) & 
                               (exp.field_of_expertise = revi.subm_ref.field) ) -> 
                               (exp.degree <> PhD) ) 
           &
             ex exp/Specialist(is_in(this.relevant_experts, exp) & 
                             (exp.field_of_expertise = revi.subm_ref.field) & 
                             (revi.by_specialist~ = exp) )
           )
          )       
       }
     };    
    };
}
;
  
class_specification :

{ symmetric; in: association, metaclass;
  domain: person;
  range: person;
  instance_section: 
  	{ Symmetric; in: type; 
	    symmetricity:  { in: invariant;  
	    	{ predicative: 
	    		{ all s1/Person, s2/Person(is_in(this, [s1, s2]) -> is_in(this, [s2, s1])) }
	    	};      
	  	};  
    
    };
},

{ teachesAM; in: association, metaclass;	
	superclass: symmetric;
	association_type: { {3, 10 }, {1, 2} };
	domain: teacher, proposal;
	range: student, evaluation;
    instance_section: 
  	{ Teaches; in: type; 
	    nonPhD:  { in: invariant;  
	    	{ predicative: 
	    		{ all t/Teacher((t.degree <> PhD) -> (cardinal({s/Student | is_in(this, [t, s]) }) le 5)) }
	    	};      
	  	};  
    
    };	
},

{ teacher; in: class;
  superclass: person;
  instance_section: Teacher;  
},

{ student; in: class;
   superclass: person;
   instance_section: Student;
},

{ proposal; 
  in: class;
  instance_section: Proposal;
},

{ review; 
  in: class;
  instance_section: Review;
},


{ person; 
  in: class; 
  instance_section: Person;
},

{ researcher; 
  in: class; 
  superclass: person;
  instance_section: Researcher;
},


{ expert; 
  in: class; 
  superclass: researcher;
  instance_section: Expert;
},

{ secretary; 
  in: class;
  instance_section: Secretary;
},

{ employee; 
  in: class; 
  instance_section: Employee;
},

{ specialist; 
  in: class; 
  superclass: employee;
  instance_section: Specialist;
},


{ evaluation; 
  in: class;
  instance_section: Evaluation;
},

{ dispatcher; 
  in: class;
  instance_section: Dispatcher;
}
;
  
}
