/* ObjectDM
 * Author: ssa
 * Creation date: 10/13/2023
 */

REFINEMENT ObjectDM
REFINES ObjectDM_Mach

SEES
    Context
    
ABSTRACT_VARIABLES
    
    typeNames,
    classNames,
    attributeNames,    
    instanceType,
    typeAttributes,
    attributeType,
    unique,
    obligatory,
    intAttributeLowerBound,
    intAttributeHigherBound,    
    
    objectIDs,
    objectType,
    objectsOfClass,
    
    stringAttributeValue,
    booleanAttributeValue,
    integerAttributeValue,
    adtAttributeValue

   
INVARIANT
    
    typeNames: POW(STRING_Type) &
    classNames: POW(STRING_Type) &
    
    /* Attributes are identified by NAT ids: 
       attributes with the same name can belong to different types.
    */   
    attributeNames: NAT +-> STRING_Type &
    
    instanceType: classNames --> typeNames &
    
    typeAttributes: typeNames --> POW(dom(attributeNames))  &
    /* Every attribute belongs to some type */
    UNION(tt).(tt: typeNames | typeAttributes(tt)) = dom(attributeNames) &
    /* No attribute belongs to two types simultaneously */
    !(t1, t2).(t1: typeNames & t2: typeNames => (typeAttributes(t1) /\ typeAttributes(t2) = {})) &
    
    attributeType: dom(attributeNames) +-> BuiltInTypes &
    
    /* Unique attributes of types */
    unique: typeNames --> POW(dom(attributeNames)) & 
    !(tt).(tt: dom(unique) => unique(tt) <: typeAttributes(tt)) &
    
    /* Obligatory attributes of types */    
    obligatory: typeNames --> POW(dom(attributeNames)) &
    !(tt).(tt: dom(obligatory) => obligatory(tt) <: typeAttributes(tt)) &    
    
    intAttributeLowerBound: dom(attributeNames) +-> INT &
    !(attr).(attr: dom(intAttributeLowerBound) => 
    	attributeType(attr) = Integer) &
 
    intAttributeHigherBound: dom(attributeNames) +-> INT &
    !(attr).(attr: dom(intAttributeHigherBound) => 
    	attributeType(attr) = Integer) &

 
    objectIDs: POW(NAT) &    
    objectType: objectIDs --> typeNames &    
    objectsOfClass: classNames --> POW(objectIDs) &
    
    /* A type of an object belonging to a class is the instance type of the class */
    !(cc).(cc: classNames => !(oo).(oo: objectsOfClass(cc) => objectType(oo) = instanceType(cc))) &
    
    stringAttributeValue: dom(attributeNames) +-> (objectIDs +-> STRING_Type) &
    booleanAttributeValue: dom(attributeNames) +-> (objectIDs +-> BOOL) &    
    integerAttributeValue: dom(attributeNames) +-> (objectIDs +-> INT) & 
    adtAttributeValue: dom(attributeNames) +-> (objectIDs +-> NAT) &
    
    /* Only one value function is defined for an attribute */
    dom(adtAttributeValue) /\ dom(integerAttributeValue) = {} &
    /* For every attribute a value function is defined */
    dom(adtAttributeValue) \/ dom(integerAttributeValue) = dom(attributeNames) &
    
    /* For every obligatory attribute of an object a velue of the attribute is defined */
    !(oo, aa).(oo: dom(objectType) & aa: typeAttributes(objectType(oo)) & aa: obligatory(objectType(oo)) =>
            (attributeType(aa) = Integer => oo: dom(integerAttributeValue(aa))) &
            (attributeType(aa) = ADT => oo: dom(adtAttributeValue(aa)))                   
    ) &
    
    /* A value of an attribute is restricted by lower and higher bounds if they are defined */
    !(oo, aa).(oo: objectIDs & aa: typeAttributes(objectType(oo)) & oo: dom(integerAttributeValue(aa))=>        
        (aa: dom(intAttributeLowerBound) => (integerAttributeValue(aa)(oo) >= intAttributeLowerBound(aa))) &
        (aa: dom(intAttributeHigherBound) => (integerAttributeValue(aa)(oo) <= intAttributeHigherBound(aa)))
    ) &
    
    /* An object is uniquely identified by a set of unique attributes */
    !(oo1, oo2).(oo1: objectIDs & oo2: objectIDs & objectType(oo1) = objectType(oo2) & 
        unique(objectType(oo1)) /= {} &
        !(aa).(aa: unique(objectType(oo1)) => 
            (attributeType(aa) = Integer => integerAttributeValue(aa)(oo1) = integerAttributeValue(aa)(oo2)) &
            (attributeType(aa) = ADT => adtAttributeValue(aa)(oo1) = adtAttributeValue(aa)(oo2))                               
        ) 
        => 
        oo1 = oo2        
    )
    
   
INITIALISATION
       
   typeNames := {} ||
   classNames := {} ||
   attributeNames := {} ||
   instanceType := {} ||
   typeAttributes := {} ||
   attributeType := {} ||
   unique := {} ||   
   obligatory := {} ||   
   intAttributeLowerBound := {} ||  
   intAttributeHigherBound := {} ||     
   
   objectIDs := {} ||
   objectType := {} ||
   objectsOfClass := {} ||
   
   stringAttributeValue:= {} ||
   booleanAttributeValue:= {} ||   
   integerAttributeValue:= {} ||
   adtAttributeValue:= {} 

OPERATIONS
        
    update1(cls, attr, exp, cond) =
    PRE cls: classNames & attr: typeAttributes(instanceType(cls)) &
        attributeType(attr) = Integer &
        exp: INT --> INT & cond: NAT --> BOOL
    THEN
        integerAttributeValue := 
        integerAttributeValue <+ 
        { xx | xx: (NAT*(NAT<->INT)) &
            #(oo, val).( oo: objectsOfClass(cls) & val: INT & xx = attr |-> ({oo |-> val}) & 
                (cond(integerAttributeValue(attr)(oo)) = TRUE => val = exp(integerAttributeValue(attr)(oo))) &
                (cond(integerAttributeValue(attr)(oo)) = FALSE => val = integerAttributeValue(attr)(oo))
            )
        }
    END
    
 END