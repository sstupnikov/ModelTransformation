/* CancerRef
 * Author: ssa
 * Creation date: 5/25/2022
 */

REFINEMENT CancerRef
REFINES CancerAM

SEES ContextRDF

SETS

    // Properties  
    IP = { hasNeoplasm };
    IP_String_Range = { hasName }; 
    IP_CancerStage_Range = { hasStage };     
 
    // RDFS Classes
    IC = { Thing,        
        BenignNeoplasm, Cancer, LungCancer, MalignantNeoplasm, 
        NSCLC, Neoplasm, Patient, Person, SCLC 
    }; 

    // Datatypes
    CancerStage = { stageI, stageII, stageIII, stageIIIa, stageIIIb, stageIV }

DEFINITIONS
    STRING_TYPE == seq(0..255)

ABSTRACT_CONSTANTS 
    
    IS_IP, // IRIs for Properties 
    IS_IP_String_Range, // IRI for String range properties 
    IS_IP_CancerStage_Range, // IRI for CancerStage range properties 
        
    IL_CancerStage, // IRIs for CancerStage Values 
    
    personIRI,
    neoplasmIRI
    
PROPERTIES
    

    IS_IP: IRI +-> IP & 
    IS_IP: FIN(IS_IP) &
    IS_IP_String_Range: IRI +-> IP_String_Range &
    IS_IP_String_Range: FIN(IS_IP_String_Range) &
    IS_IP_CancerStage_Range: IRI +->  IP_CancerStage_Range &
    IS_IP_CancerStage_Range: FIN(IS_IP_CancerStage_Range) &
    
    
    IL_CancerStage: IRI +-> CancerStage & IL_CancerStage: FIN(IL_CancerStage) &
    
    // Valid for finite interpretations
    IRI = dom(IS_IR) \/ 
        dom(IS_IP) \/ dom(IS_IP_String_Range) \/ dom(IS_IP_CancerStage_Range) \/       
        dom(IL_String) \/ dom(IL_CancerStage) &
    
    card(IRI) = card(dom(IS_IR)) + card(dom(IS_IP)) + 
        card(dom(IS_IP_String_Range)) + card(dom(IS_IP_CancerStage_Range)) +
        card(dom(IL_String)) + card(dom(IL_CancerStage)) &
    
    personIRI: INT >-> IRI & ran(personIRI) <: dom(IS_IR) &
    neoplasmIRI: INT >-> IRI & ran(neoplasmIRI) <: dom(IS_IR) &
    ran(personIRI) /\ ran(neoplasmIRI) = {}
    
    
ABSTRACT_VARIABLES
        
    IEXT, // Properties Interpretation
    IEXT_String_Range, // Interpretation for properties with string range
    IEXT_CancerStage_Range, // Interpretation for properties with CancerStage range
    ICEXT // Classes Interpretation

INVARIANT
    
    IEXT: IP --> POW(IR*IR) &
    IEXT_String_Range: IP_String_Range --> POW(IR*STRING_TYPE) &
    IEXT_CancerStage_Range: IP_CancerStage_Range --> POW(IR*CancerStage) &
    
    ICEXT: IC --> POW(IR) &
        
    // OWL Class in a subclass of Thing.
    // Required only for class with no superclasses
    ICEXT(Thing) = IR &
    
    // SubClassOf 
    ICEXT(BenignNeoplasm) <: ICEXT(Neoplasm) &
    ICEXT(MalignantNeoplasm) <: ICEXT(Neoplasm) &
    ICEXT(Cancer) <: ICEXT(MalignantNeoplasm) &    
    ICEXT(LungCancer) <: ICEXT(Cancer) &    
    ICEXT(NSCLC) <: ICEXT(LungCancer) &        
    ICEXT(SCLC) <: ICEXT(LungCancer) &   
    ICEXT(Patient) <: ICEXT(Person) &       
    
    // hasNeoplasm domain 
    !(xx, yy).(xx: IR & yy: IR & (xx|->yy):IEXT(hasNeoplasm) =>
        xx: ICEXT(Patient) ) &
    // hasNeoplasm range
    !(xx, yy).(xx: IR & yy: IR & (xx|->yy):IEXT(hasNeoplasm) =>
        yy: ICEXT(Neoplasm) ) &
    // hasStage domain
    !(xx, yy).(xx: IR & yy: CancerStage & (xx|->yy):IEXT_CancerStage_Range(hasStage) =>
        xx: ICEXT(Neoplasm) ) 


INITIALISATION 

    IEXT:= { hasNeoplasm |-> {} } ||
    IEXT_String_Range:= { hasName |-> {} } ||
    IEXT_CancerStage_Range:= { hasStage |-> {} } ||
    ICEXT:= { 
        Thing |-> IR,         
        BenignNeoplasm |-> {}, Cancer |-> {}, LungCancer |-> {}, 
        MalignantNeoplasm |-> {}, NSCLC |-> {}, Neoplasm |-> {}, 
        Patient |-> {}, Person |-> {}, SCLC |-> {}  
    }


OPERATIONS
    
res <--  patientsWithTumorOfStageIIIa =
BEGIN
    res:= 
    { rcrd | 
        rcrd: struct(name: STRING_TYPE)  &
        #(pp, tumor).(
            pp: ICEXT(Patient) & tumor: ICEXT(Neoplasm) &
            (pp |-> rcrd'name): IEXT_String_Range(hasName) &
            (pp |-> tumor): IEXT(hasNeoplasm) &
            (tumor |-> stageIIIa): IEXT_CancerStage_Range(hasStage)
        )
    }          
END


END
